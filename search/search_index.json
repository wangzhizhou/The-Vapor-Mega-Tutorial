{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"<p>\u4e3a\u4ec0\u4e48\u8981\u5199\u8fd9\u4e2a\u6559\u7a0b</p> <p>\u56e0\u4e3a\u4e4b\u524d\u4f7f\u7528Python\u7684Web\u5f00\u53d1\u6846\u67b6Flask\u5199\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u670d\u52a1\uff0c\u5199\u7684\u8fc7\u7a0b\u4e2d\u662f\u901a\u8fc7\u770b\u4e00\u4e2a\u540d\u53ebFlask\u5927\u578b\u6559\u7a0b\u7684\u7cfb\u5217\u535a\u5ba2\u5b66\u4e60\u7684\uff0c \u89c9\u5f97\u4f5c\u8005\u5199\u7684\u5f88\u597d\uff0c\u4e5f\u8ba9\u6211\u611f\u53d7\u5230\u4e86\u5199Web\u9875\u9762\u548c\u540e\u7aef\u670d\u52a1\u7684\u4e50\u8da3\u3002</p> <p>\u6211\u540c\u65f6\u4e5f\u662f\u4e00\u540diOS\u5f00\u53d1\u8005\uff0c\u5bf9\u82f9\u679c\u516c\u53f8\u5f00\u53d1\u7684\u7f16\u7a0b\u8bed\u8a00Swift\u4e5f\u6709\u975e\u5e38\u6d53\u539a\u7684\u5174\u8da3\uff0c\u4e86\u89e3\u5230Swift\u4e5f\u53ef\u4ee5\u7528\u6765\u5199\u670d\u52a1\u7aef\uff0c\u5c31\u5c1d\u8bd5\u6bd4\u8f83\u4e86\u51e0\u79cd\u6d41\u884c\u7684\u6846\u67b6\uff0c\u5305\u62ecKitura\u3001Perfect\u548cVapor\uff0c\u5176\u4e2dKitura\u662fIBM\u63a8\u51fa\u7684\u5546\u4e1a\u5316\u5f00\u53d1\u6846\u67b6\uff0cPerfect\u662f\u4e00\u4e2a\u529f\u80fd\u975e\u5e38\u5b8c\u5584\u4e5f\u6709\u4e9b\u590d\u6742\u7684\u5f00\u6e90\u6846\u67b6\uff0cVapor\u662f\u4e00\u4e2a\u4f7f\u7528\u7eafSwift\u5b9e\u73b0\u7684\u5f00\u6e90\u6846\u67b6\uff0c\u4e09\u8005\u5728GitHub\u4e0a\u7684\u661f\u4e5f\u4e0d\u5c11\uff0c\u53ef\u4ee5\u8bf4\u662f\u76ee\u524d\u4e3b\u6d41\u7684Swift\u670d\u52a1\u7aef\u5f00\u53d1\u6846\u67b6\u4e86\u3002\u90a3\u4e48\u6211\u4e3a\u4ec0\u4e48\u72ec\u72ec\u5bf9Vapor\u8fd9\u4e2a\u6846\u67b6\u4ea7\u751f\u4e86\u5174\u8da3\u5462\uff1f</p> <p>\u5bf9Vapor\u6709\u597d\u611f\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u7684\u5b98\u7f51\u975e\u5e38\u7b80\u6d01\uff0c\u6846\u67b6\u4f7f\u7528\u7eafSwift\u5b9e\u73b0\uff0c\u540c\u65f6\u5b83\u7684\u793e\u533a\u975e\u5e38\u6d3b\u8dc3\uff0c\u9879\u76ee\u4e0d\u662f\u592a\u5927\uff0c\u5bf9\u4e8e\u6211\u8fd9\u79cd\u4e0d\u9700\u8981\u592a\u590d\u6742\u529f\u80fd\u7684\u5f00\u53d1\u8005\u6765\u8bf4\u521a\u597d\u3002</p> <p>\u9009\u62e9Vapor\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u559c\u6b22\u7b80\u5355\u7684\u4e1c\u897f\u3002\ud83e\udd23 \u6211\u89c9\u5f97\u5b98\u7f51\u53ef\u4ee5\u4f53\u73b0\u51fa\u5f00\u53d1\u56e2\u961f\u7684\u6c34\u5e73\uff0c\u7b80\u5355\u7684\u4e1c\u897f\u603b\u662f\u8ba9\u4eba\u559c\u6b22\u3002</p> <p>Vapor\u662f\u4e00\u4e2a\u7528Swift\u8bed\u8a00\u5199\u7684\u5f00\u6e90\u6846\u67b6\uff0c\u57fa\u4e8e\u82f9\u679c\u7684SwiftNIO\u5e93\u3002\u53ef\u4ee5\u7528\u6765\u6784\u5efa\uff1a\u540e\u7aef\u670d\u52a1\u3001Web\u7f51\u9875\u3002</p> <p>Tanner Nelson\u57282016\u5e741\u6708\u542f\u52a8\u4e86Vapor\u9879\u76ee\uff0c\u5f88\u5febLogan Wright\u52a0\u5165\u4e86\u3002\u4e4b\u540e\u6709\u5f88\u591a\u7684\u4eba\u52a0\u5165\u4e86Vapor\u7684\u5f00\u53d1\u8005\u793e\u533a\uff0c\u56e0\u4e3aVapor\u4f7f\u7528\u4e86Swift\u98ce\u683c\u7684API\u548c\u5927\u91cf\u7684\u8bed\u8a00\u7279\u6027\uff0c\u5f88\u5feb\u5728GitHub\u4e0a\u6210\u4e3a\u4e86\u6d41\u884c\u7684\u670d\u52a1\u7aefSwift\u6846\u67b6\u3002\u968f\u7740Swift\u8bed\u8a00\u7684\u5f00\u6e90\uff0cVapor\u4e5f\u88ab\u5408\u5e76\u5165Swift Server Group\uff0c\u6210\u4e3a\u4e86\u82f9\u679c\u652f\u6301\u7684\u670d\u52a1\u7aef\u5f00\u53d1\u6846\u67b6\u3002</p> <p>Vapor\u5305\u542b\u4e00\u4e9b\u7ec4\u4ef6\uff0c\u5176\u4e2dLeaf\u662f\u4e00\u4e2a\u5f00\u53d1\u524d\u7aef\u9875\u9762\u4f7f\u7528\u7684\u6a21\u677f\u8bed\u8a00\u7ec4\u4ef6\uff0cFluent\u662f\u4e00\u4e2aSwift\u5199\u7684\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04(ORM)\u6846\u67b6\u3002Vapor\u7684\u5f00\u53d1\u8005\u793e\u533a\u975e\u5e38\u6d3b\u8dc3\uff0c\u4eceDiscord\u7684\u8ba8\u8bba\u9891\u9053\u53ef\u4ee5\u770b\u51fa\u6765\u3002</p> <p>\u600e\u6837\u5b66\u4e60Vapor</p> <ol> <li>\u770b\u6559\u7a0b\uff0c\u5199\u4ee3\u7801</li> <li>\u770b\u6587\u6863\uff0c\u5199\u4ee3\u7801</li> <li>\u770b\u6e90\u7801\uff0c\u5199\u4ee3\u7801</li> </ol> <p>\u8981\u52a8\u624b \u5199\u4ee3\u7801\uff0c\u7406\u8bba\u914d\u5408\u5b9e\u8df5\u624d\u80fd\u6bd4\u8f83\u624e\u5b9e\u7684\u638c\u63e1\u3002</p> <p>\u672c\u6559\u7a0b\u7684\u4e3b\u8981\u5185\u5bb9\u6765\u81ea\u56fe\u4e66\u300aServer Side Swift With Vapor\u300b\u5176\u4e2d\u5927\u90e8\u5206\u662fVapor\u7684\u6838\u5fc3\u6210\u5458\u5199\u7684\uff0c\u4ed6\u4eec\u77e5\u9053\u600e\u6837\u624d\u80fd\u66f4\u597d\u7684\u4f7f\u7528Vapor\u3002</p> <p></p> <p>\u6309\u7167IT\u4eba\u62ff\u8d77\u952e\u76d8\u5c31\u662f\u5e72\u7684\u98ce\u683c\uff0c\u4e0b\u4e00\u8282\u5c31\u662f\u73af\u5883\u914d\u7f6e\u4e86\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f60\u53ef\u4ee5\u770b\u5230Vapor\u7684\u7b80\u6d01\u7684\u7279\u70b9\u3002</p> \u4f7f\u7528Swift\u7684\u597d\u5904 <ul> <li>Swift\u662f\u5f3a\u9759\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u53ef\u4ee5\u51cf\u5c11\u5e94\u7528\u5728\u8fd0\u884c\u671f\u7684\u5d29\u6e83</li> <li>Swift\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u6bd4\u89e3\u91ca\u578b\u8bed\u8a00\u6027\u80fd\u597d</li> <li>Swift\u5bf9\u4e8eiOS\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u53ef\u4ee5\u5305\u63fd\u524d\u540e\u7aef\u5f00\u53d1\uff0c\u4e0d\u9700\u8981\u66f4\u6362\u8bed\u8a00\uff0c\u5e76\u4e14Swift\u96c6\u4f17\u591a\u8bed\u8a00\u7684\u7279\u70b9\u4e8e\u4e00\u8eab</li> <li>\u4f7f\u7528Swift+Xcode\u5f00\u53d1\u5bf9\u4e8e\u670d\u52a1\u7aef\u5f00\u53d1\u6765\u8bf4\uff0c\u6709\u529f\u80fd\u9f50\u5907\u7684IDE\u548c\u76f8\u5173\u8c03\u8bd5\u80fd\u529b\uff0c\u8fd9\u79cd\u7279\u6027\u5728\u670d\u52a1\u7aef\u5f00\u53d1\u4f53\u9a8c\u662f\u975e\u5e38\u68d2\u7684\uff0c\u5927\u591a\u6570\u670d\u52a1\u7aef\u5f00\u53d1\u8bed\u8a00\u90fd\u6ca1\u6709IDE\u652f\u6301</li> </ul> \u4f7f\u7528Vapor\u5f00\u53d1\u670d\u52a1\u7aef\u7684\u597d\u5904 <ul> <li>iOS\u5f00\u53d1\u4f7f\u7528Swift\uff0cVapor\u4e5f\u4f7f\u7528\u76f8\u540c\u7684\u8bed\u8a00\uff0c\u5728\u5199\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u5e94\u7528\u65f6\uff0c\u53ef\u4ee5\u590d\u7528\u6570\u636e\u5c42\u6a21\u578b\uff0c\u51cf\u5c11\u8bed\u8a00\u5207\u6362\u6210\u672c\uff0c\u6269\u5c55\u5168\u6808\u5f00\u53d1\u80fd\u529b</li> <li>Vapor\u4f7f\u7528\u4e86Codable\u534f\u8bae\uff0c\u8fd9\u80fd\u591f\u51cf\u5c11\u8bb8\u591a\u6570\u636e\u5728\u6a21\u578b\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u8f6c\u6362\u683c\u5f0f\u7684\u76f8\u5173\u4ee3\u7801</li> <li>Vapor\u662f\u5b8c\u5168\u975e\u963b\u585e\u5f0f\u7684\u67b6\u6784\u3002\u963b\u585e\u5f0f\u7684\u67b6\u6784\u4e2d\uff0c\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8fdb\u884c\u8bf7\u6c42\u548c\u8fd4\u56de\u8bf7\u6c42\u6570\u636e\u65f6\uff0c\u5982\u679c\u4e2d\u95f4\u5904\u7406\u64cd\u4f5c\u8017\u65f6\u8f83\u591a\uff0c\u4f1a\u51fa\u73b0\u8fd4\u56de\u5ef6\u8fdf\u7684\u60c5\u51b5\u3002\u5982\u679c\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\u8fdb\u884c\u8bf7\u6c42\u548c\u8fd4\u56de\uff0c\u7ebf\u7a0b\u95f4\u7684\u5207\u6362\u6d88\u8017\u53c8\u4f1a\u8f83\u5927\u3002\u975e\u963b\u585e\u7684\u67b6\u6784\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u8bf7\u6c42\u4e0d\u80fd\u9a6c\u4e0a\u8fd4\u56de\uff0c\u4f1a\u88ab\u653e\u5728\u4e00\u8fb9\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u8fd4\u56de\u4e4b\u524d\u7684\u8fd9\u6bb5\u65f6\u95f4\u8fd8\u53ef\u4ee5\u5904\u7406\u5176\u5b83\u8bf7\u6c42\u3002</li> <li>Vapor\u4f7f\u7528SwiftNIO\u5b9e\u73b0\u4e86\u975e\u963b\u585e\u67b6\u6784\uff0c\u5305\u62ec\u6570\u636e\u5e93\u9a71\u52a8\u3002</li> </ul>"},{"location":"blog/","title":"\u535a\u5ba2","text":""},{"location":"blog/2023%E5%B9%B412%E6%9C%8809%E6%97%A5/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%86%85%E5%AE%B9/test_post/","title":"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u5185\u5bb9","text":"<p>This is excepter</p>"},{"location":"blog/2023%E5%B9%B412%E6%9C%8809%E6%97%A5/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%86%85%E5%AE%B9/test_post/#this-is-title","title":"This is Title","text":""},{"location":"blog/2023%E5%B9%B412%E6%9C%8809%E6%97%A5/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%86%85%E5%AE%B9/test_post/#this-is-subtitle","title":"This is Subtitle","text":"<p>This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.This is body test.</p> <p>This is inline math expression: \\(e^{i\\pi}+1=0\\)</p> <p>This is block match expression: </p> \\[ ret = \\frac{a}{b} \\] \\[ ret = \\frac{a}{b} \\]"},{"location":"client/mobile/","title":"\u79fb\u52a8\u7aef","text":"<p>\u5141\u8bb8https\u8bf7\u6c42\uff0c\u4e0d\u9a8c\u8bc1\u8bc1\u4e66</p> <p>info.plist \u8bbe\u7f6e</p> <p>App Transport Security Settings |- Allow Arbitrary Loads = YES</p> Swift<pre><code>  func session() -&gt; URLSession {\n    let session = URLSession(configuration: .default, delegate: self, delegateQueue: OperationQueue())\n    return session\n  }\n\n  //https\u6240\u6709\u8bc1\u4e66\u90fd\u9a8c\u8bc1\u901a\u8fc7\n  func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -&gt; Void) {\n    let credential = URLCredential(trust: challenge.protectionSpace.serverTrust!)\n    completionHandler(.useCredential, credential)\n  }\n</code></pre> <p>iOS \u9879\u76ee\u6bd4\u8f83\u70e6\u7410\uff0c\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u94fe\u63a5\u5730\u5740\u5427: https://github.com/wangzhizhou/TILiOS.git</p>"},{"location":"client/web/","title":"\u4ecb\u7ecd","text":"<p>\u5728\u4e4b\u524d\u5f00\u53d1\u7684\u540e\u7aefAPI\u57fa\u7840\u4e0a\uff0c\u518d\u5f00\u53d1\u4e00\u4e2a\u524d\u7aef\u7f51\u7ad9\u3002Vapor\u4f7f\u7528\u7684\u6a21\u677f\u5f15\u64ce\u53eb\u4f5c<code>Leaf</code>, \u53ef\u4ee5\u7528\u6765\u521b\u5efa\u52a8\u6001Web\u7ad9\u70b9\u3002</p>"},{"location":"client/web/add-categories/","title":"\u6dfb\u52a0\u7c7b\u522b\u6807\u7b7e","text":"<p>Category.swift</p> <p>\u7ed9Categor\u6a21\u578b\u6dfb\u52a0\u4e00\u4e2a\u6269\u5c55\u65b9\u6cd5\uff0c\u7528\u6765\u7ed9\u7f29\u7565\u8bed\u6dfb\u52a0\u7c7b\u522b\u6807\u7b7e Swift<pre><code>extension Category {\n    ...\n\n    static func addCategory(_ name: String,\n                            to acronym: Acronym,\n                            on req: Request\n        ) throws -&gt; Future&lt;Void&gt; {\n        return Category.query(on: req).filter(\\.name == name).first()\n            .flatMap(to: Void.self) { foundCategory in\n                if let existingCategory = foundCategory {\n                    return acronym.categories.attach(existingCategory, on: req)\n                    .transform(to: ())\n                }\n                else {\n                    let category = Category(name: name)\n                    return category.save(on: req).flatMap(to: Void.self) { savedCategory in\n                        return acronym.categories.attach(savedCategory, on: req).transform(to: ())\n\n                    }\n                }\n        }\n    }\n}\n</code></pre></p> <p>WebsiteController.swift Swift<pre><code>...\nstruct CreateAcronymData: Content {\n    let userID: User.ID\n    let short: String\n    let long: String\n    let categories: [String]?\n}\n...\nrouter.post(CreateAcronymData.self, at: \"acronyms\", \"create\", use: createAcronymPostHandler)\n...\nfunc createAcronymPostHandler(_ req: Request, data: CreateAcronymData) throws -&gt; Future&lt;Response&gt; {\n\n        let acronym = Acronym(short: data.short, long: data.long, userID: data.userID)\n\n\n        return acronym.save(on: req).flatMap(to: Response.self) { acronym in\n            guard let id = acronym.id else {\n                throw Abort(HTTPStatus.internalServerError)\n            }\n            var categorySaves: [Future&lt;Void&gt;] = []\n            for category in data.categories ?? [] {\n                try categorySaves.append(Category.addCategory(category, to: acronym, on: req))\n            }\n            let redirect = req.redirect(to: \"/acronyms/\\(id)\")\n            return categorySaves.flatten(on: req).transform(to: redirect)\n        }\n    }\n...\n</code></pre></p> <p>createAcronym.leaf</p> <p><code>categories[]</code>\u53ef\u53d1\u9001\u7ecfurl\u7f16\u7801\u540e\u7684categories\u6570\u7ec4\u6570\u636e\uff0c <code>multiple</code>\u5141\u8bb8\u591a\u9009 HTML<pre><code>    ...\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"categories\"&gt;Categories&lt;/label&gt;\n            &lt;select name=\"categories[]\" class=\"form-control\" id=\"categories\" placeholder=\"Categories\" multiple=\"multiple\"&gt;\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" class = \"btn btn-primary\"&gt;\n            #if(editing) { Update } else { Submit }\n        &lt;/button&gt;\n    &lt;/form&gt;\n}\n...\n</code></pre></p> <p></p> <p>\u56e0\u4e3a\u6211\u4eec\u76ee\u524d\u7684\u7f29\u7565\u8bed\u8fd8\u6ca1\u6709\u76f8\u5173\u7c7b\u522b\uff0c\u6240\u4ee5\u663e\u793a\u662f\u7a7a\u7684\uff0c\u4e5f\u4e0d\u597d\u770b\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u53eb\u4f5c<code>Select2</code>\u7684javascript\u5e93\u6765\u7f8e\u5316\u4e00\u4e0b\u3002\u56e0\u4e3ajQuery\u7684slim\u7248\u672c\u4e0d\u5305\u542b<code>select2</code>\u9700\u8981\u7528\u5230\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u6362\u4e86\u4e00\u4e2a\u7248\u672c\u7684jQuery\u3002\u540c\u65f6\u672c\u5730\u5199\u4e86\u4e00\u4e2ajs\uff0c\u4e5f\u5305\u542b\u5728\u6a21\u677f\u6587\u4ef6\u4e2d\u4e86\u3002</p> <p>base.leaf HTML<pre><code>...\n&lt;head&gt;\n    ...\n    #if(title==\"Create An Acronym\") {\n        &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/css/select2.css\" /&gt;\n    }\n    #if(title==\"Edit Acronym\"){\n        &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/css/select2.css\" /&gt;\n    }\n&lt;title&gt;#(title) | Acronyms&lt;/title&gt;\n&lt;/head&gt;\n...\n&lt;!-- Optional JavaScript --&gt;\n&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt;\n\n#if(title==\"Create An Acronym\") {\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/js/select2.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/scripts/createAcronym.js\"&gt;&lt;/script&gt;\n}\n#if(title == \"Edit Acronym\"){\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/js/select2.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/scripts/createAcronym.js\"&gt;&lt;/script&gt;\n}\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre></p> <p>Public/scripts/createAcronym.js JavaScript<pre><code>$.ajax({\n       url: \"/api/categories/\",\n       type: \"GET\",\n       contentType: \"application/json; charset=utf-8\"\n       })\n.then(function (response) {\n      var dataToReturn = [];\n\n      for(var i = 0; i &lt; response.length; i++) {\n      var tagToTransform = response[i];\n      var newTag = {\n      id: tagToTransform[\"name\"],\n      text: tagToTransform[\"name\"]\n      };\n\n      dataToReturn.push(newTag);\n      }\n\n      $(\"#categories\").select2({\n                               placeholder: \"Select Categories for the Acronym\",\n                               tags: true,\n                               tokenSeparator: [','],\n                               data: dataToReturn\n                               });\n      });\n</code></pre></p> <p></p> <p>acronym.leaf HTML<pre><code>#set(\"content\"){\n...\n    #if(count(categories) &gt; 0) {\n        &lt;h3&gt;Categories&lt;/h3&gt;\n        &lt;ul&gt;\n            #for(category in categories) {\n            &lt;li&gt;\n                &lt;a href=\"/category/#(category.id)\"&gt;\n                    #(category.name)\n                &lt;/a&gt;\n            &lt;/li&gt;\n            }\n        &lt;/ul&gt;\n    }\n    &lt;form method=\"post\" action=\"/acronyms/#(acronym.id)/delete\"&gt;\n        &lt;a class=\"btn btn-primary\" href=\"/acronyms/#(acronym.id)/edit\" role=\"button\"&gt;Edit&lt;/a&gt;&amp;nbsp;\n        &lt;input class=\"btn btn-danger\" type=\"submit\" value=\"Delete\" /&gt;\n    &lt;/form&gt;\n}\n\n#embed(\"base\")\n</code></pre></p> <p>WebsiteController.swift Swift<pre><code>...\nstruct AcronymContext: Encodable {\n    let title: String\n    let acronym: Acronym\n    let user: User\n    let categories: Future&lt;[Category]&gt;\n}\n...\nfunc acronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n    return try req.parameters.next(Acronym.self)\n        .flatMap(to: View.self) { acronym in\n            return acronym.user.get(on: req)\n                .flatMap(to: View.self) { user in\n                    let categories = try acronym.categories.query(on: req).all()\n                    let context = AcronymContext(\n                        title: acronym.short,\n                        acronym: acronym,\n                        user: user,\n                        categories: categories)\n                    return try req.view().render(\"acronym\", context)\n            }\n    }\n}\n...\n</code></pre></p> <p></p> <p>\u76ee\u524d\u53ea\u662f\u5b9e\u73b0\u4e86\u9009\u62e9\u7c7b\u522b\u548c\u663e\u793a\u7c7b\u522b\u7684\u529f\u80fd\uff0c\u4f46\u662f\u4f60\u5728\u7f16\u8f91\u7f29\u7565\u8bed\u65f6\u4f1a\u53d1\u73b0\uff0c\u9009\u62e9\u7684\u7c7b\u522b\u6ca1\u6709\u88ab\u4fdd\u5b58\u4e0b\u6765\u3002</p> <p>WebsiteController.swift Swift<pre><code>import Fluent\n...\nstruct EditAcronymContext: Encodable {\n    let title = \"Edit Acronym\"\n    let acronym: Acronym\n    let users: Future&lt;[User]&gt;\n    let editing = true\n    let categories: Future&lt;[Category]&gt;\n}\n...\n    func editAcronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return try req.parameters.next(Acronym.self)\n            .flatMap(to: View.self) { acronym in\n                let users = User.query(on: req).all()\n                let categories = try acronym.categories.query(on: req).all()\n                let context = EditAcronymContext(acronym: acronym,\n                                                 users: users,\n                                                 categories: categories)\n                return try req.view().render(\"createAcronym\", context)\n        }\n    }\n    ...\n    func editAcronymPostHandler(_ req: Request) throws -&gt; Future&lt;Response&gt; {\n        return try flatMap(to: Response.self,\n                           req.parameters.next(Acronym.self),\n                           req.content.decode(CreateAcronymData.self)\n        ) { acronym, data in\n            acronym.short = data.short\n            acronym.long = data.long\n            acronym.userID = data.userID\n\n            return acronym.save(on: req).flatMap(to: Response.self) { savedAcronym in\n                guard let id = savedAcronym.id else {\n                    throw Abort(HTTPResponseStatus.internalServerError)\n                }\n\n                return try acronym.categories.query(on: req).all()\n                    .flatMap(to: Response.self) { existingCategories in\n                        let existingStringArry = existingCategories.map { $0.name }\n\n                        let existingSet = Set&lt;String&gt;(existingStringArry)\n                        let newSet = Set&lt;String&gt;(data.categories ?? [])\n\n                        let categoriesToAdd = newSet.subtracting(existingSet)\n                        let categoriesToRemove = existingSet.subtracting(newSet)\n\n                        var categoryResults: [Future&lt;Void&gt;] = []\n\n                        for newCategory in categoriesToAdd {\n                            categoryResults.append(try Category.addCategory(newCategory, to: acronym, on: req))\n                        }\n\n                        for categoryNameToRemove in categoriesToRemove {\n                            let categoryToRemove = existingCategories.first {\n                                $0.name == categoryNameToRemove\n                            }\n                            if let category = categoryToRemove {\n                                categoryResults.append(acronym.categories.detach(category, on: req))\n                            }\n                        }\n                        return categoryResults.flatten(on: req)\n                        .transform(to: req.redirect(to: \"/acronyms/\\(id)\"))\n                }\n            }\n        }\n    }    \n</code></pre></p> <p></p>"},{"location":"client/web/all-categories/","title":"\u6240\u6709\u7c7b\u522b\u9875\u9762","text":"<p>WebsiteController.swift Swift<pre><code>...\nstruct AllCategoriesContext: Encodable {\n    let title = \"All Categories\"\n    let categories: Future&lt;[Category]&gt;\n}\nstruct CategoryConext: Encodable {\n    let title: String\n    let category: Category\n    let acronyms: Future&lt;[Acronym]&gt;\n}\n...\n    router.get(\"categories\", use: allCategoriesHandler)\n    router.get(\"category\", Category.parameter, use: categoryHandler)\n...\n    func allCategoriesHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let categories = Category.query(on: req).all()\n        let context = AllCategoriesContext(categories: categories)\n        return try req.view().render(\"allCategories\", context)\n    }\n    func categoryHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return try req.parameters.next(Category.self)\n            .flatMap(to: View.self) { category in\n                let acronyms = try category.acronyms.query(on: req).all()\n                let context = CategoryConext(title: category.name, category: category, acronyms: acronyms)\n                return try req.view().render(\"category\", context)\n        }\n    }\n...\n</code></pre></p> <p>allCategories.leaf HTML<pre><code>#set(\"content\"){\n    &lt;h1&gt;All Categories&lt;/h1&gt;\n    #if(count(categories) &gt; 0) {\n    &lt;table class=\"table table-bordered table-hover\"&gt;\n        &lt;thead class=\"thead-light\"&gt;\n            &lt;tr&gt;\n                &lt;th&gt;\n                    Name\n                &lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;thead&gt;\n        &lt;tbody&gt;\n            #for(category in categories) {\n                &lt;tr&gt;\n                    &lt;td&gt;\n                        &lt;a href=\"/category/#(category.id)\"&gt;\n                            #(category.name)\n                        &lt;/a&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            }\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    } else {\n    &lt;h2&gt;There aren't any categories yet!&lt;/h2&gt;\n    }\n}\n\n#embed(\"base\")\n</code></pre></p> <p>category.leaf HTML<pre><code>#set(\"content\") {\n    &lt;h1&gt;#(category.name)&lt;/h1&gt;\n    #if(count(acronyms) &gt; 0) {\n        &lt;table class=\"table table-bordered table-hover\"&gt;\n            &lt;thead class=\"thead-light\"&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;\n                        Short\n                    &lt;/th&gt;\n                    &lt;th&gt;\n                        Long\n                    &lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                #for(acronym in acronyms) {\n                    &lt;tr&gt;\n                        &lt;td&gt;\n                            &lt;a href=\"/acronyms/#(acronym.id)\"&gt;\n                                #(acronym.short)\n                            &lt;/a&gt;\n                        &lt;/td&gt;\n                        &lt;td&gt;\n                            #(acronym.long)\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                }\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    } else {\n        &lt;h2&gt;There aren't any acronyms yet!&lt;/h2&gt;\n    }\n}\n#embed(\"base\")\n</code></pre></p> <p>base.leaf HTML<pre><code>...\n&lt;li class=\"nav-item #if(title==\"All Categories\"){active}\"&gt;\n    &lt;a href=\"/categories\" class=\"nav-link\"&gt;All Categories&lt;/a&gt;\n&lt;/li&gt;\n...\n</code></pre></p> <p></p>"},{"location":"client/web/all-user/","title":"\u6240\u6709\u7528\u6237\u9875\u9762","text":"<p>\u521b\u5efahtml\u9875\u9762\u6587\u4ef6\uff1a<code>Resources/Views/allUsers.leaf</code></p> <p>allUsers.leaf HTML<pre><code>#set(\"content\") {\n    &lt;h1&gt;All Users&lt;/h1&gt;\n    #if(count(users) &gt; 0) {\n    &lt;table class=\"table table-borderd table-hover\"&gt;\n        &lt;thead class=\"thead-light\"&gt;\n            &lt;tr&gt;\n                &lt;th&gt;\n                    Username\n                &lt;/th&gt;\n                &lt;th&gt;\n                    Name\n                &lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            #for(user in users) {\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &lt;a href=\"/users/#(user.id)\"&gt;#(user.username)&lt;/a&gt;\n                &lt;/td&gt;\n                &lt;td&gt;\n                    #(user.name)\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            }\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    } else {\n    &lt;h2&gt;There aren't any uses yet!&lt;/h2&gt;\n    }\n}\n\n#embed(\"base\")\n</code></pre></p> <p>\u5728\u63a7\u5236\u5668\u4e2d\u6dfb\u52a0\u9875\u9762\u8bbf\u95ee\u903b\u8f91</p> <p>WebsiteController.swift Swift<pre><code>...\nstruct AllUsersContext: Encodable {\n    let title: String\n    let users: [User]\n}\n...\n    router.get(\"users\", use: allUsersHandler)\n...\n    func allUsersHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return User.query(on: req).all()\n            .flatMap(to: View.self) { users in\n                let context = AllUsersContext(title: \"All Users\", users: users)\n                return try req.view().render(\"allUsers\", context)\n        }\n    }\n...\n</code></pre></p> <p>\u6700\u540e\u5728web\u9875\u9762\u6dfb\u52a0\u4e00\u4e2a\u67e5\u770b\u6240\u6709\u7528\u6237\u7684\u5165\u53e3\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9875\u9762\u90fd\u53ef\u4ee5\u8fdb\u5165\uff0c\u6240\u4ee5\u6211\u4eec\u5728 base.leaf\u6a21\u677f\u6587\u4ef6\u4e2d\u6dfb\u52a0\u8fd9\u4e2a\u5165\u53e3\uff0c\u52a0\u5728\u5bfc\u822a\u5217\u8868\u7684\u4f4d\u7f6e</p> <p>base.leaf HTML<pre><code>...\n&lt;li class=\"nav-item #if(title==\"All Users\"){active}\"&gt;\n    &lt;a href=\"/users\" class=\"nav-link\"&gt;All Users&lt;/a&gt;\n&lt;/li&gt;\n...\n</code></pre></p> <p></p>"},{"location":"client/web/beautiful-page/","title":"\u6a21\u677f\u5d4c\u5957","text":"<p>Leaf\u6a21\u677f\u53ef\u4ee5\u76f8\u4e92\u5d4c\u5957\uff0c\u8fbe\u5230html\u4ee3\u7801\u590d\u7528\u7684\u76ee\u7684\u3002</p> <p>\u9996\u5148\u628a<code>index.leaf</code>\u4e2d\u7684\u590d\u7528\u7684\u90e8\u5206\u62bd\u51fa\u5230<code>base.leaf</code>\uff0c\u4ee5\u4f9b\u5176\u5b83\u9875\u9762\u590d\u7528\u3002</p> <p>base.leaf HTML<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;#(title) | Acronyms&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        #get(content)\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>index.leaf HTML<pre><code>#set(\"content\") {\n    &lt;h1&gt;Acronyms&lt;/h1&gt;\n    #if(acronyms) {\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Short&lt;/th&gt;\n                &lt;th&gt;Long&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            #for(acronym in acronyms) {\n            &lt;tr&gt;\n                &lt;td&gt;&lt;a href=\"/acronyms/#(acronym.id)\"&gt;#(acronym.short)&lt;/a&gt;&lt;/td&gt;\n                &lt;td&gt;#(acronym.long)&lt;/td&gt;\n                }\n                &lt;/tbody&gt;\n    &lt;/table&gt;\n    } else {\n    &lt;h2&gt;There aren't any acronyms yet!&lt;/h2&gt;\n    }\n}\n\n#embed(\"base\")\n</code></pre></p> <p>\u4f7f\u7528\u4e86Leaf\u4e2d\u7684tag: #get()\u3001#set()\u3001#embed()\u3002\u5176\u4e2d\uff0c#set()\u9700\u8981\u7528\u5f15\u53f7\u4f7fLeaf\u6ce8\u518c\u53d8\u91cf\u3002base.leaf\u5c31\u662f\u4e00\u79cd\u6a21\u677f\u53ef\u4ee5\u88abindex.leaf\u590d\u7528\u3002</p>"},{"location":"client/web/beautiful-page/#bootstarp","title":"Bootstarp","text":"<p>Bootstrap\u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u524d\u7aef\u7f51\u7ad9\u6846\u67b6\uff0c\u7531Twitter\u5efa\u7acb\uff0c\u63d0\u4f9b\u5f88\u591a\u6613\u7528\u7684\u7ec4\u4ef6\u3002\u5b83\u540c\u65f6\u662f\u79fb\u52a8\u7aef\u4f18\u5148\u652f\u6301\u7684\uff0c\u53ef\u4ee5\u9002\u7528\u4e8e\u591a\u79cd\u5c3d\u5bf8\u7684\u5c4f\u5e55\u5927\u5c0f\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2acss\u6587\u4ef6\u5b9a\u4e49\u5404\u79cd\u663e\u793a\u6837\u5f0f\uff0c\u8fd8\u6709\u4e00\u4e9bjs\u6587\u4ef6\u63d0\u4f9b\u5404\u79cd\u7ec4\u4ef6\u3002\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e9b\u6587\u4ef6\u5305\u542b\u5728\u6240\u6709\u7684\u9875\u9762\u4e2d\u4f7f\u7528\uff0c\u4e3a\u4e86\u907f\u514d\u4ee3\u7801\u91cd\u590d\u7f16\u5199\uff0c\u628a\u5b83\u4eec\u52a0\u5728\u6a21\u677f\u6587\u4ef6<code>base.leaf</code>\u4e2d\u5728\u5176\u5b83\u9875\u9762\u4e2d\u590d\u7528\u5c31\u4e0d\u9700\u8981\u6bcf\u4e2a\u9875\u9762\u5305\u542b\u4e00\u6b21\u8fd9\u4e9b\u6587\u4ef6\u7684\u7e41\u7410\u64cd\u4f5c\u4e86\u3002</p> <p>\u5b98\u7f51\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528Bootstrap\u7684\u6a21\u677f\uff0c\u6211\u4eec\u7167\u7740\u6539\u9020\u4e00\u4e0b\u6211\u4eec\u81ea\u5df1\u7684\u6a21\u677f\u6587\u4ef6<code>base.leaf</code>\uff1a</p> <p></p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;!-- Required meta tags --&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n            &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n\n                &lt;!-- Bootstrap CSS --&gt;\n                &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt;\n\n                    &lt;title&gt;#(title) | Acronyms&lt;/title&gt;\n                    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;nav class=\"navbar navbar-expand-md navbar-dark bg-dark\"&gt;\n            &lt;a class=\"navbar-brand\" href = \"/\"&gt;TIL&lt;/a&gt;\n            &lt;button class=\"navbar-toggler\" type=\"button\"\n                data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n                aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\"\n                aria-label=\"Toggle navigation\"&gt;&gt;\n                &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n            &lt;/button&gt;\n            &lt;div class=\"collapse navbar-collapse\" id = \"navbarSupportedContent\"&gt;\n                &lt;ul class=\"navbar-nav mr-auto\"&gt;\n                    &lt;li class=\"nav-item #if(title == \"Homepage\"){active}\"&gt;\n                        &lt;a href=\"/\" class=\"nav-link\"&gt;Home&lt;/a&gt;\n                    &lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/nav&gt;\n        &lt;div class=\"container mt-3\"&gt;\n            #get(content)\n        &lt;/div&gt;\n\n        &lt;!-- Optional JavaScript --&gt;\n        &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;\n        &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>index.leaf HTML<pre><code>#set(\"content\") {\n    &lt;h1&gt;Acronyms&lt;/h1&gt;\n    #if(acronyms) {\n    &lt;table class = \"table table-bordered table-hover\"&gt;\n        &lt;thead class=\"thead-light\"&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Short&lt;/th&gt;\n                &lt;th&gt;Long&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            #for(acronym in acronyms) {\n            &lt;tr&gt;\n                &lt;td&gt;&lt;a href=\"/acronyms/#(acronym.id)\"&gt;#(acronym.short)&lt;/a&gt;&lt;/td&gt;\n                &lt;td&gt;#(acronym.long)&lt;/td&gt;\n                }\n                &lt;/tbody&gt;\n    &lt;/table&gt;\n    } else {\n    &lt;h2&gt;There aren't any acronyms yet!&lt;/h2&gt;\n    }\n}\n\n#embed(\"base\")\n</code></pre></p> <p></p>"},{"location":"client/web/cache/","title":"\u7f13\u5b58","text":"<p>Vapor\u5b9a\u4e49\u4e86<code>KeyedCache</code>\u534f\u8bae\uff0c\u7528\u6765\u63cf\u8ff0\u5404\u5404\u8def\u7f13\u5b58\u673a\u5236\u9700\u8981\u6ee1\u8db3\u7684\u529f\u80fd\uff0c\u672c\u8eab\u5b9a\u4e49\u5f88\u7b80\u5355</p> Swift<pre><code>public protocol KeyedCache {\n\n    func get&lt;D&gt;(_ key: String, as decodable: D.Type) -&gt; Future&lt;D?&gt; where D: Decodable\n\n    func set&lt;E&gt;(_ key: String, to encodable: E) -&gt; Future&lt;Void&gt; where E: Encodable\n\n    func remove(_ key: String) -&gt; Future&lt;Void&gt;\n}\n</code></pre>"},{"location":"client/web/cache/#\u5185\u5b58\u7f13\u5b58","title":"\u5185\u5b58\u7f13\u5b58","text":"<p>\u5b58\u653e\u6570\u636e\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u7531\u4e8e\u6ca1\u6709\u5916\u90e8\u4f9d\u8d56\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7f13\u5b58\u6570\u636e\u975e\u5e38\u9002\u5408\u7528\u6765\u5f00\u53d1\u548c\u6d4b\u8bd5\u9636\u6bb5\u4e2d\u4f7f\u7528\uff0c\u4e0d\u8db3\u4e4b\u5916\u662f\uff0c\u5982\u679c\u7a0b\u5e8f\u7ed3\u675f\uff0c\u5219\u8fd9\u4e9b\u5728\u5185\u5b58\u4e2d\u7684\u7f13\u5b58\u6570\u636e\u5c31\u4e22\u5931\u4e86\uff0c\u5e76\u4e14\u4e0d\u80fd\u5728\u591a\u4e2a\u5e94\u7528\u5b9e\u4f8b\u95f4\u5171\u7528\u3002</p> <p><code>MemoryKeyedCache</code>\u53ef\u4ee5\u5728\u5e94\u7528\u7684\u6240\u4ee5\u4e8b\u4ef6\u5faa\u73af\u4e2d\u516c\u7528\uff0c\u8fd9\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u6709\u6570\u636e\u88ab\u7f13\u5b58\uff0c\u90a3\u4e48\u6240\u6709\u7684\u4e8b\u4ef6\u5faa\u73af\u90fd\u80fd\u8bbf\u95ee\u8fd9\u4e2a\u6570\u636e\uff0c\u975e\u5e38\u6709\u4f8b\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\u9636\u6bb5\uff0c\u4f46\u8fd9\u6837\u7684\u7f13\u5b58\u673a\u5236\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u8981\u6c42\u540c\u6b65\u8bbf\u95ee\uff0c\u56e0\u6b64\u5728\u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u5f02\u6b65\u7684\u8bbf\u95ee\u8fd9\u4e9b\u5185\u5b58\u7f13\u5b58\u6570\u636e\u53ef\u80fd\u5b58\u5728\u95ee\u9898\u3002</p> <p><code>DictionaryKeyedCache</code>\u53ea\u5bf9\u4e8b\u4ef6\u5faa\u73af\u81ea\u5df1\u6709\u6548\uff0c\u4e0d\u540c\u7684\u4e8b\u4ef6\u5faa\u73af\u6709\u81ea\u5df1\u7684DictionaryCache, \u6240\u4ee5\u5728\u4e00\u6b21\u4f1a\u8bdd\u4e2d\u7684\u4e0d\u540c\u8bf7\u6c42\u95f4\u662f\u4e0d\u80fd\u516c\u7528\u8fd9\u6837\u4e00\u79cd\u7f13\u5b58\u7684\u3002\u5b83\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u7f13\u5b58\u3002</p>"},{"location":"client/web/cache/#\u6570\u636e\u5e93\u7f13\u5b58","title":"\u6570\u636e\u5e93\u7f13\u5b58","text":"<p>\u6240\u6709\u7684\u6570\u636e\u5e93\u90fd\u53ef\u4ee5\u7528\u6765\u4f5c\u7f13\u5b58\uff0c\u9002\u7528\u4e8e\u90a3\u79cd\u5e94\u7528\u91cd\u542f\u540e\u6216\u591a\u4e2a\u5e94\u7528\u5b9e\u4f8b\u4e4b\u95f4\u516c\u7528\u7f13\u5b58\u6570\u636e\u7684\u60c5\u51b5\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e3b\u6570\u636e\u5e93\u6765\u7f13\u5b58\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u5f00\u8f9f\u4e00\u4e2a\u4e13\u95e8\u7684\u6570\u636e\u5e93\u6765\u4f5c\u7f13\u5b58\uff0c\u5e38\u7528\u7684\u7528<code>Redis</code>\u6570\u636e\u5e93\u7f13\u5b58\u3002</p> <p><code>Redis</code>\u662f\u4e00\u79cd\u5f00\u6e90\u7f13\u5b58\u670d\u52a1\uff0c\u5b83\u80fd\u4f5c\u4e3aweb\u5e94\u7528\u7684\u7f13\u5b58\u6570\u636e\u5e93\uff0c\u5e76\u88ab\u591a\u6570\u4e91\u670d\u52a1\u5546\u652f\u6301\u3002\u5b83\u6613\u4e8e\u914d\u7f6e\u3001\u5feb\u901f\u3001\u7279\u6027\u4e30\u5bcc\u3002</p> <p>\u5f53\u6784\u5efa\u4e00\u4e2aweb\u5e94\u7528\u65f6\uff0c\u5411\u5176\u5b83API\u8bf7\u6c42\u6570\u636e\u65f6\u53ef\u80fd\u9020\u6210\u5ef6\u65f6\uff0c\u5982\u679c\u5411\u5176\u5b83API\u8bf7\u6c42\u6570\u636e\u8017\u65f6\u5f88\u591a\uff0c\u90a3\u4e48\u81ea\u5df1\u5199\u7684\u8fd9\u4e2aAPI\u7684\u54cd\u5e94\u4e5f\u4f1a\u53d8\u7684\u5f88\u6162\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5176\u5b83\u7684API\u53ef\u80fd\u4e5f\u4f5c\u4e86\u6d41\u91cf\u8bbf\u95ee\u9650\u5236\uff0c\u4e00\u6bb5\u65f6\u95f4\u5185\u4e0d\u80fd\u8d85\u8fc7\u6700\u5927\u8bbf\u95ee\u6b21\u6570\uff0c\u6709\u4e86\u7f13\u5b58\u7684\u653e\uff0c\u5c31\u53ef\u4ee5\u51cf\u5c11\u8bbf\u95ee\u8fd9\u4e9b\u5176\u5b83API\u7684\u6b21\u6570\uff0c\u8fd9\u4f1a\u8ba9\u4f60\u7684\u63a5\u53e3\u53d8\u7684\u54cd\u5e94\u66f4\u5feb\u901f\u4e00\u4e9b\u3002</p> <p>\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7f13\u5b58\u662f\u5f88\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u8fd9\u91cc\u6709\u51e0\u79cd\u65b9\u6cd5\u6765\u5b58\u50a8web\u5e94\u7528\u7684\u7f13\u5b58\u6570\u636e\uff1a\u5185\u5b58\u3001Fluent\u6570\u636e\u5e93\u3001Redis\u548c\u5176\u5b83\u3002\u4e0d\u540c\u7684\u7f13\u5b58\u65b9\u5f0f\u6709\u4e0d\u540c\u7684\u7f13\u5b58\u5931\u6548\u7b56\u7565\uff1aLRU(Least Recently Used)\u3001RR(Random Replacement)\u3001LIFO(Last In First Out)\u3002</p>"},{"location":"client/web/cookie%26session/","title":"Cookie\u548cSession","text":"<p>Cookie\u662f\u670d\u52a1\u5668\u5e94\u7528\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u5b58\u653e\u5728\u7528\u6237\u8ba1\u7b97\u673a\u4e0a\u7684\u5c0f\u5757\u4fe1\u606f\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6d4f\u89c8\u5668\u6765\u8bf4\uff0c\u5728\u8bf7\u6c42\u7f51\u9875\u65f6\u662f\u4e0d\u80fd\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u5934\u90e8\u4fe1\u606f\u7684\uff0c\u6240\u4ee5\u6d4f\u89c8\u5668\u5728\u8bbf\u95ee\u670d\u52a1\u7aef\u5e94\u7528\u65f6\u4f1a\u5728\u8bf7\u6c42\u4e2d\u5e26\u4e0a\u670d\u52a1\u7aef\u5e94\u7528\u53d1\u7ed9\u5b83\u7684cookie\u4fe1\u606f\u3002Session\u80fd\u591f\u5728\u591a\u6b21\u4e0d\u540c\u7684\u8bf7\u6c42\u4e2d\u4fdd\u5b58\u72b6\u6001\u4fe1\u606f\uff0c\u5728\u7528\u6237\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u670d\u52a1\u7aef\u4f1a\u7ed9\u7528\u6237\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u5e76\u4f7f\u7528\u552f\u4e00ID\u6765\u6807\u8bc6\u8fd9\u4e2a\u4f1a\u8bdd\uff0c\u53d1\u9001\u7ed9\u7528\u6237\u7684cookie\u4e2d\u4e5f\u5305\u542b\u8fd9\u4e2a\u6807\u8bc6\u4f1a\u8bdd\u7684\u552f\u4e00ID\uff0c\u5f53\u7528\u6237\u5411\u670d\u52a1\u7aef\u5e94\u7528\u53d1\u9001\u8bf7\u6c42\u65f6\u4f1a\u5e26\u4e0acookie\u4fe1\u606f\uff0c\u6240\u4ee5\u80fd\u8fc7\u552f\u4e00ID\u5c31\u53ef\u4ee5\u8bc6\u522b\u51fa\u4e0a\u54ea\u4e2a\u4f1a\u8bdd\u4e86\u3002</p> <p>Vapor\u4f7f\u7528\u4e2d\u95f4\u4ef6\u6765\u7ba1\u7406\u4f1a\u8bdd</p> <p>configure.swift Swift<pre><code>...\nmiddlewares.use(SessionsMiddleware.self)\n...\nconfig.prefer(MemoryKeyedCache.self, for: KeyedCache.self)\n</code></pre></p> <p>User.swift Swift<pre><code>...\nextension User: PasswordAuthenticatable {}\nextension User: SessionAuthenticatable {}\n</code></pre></p> <p>\u4f7f\u7528\u4f1a\u8bdd\u4e2d\u95f4\u4ef6\uff0c\u5e76\u914d\u7f6e\u4e86\u952e\u503c\u5b58\u50a8\u670d\u52a1\uff0c\u8ba9\u7528\u6237\u9075\u5faa\u5bc6\u7801\u9a8c\u8bc1\u548c\u4f1a\u8bdd\u9a8c\u8bc1\u534f\u8bae\u3002</p> <p>\u8981\u5b9e\u73b0\u7528\u6237\u767b\u5f55\u9700\u8981\u63d0\u4f9b\u4e24\u4e2aapi, \u4e00\u4e2a\u7528\u6765\u663e\u793a\u767b\u5f55\u9875\u9762\uff0c\u53e6\u4e00\u4e2a\u7528\u6765\u63a5\u6536\u7528\u6237\u767b\u5f55\u4fe1\u606f\u3002</p> <p>WebsiteController.swift</p> Swift<pre><code>struct LoginContext: Encodable {\n    let title = \"Log In\"\n    let loginError: Bool\n\n    init(loginError: Bool = false) {\n        self.loginError = loginError\n    }\n}\n\n...\n\n    func loginHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let context: LoginContext\n\n        if req.query[Bool.self, at: \"error\"] != nil {\n            context = LoginContext(loginError: true)\n        } else {\n            context = LoginContext()\n        }\n\n        return try req.view().render(\"login\", context)\n    }\n    ...\n</code></pre> <p>\u9875\u9762api\u548c\u9875\u9762\u53c2\u6570\u7ed3\u6784\u5b9a\u4e49\u597d\u4e86\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u9875\u9762\u6a21\u677f\u6587\u4ef6\u6765\u6e32\u67d3\u9875\u9762\u663e\u793a\u3002</p> Text Only<pre><code>#set(\"content\") {\n\n&lt;h1&gt;#(title)&lt;/h1&gt;\n\n#if(loginError) {\n    &lt;div class=\"alert alert-danger\" role=\"alert\"&gt;\n        User authentication error. Either your username or password\n        was invalid.\n    &lt;/div&gt;\n}\n&lt;form method=\"post\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n        &lt;input type=\"text\" name=\"username\" class=\"form-control\"\n        id=\"username\"/&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n        &lt;input type=\"password\" name=\"password\" class=\"form-control\"\n        id=\"password\"/&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Log In&lt;/button&gt;\n&lt;/form&gt;\n}\n#embed(\"base\")\n</code></pre> <p>WebsiteController.swift</p> Swift<pre><code>...\nimport Authentication\n...\nstruct LoginPostData: Content {\n    let username: String\n    let password: String\n}\n...\n    func boot(router: Router) throws {\n        ...\n        router.get(\"login\", use: loginHandler)\n        router.post(LoginPostData.self, at: \"login\", use: loginPostHandler)\n    }\n    func loginPostHandler(_ req: Request, userData: LoginPostData) throws -&gt; Future&lt;Response&gt; {\n        return User.authenticate(username: userData.username, password: userData.password, using: BCryptDigest(), on: req).map(to: Response.self) {\n            user in\n\n            guard let user = user else {\n                return req.redirect(to: \"/login?error\")\n            }\n\n            try req.authenticateSession(user)\n            return req.redirect(to: \"/\")\n        }\n    }\n</code></pre> <p></p> <p>\u767b\u5f55\u9875\u9762\u5efa\u597d\u540e\uff0c\u6211\u4eec\u5c31\u8981\u901a\u8fc7\u8ba4\u8bc1\u7528\u6237\u8eab\u4efd\u6765\u4fdd\u62a4API\uff0c\u4f7f\u7528\u4f1a\u8bdd\u8ba4\u8bc1\u4e2d\u95f4\u4ef6\u3002</p> <p>WebsiteController.swift</p> Swift<pre><code>    func boot(router: Router) throws {\n        let authSessionRoutes = router.grouped(User.authSessionsMiddleware())\n        authSessionRoutes.get(use: indexHandler)\n        authSessionRoutes.get(\"acronyms\", Acronym.parameter, use: acronymHandler)\n        authSessionRoutes.get(\"users\", User.parameter, use: userHandler)\n        authSessionRoutes.get(\"users\", use: allUsersHandler)\n        authSessionRoutes.get(\"categories\", use: allCategoriesHandler)\n        authSessionRoutes.get(\"categories\", Category.parameter, use: categoryHandler)\n        authSessionRoutes.get(\"login\", use: loginHandler)\n\n        let protectedGroup = authSessionRoutes.grouped(RedirectMiddleware&lt;User&gt;(path: \"/login\"))\n        protectedGroup.get(\"acronyms\", \"create\", use: createAcronymHandler)\n        protectedGroup.get(\"acronyms\", Acronym.parameter, \"edit\", use: editAcronymHandler)\n        protectedGroup.post(\"acronyms\", Acronym.parameter, \"edit\",  use: editAcronymPostHandler)\n        protectedGroup.post(\"acronyms\", Acronym.parameter, \"delete\", use: deleteAcronymHandler)\n        protectedGroup.post(CreateAcronymData.self, at: \"acronyms\", \"create\", use: createAcronymPostHandler)\n\n        router.post(LoginPostData.self, at: \"login\", use: loginPostHandler)\n    }\n</code></pre> <p></p> <p>\u6709\u4e86\u5bf9api\u8fdb\u884c\u7528\u6237\u8ba4\u8bc1\u7684\u4fdd\u62a4\u624b\u6bb5\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\u7f51\u7ad9\u3002\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4ece\u8ba4\u8bc1\u4fe1\u606f\u4e2d\u83b7\u53d6\u5230\u7528\u6237\u7684UserID\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u65b0\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff1a</p> <p>WebsiteController.swift</p> Swift<pre><code>struct CreateAcronymData: Content {\n    let short: String\n    let long: String\n    let categories: [String]?\n}\n...\n    func createAcronymPostHandler(_ req: Request, data: CreateAcronymData) throws -&gt; Future&lt;Response&gt; {\n\n        let user = try req.requireAuthenticated(User.self)\n        let acronym = try Acronym(short: data.short, long: data.long, userID: user.requireID())\n\n        ...\n    }\n\n    func editAcronymPostHandler(_ req: Request) throws -&gt; Future&lt;Response&gt; {\n    return try flatMap(to: Response.self,\n                        req.parameters.next(Acronym.self),\n                        req.content.decode(CreateAcronymData.self)\n    ) { acronym, data in\n        ...\n        let user = try req.requireAuthenticated(User.self)\n        acronym.userID = try user.requireID()\n        ...\n    }\n</code></pre> <p>\u73b0\u5728\u521b\u5efa\u548c\u7f16\u8f91\u7f29\u7565\u8bed\u7684\u4e24\u4e2aapi\u90fd\u53ef\u4ee5\u5728\u8ba4\u8bc1\u4fe1\u606f\u4e2d\u83b7\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u5c31\u4e0d\u9700\u8981\u5728\u9875\u9762\u4e2d\u8f93\u5165\u7528\u6237\u4e86\u3002</p> <p>createAcronym.leaf</p> HTML<pre><code>    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"userID\"&gt;User&lt;/label&gt;\n        &lt;select name=\"userID\" class=\"form-control\" id=\"userID\"&gt;\n            #for(user in users) {\n                &lt;option value=\"#(user.id)\" #if(editing){ #if(acronym.userID == user.id) { selected }}&gt;\n                    #(user.name)\n                &lt;/option&gt;\n            }\n        &lt;/select&gt;\n    &lt;/div&gt;\n</code></pre> <p>\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u5220\u9664\u4e86\u3002\u7136\u540e\u518d\u66f4\u65b0\u4e00\u4e0b\u5bf9\u5e94\u7684api\uff0c\u56e0\u4e3a\u521b\u5efa\u548c\u7f16\u8f91\u7f29\u7565\u8bcd\u4f7f\u7528\u540c\u4e00\u4efd\u6a21\u677f\uff0c\u6240\u6709\u6211\u4eec\u53ea\u9700\u8981\u6539\u4e00\u4e0b\u4f4d\u7f6e\u3002</p> <p>WebsiteController.swift</p> Swift<pre><code>struct CreateAcronymContext: Encodable {\n    let title = \"Create An Acronym\"\n}\nstruct EditAcronymContext: Encodable {\n    let title = \"Edit Acronym\"\n    let acronym: Acronym\n    let editing = true\n    let categories: Future&lt;[Category]&gt;\n}\n    ...\n    func createAcronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let context = CreateAcronymContext()\n        return try req.view().render(\"createAcronym\", context)\n    }\n    ...\n    func editAcronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return try req.parameters.next(Acronym.self)\n            .flatMap(to: View.self) { acronym in\n                let categories = try acronym.categories.query(on: req).all()\n                let context = EditAcronymContext(acronym: acronym,\n                                                    categories: categories)\n                return try req.view().render(\"createAcronym\", context)\n        }\n    }\n    ...\n</code></pre> <p></p>"},{"location":"client/web/cookie%26session/#\u9000\u51fa\u767b\u5f55","title":"\u9000\u51fa\u767b\u5f55","text":"<p>\u73b0\u5728\u53ef\u4ee5\u8ba4\u8bc1\u7528\u6237\u8eab\u4efd\u5e76\u6210\u529f\u767b\u5f55\uff0c\u8fd8\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u9000\u51fa\u767b\u5f55\u7684\u529f\u80fd\u3002</p> <p>WebsiteController.swift</p> Swift<pre><code>...\n    func boot(router: Router) throws {\n        ....\n        authSessionRoutes.post(\"logout\", use: logoutHandler)\n    ...\n    func logoutHandler(_ req: Request) throws -&gt; Response {\n        try req.unauthenticate(User.self)\n        return req.redirect(to: \"/\")\n    }\n</code></pre> <p>base.leaf</p> HTML<pre><code>        ...\n        &lt;/ul&gt;\n        #if(userLoggedIn) {\n            &lt;form class=\"form-inline\" action=\"/logout\" method=\"POST\"&gt;\n            &lt;input class=\"nav-link btn btn-link\" type=\"submit\"\n            value=\"Log out\"&gt;\n            &lt;/form&gt;\n        }\n    &lt;/div&gt;\n&lt;/nav&gt;\n...\n</code></pre> <p>WebsiteController.swift</p> Swift<pre><code>struct IndexContext: Encodable {\n    let title: String\n    let acronyms: [Acronym]?\n    let userLoggedIn: Bool\n}\n...\n    func indexHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return Acronym.query(on: req).all()\n            .flatMap(to: View.self) { acronyms in\n                let userLoggedIn = try req.isAuthenticated(User.self)\n                let acronymsData = acronyms.isEmpty ? nil : acronyms\n                let context = IndexContext(title: \"Homepage\", acronyms: acronymsData, userLoggedIn: userLoggedIn)\n                   return try req.view().render(\"index\", context)\n        }\n    }\n</code></pre>"},{"location":"client/web/cookie%26session/#cookie","title":"Cookie","text":"<p>Web\u4e0a\u7ecf\u5e38\u4f7f\u7528Cookie\u6280\u672f\uff0c\u7b2c\u4e00\u6b21\u767b\u5f55\u4e00\u4e2a\u7f51\u7ad9\u65f6\uff0c\u4e00\u822c\u90fd\u4f1a\u63d0\u793a\u4f60\u7f51\u7ad9\u8981\u8bbe\u7f6eCookie\uff0c\u9700\u8981\u7528\u6237\u786e\u8ba4\u3002\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528Cookie\u8fdb\u884c\u7528\u6237\u8ba4\u8bc1\uff0c\u4f46\u6709\u65f6\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u6216\u8bfb\u53d6cookie\u4fe1\u606f\u3002\u4e0b\u9762\u5c31\u6765\u5b9e\u73b0\u8ba9\u7528\u6237\u786e\u8ba4\u4f7f\u7528cookie\u7684\u529f\u80fd</p> <p>base.leaf HTML<pre><code>...\n        &lt;link rel=\"stylesheet\" href=\"/styles/style.css\"&gt;\n        &lt;title&gt;#(title) | Acronyms&lt;/title&gt;\n...\n        #if(showCookieMessage) {\n            &lt;footer id=\"cookie-footer\"&gt;\n                &lt;div id=\"cookieMessage\" class=\"container\"&gt;\n                    &lt;span class=\"muted\"&gt;\n                        This site uses cookies! To accept this, click\n                        &lt;a href=\"#\" onclick=\"cookiesConfirmed()\"&gt;OK&lt;/a&gt;\n                    &lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/footer&gt;\n            &lt;script src=\"/scripts/cookies.js\"&gt;&lt;/script&gt;\n        }\n        ...\n        &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n        ...\n    &lt;/body&gt;\n  ```\n\n\n*Public/styles/style.css*\n```css\n#cookie-footer {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 60px;\n    line-height: 60px;\n    background-color: #f5f5f5;\n}\n</code></pre></p> <p>Public/scripts/cookies.js JavaScript<pre><code>function cookiesConfirmed() {\n    $(\"#cookie-footer\").hide();\n    var d = new Date();\n    d.setTime(d.getTime() + (365*24*60*60*1000));\n    var expires = \"expires=\"+ d.toUTCString();\n    document.cookie = \"cookies-accepted=true;\" + expires;\n}\n</code></pre></p> <p>WebsiteController.swift Swift<pre><code>struct IndexContext: Encodable {\n    let title: String\n    let acronyms: [Acronym]?\n    let userLoggedIn: Bool\n    let showCookieMessage: Bool\n}\n...\n\n    func indexHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return Acronym.query(on: req).all()\n            .flatMap(to: View.self) { acronyms in\n                let userLoggedIn = try req.isAuthenticated(User.self)\n                let acronymsData = acronyms.isEmpty ? nil : acronyms\n                let showCookieMessage = req.http.cookies[\"cookies-accepted\"] == nil\n\n                let context = IndexContext(title: \"Homepage\",\n                                           acronyms: acronymsData,\n                                           userLoggedIn: userLoggedIn,\n                                           showCookieMessage: showCookieMessage)\n\n                return try req.view().render(\"index\", context)\n        }\n    }\n</code></pre></p> <p></p>"},{"location":"client/web/cookie%26session/#session","title":"Session","text":"<p>\u9664\u4e86\u4f7f\u7528cookie\u53ef\u4ee5\u8fdb\u884c\u7528\u6237\u8ba4\u8bc1\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4f1a\u8bdd\u8fdb\u884c\uff0c\u4f1a\u8bdd\u4e5f\u6709\u9002\u7528\u7684\u591a\u79cd\u573a\u666f\uff0c \u5176\u4e2d\u4e00\u79cd\u5c31\u662fCSRF\u4fdd\u62a4\uff0c\u5373\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3002\u653b\u51fb\u8005\u4f2a\u88c5\u4e00\u540d\u7528\u6237\u8fdb\u884c\u7834\u574f\u6027\u8bf7\u6c42\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u8868\u683c\u4e2d\u52a0\u5165CSRF token\u4fe1\u606f\u6765\u9632\u6b62\u8fd9\u79cd\u653b\u51fb\uff0c\u5f53web\u5e94\u7528\u63a5\u6536\u8bf7\u6c42\u65f6\uff0c\u901a\u8fd9\u9a8c\u8bc1CSRF token\u7684\u5426\u4e0e\u670d\u52a1\u7aef\u53d1\u9001\u51fa\u53bb\u7684token\u662f\u5426\u5339\u914d\u6765\u51b3\u5b9a\u662f\u5426\u5904\u7406\u8be5\u8bf7\u6c42\u3002</p> <p>WebsiteController.swift Swift<pre><code>struct CreateAcronymContext: Encodable {\n    let title = \"Create An Acronym\"\n    let csrfToken: String\n}\nstruct CreateAcronymData: Content {\n    let short: String\n    let long: String\n    let categories: [String]?\n    let csrfToken: String\n}\n...\n    func createAcronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let token = try CryptoRandom().generateData(count: 16).base64EncodedString()\n        let context = CreateAcronymContext(csrfToken: token)\n        try req.session()[\"CSRF_TOKEN\"] = token\n        return try req.view().render(\"createAcronym\", context)\n    }\n    ...\n    func createAcronymPostHandler(_ req: Request, data: CreateAcronymData) throws -&gt; Future&lt;Response&gt; {\n\n        let expectedToken = try req.session()[\"CSRF_TOKEN\"]\n        try req.session()[\"CSRF_TOKEN\"] = nil\n        guard expectedToken == data.csrfToken else {\n            throw Abort(.badRequest)\n        }\n\n        ...\n    }\n</code></pre></p> <p>createAcronym.leaf HTML<pre><code>...\n    &lt;form method = \"post\"&gt;\n        #if(csrfToken) {\n            &lt;input type=\"hidden\" name=\"csrfToken\" value=\"#(csrfToken)\"&gt;\n        }\n...\n</code></pre></p>"},{"location":"client/web/create-acronym/","title":"\u521b\u5efa\u7f29\u7565\u8bed","text":"<p>WebsiteController.swift Swift<pre><code>...\nstruct CreateAcronymContext: Encodable {\n    let title = \"Create An Acronym\"\n    let users: Future&lt;[User]&gt;\n}\n...\n    router.get(\"acronyms\", \"create\", use: createAcronymHandler)\n    router.post(Acronym.self, at: \"acronyms\", \"create\", use: createAcronymPostHandler)\n...\n    func createAcronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let context = CreateAcronymContext(users: User.query(on: req).all())\n        return try req.view().render(\"createAcronym\", context)\n    }\n\n    func createAcronymPostHandler(_ req: Request, acronym: Acronym) throws -&gt; Future&lt;Response&gt; {\n        return acronym.save(on: req).map(to: Response.self) { acronym in\n            guard let id = acronym.id else {\n                throw Abort(HTTPStatus.internalServerError)\n            }\n\n            return req.redirect(to: \"/acronyms/\\(id)\")\n        }\n    }\n...\n</code></pre></p> <p>createAcronym.leaf HTML<pre><code>#set(\"content\"){\n    &lt;h1&gt;#(title)&lt;/h1&gt;\n    &lt;form method = \"post\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for = \"short\"&gt;Acronym&lt;/label&gt;\n            &lt;input type=\"text\" name=\"short\" class=\"form-control\" id = \"short\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for = \"long\"&gt;Meaning&lt;/label&gt;\n            &lt;input type=\"text\" name=\"long\" class=\"form-control\" id=\"long\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"userID\"&gt;User&lt;/label&gt;\n            &lt;select name=\"userID\" class=\"form-control\" id=\"userID\"&gt;\n                #for(user in users) {\n                    &lt;option value=\"#(user.id)\"&gt;\n                        #(user.name)\n                    &lt;/option&gt;\n                }\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" class = \"btn btn-primary\"&gt;\n            Submit\n        &lt;/button&gt;\n    &lt;/form&gt;\n}\n\n#embed(\"base\")\n</code></pre></p> <p>base.leaf HTML<pre><code>...\n&lt;li class=\"nav-item #if(title==\"Create An Acronym\"){active}\"&gt;\n    &lt;a href=\"/acronyms/create\" class=\"nav-link\"&gt;Create An Acronym&lt;/a&gt;\n&lt;/li&gt;\n...\n</code></pre></p> <p></p>"},{"location":"client/web/delete-acronym/","title":"\u5220\u9664\u7f29\u7565\u8bed","text":"<p>\u56e0\u4e3a\u6d4f\u89c8\u5668\u7684\u5173\u7cfb\uff0c\u53ea\u80fd\u53d1\u9001POST\u3001GET\u8bf7\u6c42\uff0c\u800c\u4e0d\u80fd\u53d1\u9001DELET\u8bf7\u6c42\uff0c\u867d\u7136\u4f7f\u7528JS\u53ef\u4ee5\u505a\u5230\u53d1\u9001DELETE\u8bf7\u6c42 \uff0c\u4f46\u8fd9\u91cc\u4e0d\u8ba8\u8bba\u3002\u6211\u4eec\u8fd9\u91cc\u53d1\u9001POST\u8bf7\u6c42\u6765\u5b9e\u73b0\u5220\u9664\u529f\u80fd\u3002</p> <p>WebsiteController.swift Swift<pre><code>...\nrouter.post(\"acronyms\", Acronym.parameter, \"delete\", use: deleteAcronymHandler)\n...\nfunc deleteAcronymHandler(_ req: Request) throws -&gt; Future&lt;Response&gt; {\n    return try req.parameters.next(Acronym.self).delete(on: req)\n    .transform(to: req.redirect(to: \"/\"))\n}\n...\n</code></pre></p> <p>acronym.leaf HTML<pre><code>#set(\"content\"){\n    &lt;h1&gt;#(acronym.short)&lt;/h1&gt;\n    &lt;h2&gt;#(acronym.long)&lt;/h2&gt;\n    &lt;p&gt;Created by &lt;a href=\"/users/#(user.id)/\"&gt;#(user.name)&lt;/a&gt;&lt;/p&gt;\n    &lt;form method=\"post\" action=\"/acronyms/#(acronym.id)/delete\"&gt;\n        &lt;a class=\"btn btn-primary\" href=\"/acronyms/#(acronym.id)/edit\" role=\"button\"&gt;Edit&lt;/a&gt;&amp;nbsp;\n        &lt;input class=\"btn btn-danger\" type=\"submit\" value=\"Delete\" /&gt;\n    &lt;/form&gt;\n}\n\n#embed(\"base\")\n</code></pre></p> <p></p>"},{"location":"client/web/edit-acronym/","title":"\u7f16\u8f91\u7f29\u7565\u8bed","text":"<p>\u56e0\u4e3a\u6d4f\u89c8\u5668\u7684\u5173\u7cfb\uff0c\u53ea\u80fd\u53d1\u9001POST\u3001GET\u8bf7\u6c42\uff0c\u800c\u4e0d\u80fd\u53d1\u9001PUT\u66f4\u65b0\u8bf7\u6c42</p> <p>WebsiteController.swift Swift<pre><code>...\nstruct EditAcronymContext: Encodable {\n    let title = \"Edit Acronym\"\n    let acronym: Acronym\n    let users: Future&lt;[User]&gt;\n    let editing = true\n}\n...\n    router.get(\"acronyms\", Acronym.parameter, \"edit\", use: editAcronymHandler)\n    router.post(\"acronyms\", Acronym.parameter, \"edit\",  use: editAcronymPostHandler)\n...\n    func editAcronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return try req.parameters.next(Acronym.self)\n            .flatMap(to: View.self) { acronym in\n                let context = EditAcronymContext(acronym: acronym, users: User.query(on: req).all())\n                return try req.view().render(\"createAcronym\", context)\n        }\n    }\n\n\n    func editAcronymPostHandler(_ req: Request) throws -&gt; Future&lt;Response&gt; {\n        return try flatMap(to: Response.self,\n                           req.parameters.next(Acronym.self),\n                           req.content.decode(Acronym.self)\n        ) { acronym, data in\n            acronym.short = data.short\n            acronym.long = data.long\n            acronym.userID = data.userID\n\n            return acronym.save(on: req).map(to: Response.self) { savedAcronym in\n                guard let id = savedAcronym.id else {\n                    throw Abort(HTTPResponseStatus.internalServerError)\n                }\n                return req.redirect(to: \"/acronyms/\\(id)\")\n            }\n        }\n    }\n</code></pre></p> <p>createAcronym.leaf HTML<pre><code>#set(\"content\"){\n    &lt;h1&gt;#(title)&lt;/h1&gt;\n    &lt;form method = \"post\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for = \"short\"&gt;Acronym&lt;/label&gt;\n            &lt;input type=\"text\" name=\"short\" class=\"form-control\" id = \"short\" #if(editing) { value = \"#(acronym.short)\" }/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for = \"long\"&gt;Meaning&lt;/label&gt;\n            &lt;input type=\"text\" name=\"long\" class=\"form-control\" id=\"long\" #if(editing) { value = \"#(acronym.long)\"}/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"userID\"&gt;User&lt;/label&gt;\n            &lt;select name=\"userID\" class=\"form-control\" id=\"userID\"&gt;\n                #for(user in users) {\n                    &lt;option value=\"#(user.id)\" #if(editing){ #if(acronym.userID == user.id) { selected }}&gt;\n                        #(user.name)\n                    &lt;/option&gt;\n                }\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" class = \"btn btn-primary\"&gt;\n            #if(editing) { Update } else { Submit }\n        &lt;/button&gt;\n    &lt;/form&gt;\n}\n\n#embed(\"base\")\n</code></pre></p> <p>acronym.leaf HTML<pre><code>#set(\"content\"){\n    &lt;h1&gt;#(acronym.short)&lt;/h1&gt;\n    &lt;h2&gt;#(acronym.long)&lt;/h2&gt;\n    &lt;p&gt;Created by &lt;a href=\"/users/#(user.id)/\"&gt;#(user.name)&lt;/a&gt;&lt;/p&gt;\n    &lt;a class=\"btn btn-primary\" href=\"/acronyms/#(acronym.id)/edit\" role=\"button\"&gt;Edit&lt;/a&gt;\n}\n\n#embed(\"base\")\n</code></pre></p> <p></p> <p></p>"},{"location":"client/web/google-authentication/","title":"Google\u7528\u6237\u8ba4\u8bc1","text":"<p>\u6709\u65f6\u7528\u6237\u5e0c\u671b\u767b\u5f55\u4e00\u4e2a\u7f51\u7ad9\uff0c\u4f46\u4e0d\u60f3\u6bcf\u767b\u5f55\u4e00\u4e2a\u7f51\u7ad9\u5c31\u521b\u5efa\u4e00\u4e2a\u5e10\u53f7\uff0c\u53ef\u4ee5\u4f7f\u7528\u5df2\u7ecf\u521b\u5efa\u8fc7\u7684\u7b2c\u4e09\u65b9\u652f\u6301OAuth\u7684\u5e10\u53f7\u767b\u5f55\u3002\u4ee5Google\u5e10\u53f7\u4e3a\u4f8b\u3002</p>"},{"location":"client/web/google-authentication/#oauth-20","title":"OAuth 2.0","text":"<p><code>OAuth 2.0</code>\u662f\u4e00\u4e2a\u7528\u6237\u8eab\u4efd\u8ba4\u8bc1\u6846\u67b6\uff0c\u5141\u8bb8\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u7528\u6237\u4fe1\u606f\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7OAuth\u4f7f\u7528Google\u5e10\u53f7\u767b\u5f55\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u7f51\u7ad9\u3002\u6211\u4eec\u7528\u81ea\u5df1\u7684Google\u5e10\u53f7\u9996\u5148\u5411Goolge\u53d1\u51fa\u7528\u6237\u8eab\u4efd\u8ba4\u8bc1\u8bf7\u6c42\uff0c\u4f60\u53ef\u4ee5\u5141\u8bb8\u6211\u4eec\u7684\u5e94\u7528\u8bbf\u95ee\u4f60\u7684Google\u7528\u6237\u6570\u636e\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3001\u5934\u50cf\u3001\u6635\u79f0\u7b49\u3002\u5141\u8bb8\u540eGoogle\u4f1a\u53d1\u9001\u4f60\u7684\u5e94\u7528\u4e00\u4e2aToken\uff0c\u4f60\u7684\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2aToken\u6765\u8bbf\u95eeGoogle\u7684API\u3002</p> <p>\u5728\u8fdb\u884cOAuth 2.0\u8eab\u4efd\u8ba4\u8bc1\u4e4b\u524d\uff0c\u4f60\u5fc5\u987b\u8981\u6709\u4e00\u4e2aGoogle\u8d26\u53f7\u3002</p>"},{"location":"client/web/google-authentication/#imperial","title":"Imperial","text":"<p>\u6309\u7167OAuth\u7684\u6d41\u7a0b\u5199Google\u7684\u8ba4\u8bc1\u6d41\u7a0b\u662f\u6781\u5176\u7e41\u7410\u7684\u4e8b\uff0c\u5e78\u597d\u5df2\u7ecf\u6709\u4e09\u65b9\u5e93\u5b8c\u6210\u4e86\u8fd9\u4e9b\u7e41\u7410\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u5e93\u5c31\u662f<code>Imperial</code>\u3002</p> <p>package.swift</p> Swift<pre><code>...\n        .package(url: \"https://github.com/vapor/auth.git\", from: \"2.0.1\"),\n        .package(url: \"https://github.com/vapor-community/Imperial.git\", from: \"0.7.0\")\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\"FluentPostgreSQL\", \"Authentication\", \"Vapor\", \"Leaf\", \"Imperial\"]),\n...\n</code></pre> <p>ImperialController.swift</p> Swift<pre><code>import Vapor\nimport Authentication\nimport Imperial\n\nstruct ImperialController: RouteCollection {\n    func boot(router: Router) throws {\n\n    }\n}\n</code></pre> <p>routes.swift</p> Swift<pre><code>import Vapor\n\n/// Register your application's routes here.\npublic func routes(_ router: Router) throws {\n\n    ...\n\n    let imperialController = ImperialController()\n    try router.register(collection: imperialController)\n}\n</code></pre> <p>\u4e0a\u9762\u6211\u4eec\u914d\u7f6e\u4e86\u5de5\u7a0b\u4e2d\u652f\u6301OAuth\u8ba4\u8bc1\u7684\u90e8\u5206\uff0c\u4e4b\u540e\u6211\u4eec\u9700\u8981\u5728Google\u4e0a\u6ce8\u518c\u6211\u4eecweb\u5e94\u7528\u3002\u56e0\u4e3aGoogle\u5728\u4e2d\u56fd\u5c5e\u6027\u88ab\u5899\u72b6\u6001\uff0c\u6240\u4ee5\u5fc5\u987b\u8fde\u63a5VPN\u4ee3\u7406\u624d\u80fd\u6b63\u5e38\u8bbf\u95ee\u3002</p>"},{"location":"client/web/google-authentication/#\u5728google\u4e0a\u6ce8\u518c\u5e94\u7528","title":"\u5728Google\u4e0a\u6ce8\u518c\u5e94\u7528","text":"<p>\u6ce8\u518c\u5730\u5740</p> <p></p> <p></p> <p></p> <p>\u6ce8\u518c\u597d\u6211\u4eec\u7684\u5e94\u7528\u540e\u5c31\u53ef\u4ee5\u51c6\u5907\u4f7f\u7528OAuth\u4e86\u3002</p> <p>ImperialController Swift<pre><code>//\n//  ImperialController.swift\n//  App\n//\n//  Created by joker on 2018/12/16.\n//\n\nimport Vapor\nimport Authentication\nimport Imperial\n\nstruct GoogleUserInfo: Content {\n    let email: String\n    let name: String\n}\n\nextension Google {\n    static func getUser(on req: Request) throws -&gt; Future&lt;GoogleUserInfo&gt; {\n        var headers = HTTPHeaders()\n        headers.bearerAuthorization = try BearerAuthorization(token: req.accessToken())\n\n        let googleAPIURL = \"https://www.googleapis.com/oauth2/v1/userinfo?alt=json\"\n\n        return try req.client().get(googleAPIURL, headers: headers).map(to: GoogleUserInfo.self, { res in\n            guard res.http.status == .ok else {\n                if res.http.status == .unauthorized {\n                    throw Abort.redirect(to: \"/login-google\")\n                } else {\n                    throw Abort(.internalServerError)\n                }\n            }\n            return try res.content.syncDecode(GoogleUserInfo.self)\n        })\n    }\n}\n\nstruct ImperialController: RouteCollection {\n    func boot(router: Router) throws {\n\n        guard let callbackURL = Environment.get(\"GOOGLE_CALLBACK_URL\") else {\n            fatalError(\"Callback URL not set\")\n        }\n\n        try router.oAuth(\n            from: Google.self,\n            authenticate: \"login-google\",\n            callback: callbackURL,\n            scope: [\"profile\", \"email\"],\n            completion: processGoogleLogin)\n    }\n\n    func processGoogleLogin(_ req: Request, token: String) throws -&gt; Future&lt;ResponseEncodable&gt; {\n        return try Google.getUser(on: req).flatMap(to: ResponseEncodable.self, { userInfo in\n            return User.query(on: req).filter(\\.username == userInfo.email).first().flatMap(to: ResponseEncodable.self, { foundUser in\n                guard let existingUser = foundUser else {\n                    let user = User(name: userInfo.name, username: userInfo.email, password: \"\")\n                    return user.save(on: req).map(to: ResponseEncodable.self, { user in\n                        try req.authenticate(user)\n                        return req.redirect(to: \"/\")\n                    })\n                }\n\n                try req.authenticateSession(existingUser)\n                return req.future(req.redirect(to: \"/\"))\n\n            })\n        })\n    }\n}\n</code></pre></p> <p>login.leaf</p> HTML<pre><code>...\n&lt;/form&gt;\n&lt;a href=\"/login-google\"&gt;\n    &lt;img class=\"mt-3\" src=\"/images/sign-in-with-google.png\" alt=\"Sign In With Google\"&gt;\n&lt;/a&gt;\n}\n#embed(\"base\")\n</code></pre> <p></p> <p></p>"},{"location":"client/web/leaf/","title":"Leaf\u6a21\u677f\u5f15\u64ce","text":"<p><code>Leaf</code>\u662fVapor\u6846\u67b6\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u6a21\u677f\u8bed\u8a00\u3002\u6a21\u677f\u8bed\u8a00\u5141\u8bb8\u4f20\u9012\u4fe1\u606f\u7ed9\u9875\u9762\uff0c\u7136\u540e\u6839\u636e\u6240\u4f20\u9012\u7684\u9875\u9762\u4fe1\u606f\u6765\u52a8\u6001\u7684\u751f\u6210\u6700\u7ec8\u7684HTML\u3002\u6a21\u677f\u8bed\u8a00\u4e5f\u4e3a\u6211\u4eec\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8282\u7ea6\u4ee3\u7801\u63d0\u4f9b\u4e86\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u8bed\u8a00\u6765\u5199\u9875\u9762\u5c55\u793a\u4ee3\u7801\uff0c\u5176\u4e2d\u53ef\u4ee5\u52a0\u5165\u5404\u79cd\u53c2\u6570\u53d8\u91cf\uff0c\u4e0d\u540c\u9875\u9762\u95f4\u4e5f\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u5199\u597d\u7684\u4ee3\u7801\u5757\u3002\u4e2a\u6027\u9875\u9762\u663e\u793a\u65b9\u5f0f\u65f6\uff0c\u6709\u65f6\u53ea\u9700\u8981\u66f4\u6539\u4e00\u5904\u5730\u65b9\u5c31\u53ef\u4ee5\u6539\u53d8\u6240\u6709\u9875\u9762\u7684\u663e\u793a\u65b9\u5f0f\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u4e2a\u6a21\u677f\u4e2d\u5d4c\u5957\u53e6\u4e00\u4e2a\u6a21\u677f\u3002</p> <p>\u6211\u4eec\u5728\u4e4b\u524d\u5f00\u53d1\u7684\u540e\u7aefAPI\u9879\u76ee\u4e0a\u76f4\u63a5\u5f00\u53d1Web\u9875\u9762\u3002\u9700\u8981\u5728\u9879\u76ee\u7684<code>Package.swift</code>\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4f9d\u8d56:</p> <p>Package.swift Swift<pre><code>...\n.package(url: \"https://github.com/vapor/leaf.git\", from: \"3.0.1\")\n...\n.target(name: \"App\", dependencies: [\"FluentPostgreSQL\", \"Vapor\", \"Leaf\"]),\n</code></pre></p> <p>Leaf\u6a21\u677f\u5f15\u64ce\u9ed8\u8ba4\u4f7f\u7528\u76ee\u5f55<code>Resources/Views</code>, \u6240\u4ee5\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u540c\u540d\u76ee\u5f55\u6765\u5b58\u653e\u76f8\u5173\u4ee3\u7801\u6570\u636e\u548c\u6587\u4ef6\u3002 <code>mkdir -p Resources/Views</code></p> <p>\u65b0\u5efa\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u8fd4\u56deWeb\u9875\u9762\u7684router\u63a7\u5236\u5668<code>WebsiteController.swift</code></p> <p>WebsiteController.swift Swift<pre><code>import Vapor\nimport Leaf\n\nstruct WebsiteController: RouteCollection {\n\n    func boot(router: Router) throws {\n        router.get(use: indexHandler)\n    }\n\n    func indexHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return try req.view().render(\"index\")\n    }\n}\n</code></pre></p> <p>\u7136\u540e\u5728<code>routes.swift</code>\u4e2d\u6ce8\u518c\u63a7\u5236\u5668\uff0c\u4f7f\u7528\u751f\u6548:</p> Swift<pre><code>...\nlet websiteController = WebsiteController()\ntry router.register(collection: websiteController)\n...\n</code></pre> <p>\u8fd8\u8981\u628a<code>Leaf</code>\u4f5c\u4e3a\u4e00\u79cd\u670d\u52a1\u8fdb\u884c\u914d\u7f6e\uff1a configure.swift Swift<pre><code>try services.register(LeafProvider())\nconfig.prefer(LeafRenderer.self, for: ViewRenderer.self)\n</code></pre></p> <p></p>"},{"location":"client/web/leaf/#\u6ce8\u5165\u53c2\u6570","title":"\u6ce8\u5165\u53c2\u6570","text":"<p><code>Leaf</code>\u4e2d\u4f7f\u7528<code>#(arg)</code>\u7684\u65b9\u5f0f\u6ce8\u5165\u53c2\u6570\u5230\u9875\u9762\u6a21\u677f\u4e2d\u3002\u5728Vapor\u4e2d\u5f88\u591a\u90fd\u4f7f\u7528\u4e86<code>Codable</code>\u534f\u8bae\uff0cLeaf\u4e5f\u4e0d\u4f8b\u5916</p> <p>index.leaf HTML<pre><code>...\n&lt;title&gt;#(title) | Acronyms&lt;/title&gt;\n...\n</code></pre></p> <p>WebsiteController.swift Swift<pre><code>import Vapor\nimport Leaf\n\nstruct IndexContext: Encodable {\n    let title: String\n}\n\nstruct WebsiteController: RouteCollection {\n\n    func boot(router: Router) throws {\n        router.get(use: indexHandler)\n    }\n\n    func indexHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let context = IndexContext(title: \"Homepage\")\n        return try req.view().render(\"index\", context)\n    }\n}\n</code></pre></p> <p></p>"},{"location":"client/web/leaf/#\u5c55\u793a\u7f29\u7565\u8bed","title":"\u5c55\u793a\u7f29\u7565\u8bed","text":"<p>index.leaf HTML<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;#(title) | Acronyms&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Acronyms&lt;/h1&gt;\n        #if(acronyms) {\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Short&lt;/th&gt;\n                    &lt;th&gt;Long&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                #for(acronym in acronyms) {\n                &lt;tr&gt;\n                    &lt;td&gt;#(acronym.short)&lt;/td&gt;\n                    &lt;td&gt;#(acronym.long)&lt;/td&gt;\n                    }\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n        } else {\n            &lt;h2&gt;There aren't any acronyms yet!&lt;/h2&gt;\n        }\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>WebsiteController.wift Swift<pre><code>import Vapor\nimport Leaf\n\nstruct IndexContext: Encodable {\n    let title: String\n    let acronyms: [Acronym]?\n}\n\nstruct WebsiteController: RouteCollection {\n\n    func boot(router: Router) throws {\n        router.get(use: indexHandler)\n    }\n\n    func indexHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return Acronym.query(on: req).all()\n            .flatMap(to: View.self) { acronyms in\n                let acronymsData = acronyms.isEmpty ? nil : acronyms\n                let context = IndexContext(title: \"Homepage\", acronyms: acronymsData)\n                   return try req.view().render(\"index\", context)\n        }\n    }\n}\n</code></pre></p> <p></p>"},{"location":"client/web/leaf/#\u8df3\u8f6cacronyms\u8be6\u60c5","title":"\u8df3\u8f6cAcronyms\u8be6\u60c5","text":"<p>index.leaf HTML<pre><code>...\n&lt;td&gt;&lt;a href=\"/acronyms/#(acronym.id)\"&gt;#(acronym.short)&lt;/a&gt;&lt;/td&gt;\n...\n</code></pre></p> <p>acronyms.leaf HTML<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;#(title) | Acronyms&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;#(acronym.short)&lt;/h1&gt;\n        &lt;h2&gt;#(acronym.long)&lt;/h2&gt;\n        &lt;p&gt;Created by #(user.name)&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>WebsiteController.swift Swift<pre><code>...\nstruct AcronymContext: Encodable {\n    let title: String\n    let acronym: Acronym\n    let user: User\n}\n...\n        router.get(\"acronyms\", Acronym.parameter, use: acronymHandler)\n...\n    func acronymHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return try req.parameters.next(Acronym.self)\n            .flatMap(to: View.self) { acronym in\n                return acronym.user.get(on: req)\n                    .flatMap(to: View.self) { user in\n                        let context = AcronymContext(title: acronym.short, acronym: acronym, user: user)\n                        return try req.view().render(\"acronym\", context)\n                }\n        }\n    }\n</code></pre></p> <p></p> <p></p>"},{"location":"client/web/middleware/","title":"\u4e2d\u95f4\u4ef6","text":"<p>Vapor\u81ea\u5e26\u4e00\u4e9b\u4e2d\u95f4\u4ef6\uff0c\u4e2d\u95f4\u4ef6\u5c31\u5728\u5ba2\u6237\u7aef\u8bf7\u6c42\u548c\u670d\u52a1\u7aef\u54cd\u5e94\u4e2d\u95f4\uff0c\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e9b\u8bf8\u5982\uff1a \u8bf7\u6c42\u65e5\u5fd7\u8bb0\u5f55\u3001\u6355\u83b7\u9519\u8bef\u548c\u663e\u793a\u76f8\u5173\u4fe1\u606f\u3001\u9650\u5236\u8bbf\u95ee\u91cf\u7b49\u529f\u80fd</p> <p>\u5728Vapor\u4e2d\u4f7f\u7528\u6700\u9891\u7e41\u7684\u5c31\u662f<code>ErrorMiddleware</code>\u4e86\uff0c\u5b83\u80fd\u591f\u628a\u540c\u6b65\u548c\u5f02\u6b65\u7684\u8bf7\u6c42\u9519\u8bef\u8f6c\u6362\u6210HTTP\u54cd\u5e94\u3002\u610f\u5916\u7684\u9519\u8bef\u4f1a\u4f7f\u670d\u52a1\u5668\u7acb\u5373\u65ad\u5f00\u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u5e76\u6253\u5370\u51fa\u5185\u90e8\u9519\u8bef\u65e5\u5fd7\u3002\u4f7f\u7528\u4e86<code>ErrorMiddleware</code>\u53ef\u4ee5\u786e\u4fdd\u629b\u51fa\u7684\u6240\u6709\u9519\u8bef\u90fd\u88ab\u8f6c\u6362\u6210\u5408\u9002\u7684HTTP\u54cd\u5e94\u3002</p> <p>\u5728\u751f\u4ea7\u73af\u5883\u4e0b\uff0c<code>ErrorMiddleware</code>\u4f1a\u628a\u6240\u6709\u7684\u9519\u8bef\u90fd\u8f6c\u6362\u6210500\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\u7684HTTP\u54cd\u5e94\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5e8f\u4e0a\u4e5f\u4fdd\u8bc1\u4e86\u5e94\u7528\u7684\u5b89\u5168\uff0c\u56e0\u4e3a\u4e00\u4e9b\u9519\u8bef\u4fe1\u606f\u4e2d\u4f1a\u5305\u542b\u4e00\u4e9b\u654f\u611f\u4fe1\u606f\uff0c\u4f5c\u4e86\u8fd9\u5c42\u8f6c\u6362\u5c31\u53ef\u4ee5\u4fdd\u62a4\u8fd9\u4e9b\u654f\u611f\u4fe1\u606f\u88ab\u6cc4\u9732\u51fa\u53bb\u3002</p> <p><code>FileMiddleware</code>\u662f\u53e6\u5916\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u4f1a\u5bf9<code>Public</code>\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u8fdb\u884c\u6587\u4ef6\u670d\u52a1\uff0c\u8fd9\u5728\u5199\u524d\u7aef\u9875\u9762\u65f6\u53ef\u4ee5\u63d0\u4f9b\u5bf9js\u3001css\u3001html\u9875\u9762\u7684\u76f8\u5173\u9759\u6001\u6587\u4ef6\u670d\u52a1\u3002</p> <p><code>SessionMiddleware</code>\u4f1a\u8bdd\u4e2d\u95f4\u4ef6\u7528\u6765\u8ddf\u8e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u6574\u4e2a\u4f1a\u8bdd\u8fc7\u7a0b\u3002</p> <p>\u5bf9\u4e8e\u5927\u578bWeb\u5e94\u7528\uff0c\u4e2d\u95f4\u4ef6\u662f\u5f88\u91cd\u8981\u7684\u3002</p>"},{"location":"client/web/migration/","title":"\u6570\u636e\u5e93\u8fc1\u79fb\u53ca\u7248\u672c\u63a7\u5236","text":"<p>\u5efa\u7acb\u76ee\u5f55<code>Sources/App/Migrations</code>, \u7528\u6765\u5b58\u653e\u6240\u6709\u7684\u6570\u636e\u5e93\u8fc1\u79fb\u76f8\u5173\u7684\u6587\u4ef6</p>"},{"location":"client/web/migration/#\u7ed9\u7528\u6237\u6dfb\u52a0\u4e00\u4e2atwitter\u5e10\u53f7\u663e\u793a","title":"\u7ed9\u7528\u6237\u6dfb\u52a0\u4e00\u4e2atwitter\u5e10\u53f7\u663e\u793a","text":"<p>User.swift</p> Swift<pre><code>...\nfinal class User: Codable {\n    ...\n    var twitterURL: String?\n\n    init(name: String, username: String, password: String, twitterURL: String? = nil) {\n        ...\n        self.twitterURL = twitterURL\n    }\n\n    final class Public: Codable {\n        ...\n        var twitterURL: String?\n        init(id: UUID?, name: String, username: String, twitterURL: String? = nil) {\n            ...\n            self.twitterURL = twitterURL\n        }\n    }\n}\n\n...\n\nextension User {\n    func convertToPublic() -&gt; User.Public {\n        return User.Public(id: self.id, name: self.name, username: self.username, twitterURL: self.twitterURL)\n    }\n}\n\n...\n\nextension User: Migration {\n    static func prepare(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return Database.create(self, on: conn, closure: { (builder) in\n            builder.field(for: \\.id, isIdentifier: true)\n            builder.field(for: \\.name)\n            builder.field(for: \\.username)\n            builder.field(for: \\.password)\n            builder.unique(on: \\.username)\n        })\n    }\n}\n</code></pre> <p>18-12-26-AddTwitterToUser.swift</p> Swift<pre><code>import FluentPostgreSQL\nimport Vapor\n\nstruct AddTwitterURLToUser: Migration {\n\n    typealias Database = PostgreSQLDatabase\n\n    static func prepare(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return Database.update(User.self, on: conn) { builder in\n            builder.field(for: \\.twitterURL)\n        }\n    }\n\n    static func revert(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return Database.update(User.self, on: conn) { builder in\n            builder.deleteField(for: \\.twitterURL)\n        }\n    }\n}\n</code></pre> <p>configure.swift</p> Swift<pre><code>public func configure(_ config: inout Config, _ env: inout Environment, _ services: inout Services) throws {\n    ...\n    migrations.add(migration: AddTwitterURLToUser.self, database: .psql)\n    services.register(migrations)\n    ...\n}\n</code></pre> <p>\u4e0a\u9762\u5b8c\u6210\u4e86\u6570\u636e\u5e93\u8fc1\u79fb\u7684\u64cd\u4f5c\uff0c\u4e0b\u9762\u66f4\u65b0\u4e00\u4e2aWeb\u5e94\u7528\uff0c\u4ee5\u5c55\u793a</p> <p>register.leaf</p> HTML<pre><code>...\n    &lt;form method=\"post\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n            &lt;input type=\"text\" name=\"name\" class=\"form-control\"\n            id=\"name\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"twitterURL\"&gt;Twitter handle&lt;/lable&gt;\n            &lt;input type=\"text\" name=\"twitterURL\" class=\"form-control\" id=\"twitterURL\" /&gt;\n        &lt;/div&gt;\n...\n</code></pre> <p>user.leaf</p> HTML<pre><code>&lt;h1&gt;#(user.name)&lt;/h1&gt;\n&lt;h2&gt;#(user.username)\n    #if(user.twitterURL) {\n    - #(user.twitterURL)\n    }\n&lt;/h2&gt;\n...\n</code></pre> <p>WebsiteController.swift</p> Swift<pre><code>...\nstruct RegisterData: Content {\n    ...\n    let twitterURL: String?\n}\n...\n    func registerPostHandler(_ req: Request, data: RegisterData) throws -&gt; Future&lt;Response&gt; {\n        ...\n        var twitterURL: String?\n        if let twitter = data.twitterURL, !twitter.isEmpty {\n            twitterURL = twitter\n        }\n        let user = User(name: data.name, username: data.username, password: password, twitterURL: twitterURL)\n        ...\n    }\n...\n</code></pre> <p></p> <p></p>"},{"location":"client/web/migration/#\u8ba9\u7c7b\u522b\u5177\u6709\u552f\u4e00\u6027","title":"\u8ba9\u7c7b\u522b\u5177\u6709\u552f\u4e00\u6027","text":"<p>18-12-26-MakeCategoriesUnique.swift</p> Swift<pre><code>import FluentPostgreSQL\nimport Vapor\n\nstruct MakeCategoriesUnique: Migration {\n\n    typealias Database = PostgreSQLDatabase\n\n    static func prepare(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return Database.update(Category.self, on: conn) {\n            builder in\n            builder.unique(on: \\.name)\n        }\n    }\n\n    static func revert(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return Database.update(Category.self, on: conn) { builder in\n            builder.deleteUnique(from: \\.name)\n        }\n    }\n}\n</code></pre> <p>configure.swift</p> Swift<pre><code>public func configure(_ config: inout Config, _ env: inout Environment, _ services: inout Services) throws {\n    ...\n    migrations.add(migration: MakeCategoriesUnique.self, database: .psql)\n    services.register(migrations)\n    ...\n}\n</code></pre>"},{"location":"client/web/migration/#\u53ea\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\u4e0a\u521b\u5efa\u7ba1\u7406\u5458\u5e10\u53f7","title":"\u53ea\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\u4e0a\u521b\u5efa\u7ba1\u7406\u5458\u5e10\u53f7","text":"<p>configure.swift</p> Swift<pre><code>public func configure(_ config: inout Config, _ env: inout Environment, _ services: inout Services) throws {\n    ...\n    switch env {\n    case .development, .testing:\n        migrations.add(migration: AdminUser.self, database: .psql)\n    default:\n        break\n    }\n    migrations.add(migration: AddTwitterURLToUser.self, database: .psql)\n    migrations.add(migration: MakeCategoriesUnique.self, database: .psql)\n    services.register(migrations)\n    ...\n}\n</code></pre>"},{"location":"client/web/serve-file/","title":"\u6587\u4ef6\u670d\u52a1","text":"<p>\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u7f51\u7ad9\u90fd\u9700\u8981\u5b58\u653e\u4e00\u4e9b\u9759\u6001\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a \u56fe\u7247\u548c\u6837\u5f0f\u8868\u6587\u4ef6\uff0c\u901a\u5e38\u8fd9\u9700\u8981CDN\u6216\u4f7f\u7528Nginx/Apache\uff0c Vapor\u63d0\u4f9b\u4e86FileMiddleware\u6a21\u5757\u6765\u5b8c\u6210\u8fd9\u4e9b\u4e8b\u60c5\u3002</p> <p>\u8981\u4f7f\u7528\u6587\u4ef6\u670d\u52a1\u4e2d\u95f4\u4ef6\u9700\u8981\u6ce8\u518c, \u9ed8\u8ba4\u4f7f\u7528<code>Public</code>\u76ee\u5f55\u4f5c\u4e3a\u6587\u4ef6\u670d\u52a1\u7684\u6839\u76ee\u5f55\uff0c\u91cc\u9762\u7684\u6587\u4ef6\u53ef\u4ee5\u662f\u56fe\u7247\u3001\u6837\u5f0f\u8868\u7b49\uff1a</p> <p>configure.swift Swift<pre><code>...\n    var middlewares = MiddlewareConfig() // Create _empty_ middleware config\n    /// middlewares.use(FileMiddleware.self) // Serves files from `Public/` directory\n    middlewares.use(ErrorMiddleware.self) // Catches errors and converts to HTTP response\n    middlewares.use(FileMiddleware.self) //\n    services.register(middlewares)\n...\n</code></pre></p> <p>\u4e4b\u540e\u5728\u6587\u4ef6\u76ee\u5f55\u4e0b\u653e\u7f6e\u4e00\u5f20\u56fe\u7247\uff1a <code>Public/images/logo.png</code>\uff0c\u4fee\u6539<code>index.leaf</code>\u6587\u4ef6\uff1a HTML<pre><code>...\n&lt;img src=\"/images/logo.png\" class = \"mx-auto d-block\" alt=\"TIL Logo\" /&gt;\n&lt;h1&gt;Acronyms&lt;/h1&gt;\n...\n</code></pre></p> <p></p>"},{"location":"client/web/user-page/","title":"\u7528\u6237\u9875\u9762","text":"<p>\u6dfb\u52a0\u4e00\u4e2aleaf\u6587\u4ef6\uff0c\u7528\u6765\u663e\u793a\u7528\u6237\u60f3\u5173\u7684\u4fe1\u606f user.leaf</p> Swift<pre><code>#set(\"content\") {\n&lt;h1&gt;#(user.name)&lt;/h1&gt;\n&lt;h2&gt;#(user.username)&lt;/h2&gt;\n\n#if(count(acronyms) &gt; 0) {\n    &lt;table class = \"table table-bordered table-hover\"&gt;\n        &lt;thead class=\"thead-light\"&gt;\n            &lt;tr&gt;\n                &lt;th&gt;\n                    Short\n                &lt;/th&gt;\n                &lt;th&gt;\n                    Long\n                &lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            #for(acronym in acronyms) {\n                &lt;tr&gt;\n                    &lt;td&gt;\n                        &lt;a href=\"/acronyms/#(acronym.id)\"&gt;#(acronym.short)&lt;/a&gt;\n                    &lt;/td&gt;\n                    &lt;td&gt;#(acronym.long)&lt;/td&gt;\n                &lt;/tr&gt;\n            }\n        &lt;/tbody&gt;\n        } else {\n        &lt;h2&gt;There aren't any acronyms yet!&lt;/h2&gt;\n        }\n}\n\n#embed(\"base\")\n</code></pre> <p>\u7136\u540e\u5728\u63a7\u5236\u5668\u91cc\u6dfb\u52a0\u8bbf\u95ee\u5173\u7cfb\uff1a  WebsiteController.swift Swift<pre><code>...\nstruct UserContext: Encodable {\n    let title: String\n    let user: User\n    let acronyms: [Acronym]\n}\n...\n    router.get(\"users\", User.parameter, use: userHandler)\n...\n    func userHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        return try req.parameters.next(User.self).flatMap(to: View.self) { user in\n            return try user.acronyms.query(on: req).all()\n                .flatMap(to: View.self) { acronyms in\n                    let context = UserContext(title: user.name, user: user, acronyms: acronyms)\n                    return try req.view().render(\"user\", context)\n            }\n        }\n    }\n...\n</code></pre></p> <p>\u6700\u540e\u5728<code>acronym.leaf</code>\u6587\u4ef6\u4e2d\u6dfb\u52a0\u8df3\u8f6c\u5230\u7528\u6237\u9875\u9762\u7684\u8def\u5f84</p> <p>acronym.leaf HTML<pre><code>...\n&lt;p&gt;Created by &lt;a href=\"/users/#(user.id)/\"&gt;#(user.name)&lt;/a&gt;&lt;/p&gt;\n...\n</code></pre></p> <p></p>"},{"location":"client/web/validation/","title":"\u9a8c\u8bc1\u6570\u636e\u6709\u6548\u6027","text":"<p>\u524d\u9762\u6211\u4eec\u5efa\u7acb\u8d77\u4e00\u4e2a\u53ef\u4ee5\u521b\u5efa\u7f29\u7565\u8bed\u3001\u7c7b\u522b\u7684web\u5e94\u7528\uff0c\u5f53\u6211\u4eec\u4f7f\u7528\u8868\u5355\u586b\u5199\u6570\u636e\u65f6\uff0c\u8981\u4fdd\u8bc1\u586b\u5199\u6570\u636e\u7b26\u5408\u4e00\u5b9a\u7684\u89c4\u5219\uff0c\u5982\u679c\u4e0d\u7b26\u5408\u89c4\u5219\uff0c\u5c31\u663e\u793a\u5f55\u5165\u9519\u8bef\u63d0\u793a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u4f5c\u6570\u636e\u6709\u6548\u6027\u9a8c\u8bc1\u3002</p> <p>\u9996\u5148\u6211\u4eec\u6765\u521b\u5efa\u7528\u6237\u6ce8\u518c\u754c\u9762\u3002</p> <p>register.leaf HTML<pre><code>#set(\"content\") {\n    &lt;h1&gt;#(title)&lt;/h1&gt;\n    &lt;form method=\"post\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n            &lt;input type=\"text\" name=\"name\" class=\"form-control\"\n            id=\"name\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n            &lt;input type=\"text\" name=\"username\" class=\"form-control\"\n            id=\"username\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n            &lt;input type=\"password\" name=\"password\" class=\"form-control\"\n            id=\"password\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"confirmPassword\"&gt;Confirm Password&lt;/label&gt;\n            &lt;input type=\"password\" name=\"confirmPassword\"\n            class=\"form-control\" id=\"confirmPassword\"/&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;\n            Register\n        &lt;/button&gt;\n    &lt;/form&gt;\n}\n#embed(\"base\")\n</code></pre></p> <p>WebsiteController.swift</p> Swift<pre><code>struct RegisterContext: Encodable {\n    let title = \"Register\"\n}\n\nstruct RegisterData: Content {\n    let name: String\n    let username: String\n    let password: String\n    let confirmPassword: String\n}\nfunc boot(router: Router) throws {\n        ...\n        authSessionRoutes.get(\"register\", use: registerHandler)\n        authSessionRoutes.post(RegisterData.self, at: \"register\", use: registerPostHandler)\n        ...\n    }\n\n    ...\n    func registerHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let context = RegisterContext()\n        return try req.view().render(\"register\", context)\n    }\n    func registerPostHandler(_ req: Request, data: RegisterData) throws -&gt; Future&lt;Response&gt; {\n        let password = try BCrypt.hash(data.password)\n        let user = User(name: data.name, username: data.username, password: password)\n\n        return user.save(on: req).map(to: Response.self) { user in\n            try req.authenticateSession(user)\n            return req.redirect(to: \"/\")\n        }\n    }    \n    ...\n</code></pre> <p>base.leaf HTML<pre><code>...\n        #if(!userLoggedIn) {\n            &lt;li class=\"nav-item #if(title == \"Register\"){active}\"&gt;\n                &lt;a href=\"/register\" class=\"nav-link\"&gt;Register&lt;/a&gt;\n            &lt;/li&gt;\n        }\n    &lt;/ul&gt;\n...\n</code></pre></p> <p></p>"},{"location":"client/web/validation/#\u6ce8\u518c\u7528\u6237\u65f6\u7684\u6570\u636e\u7528\u6548\u6027\u9a8c\u8bc1","title":"\u6ce8\u518c\u7528\u6237\u65f6\u7684\u6570\u636e\u7528\u6548\u6027\u9a8c\u8bc1","text":""},{"location":"client/web/validation/#\u57fa\u672c\u6570\u636e\u6709\u6548\u6027\u9a8c\u8bc1","title":"\u57fa\u672c\u6570\u636e\u6709\u6548\u6027\u9a8c\u8bc1","text":"<p>WebsiteController.swift Swift<pre><code>extension RegisterData: Validatable, Reflectable {\n    static func validations() throws -&gt; Validations&lt;RegisterData&gt; {\n        var validations = Validations(RegisterData.self)\n        try validations.add(\\.name, .ascii)\n        try validations.add(\\.username, .alphanumeric &amp;&amp; .count(3...))\n        try validations.add(\\.password, .count(8...))\n        return validations\n    }\n}\n...\n    func registerPostHandler(_ req: Request, data: RegisterData) throws -&gt; Future&lt;Response&gt; {\n        do {\n            try data.validate()\n        } catch {\n            return req.future(req.redirect(to: \"register\"))\n        }\n        ...\n    }\n</code></pre></p>"},{"location":"client/web/validation/#\u81ea\u5b9a\u4e49\u6570\u636e\u6709\u6548\u6027\u9a8c\u8bc1","title":"\u81ea\u5b9a\u4e49\u6570\u636e\u6709\u6548\u6027\u9a8c\u8bc1","text":"<p>\u524d\u9762\u6dfb\u52a0\u7684\u6570\u636e\u6709\u6548\u6027\u9a8c\u8bc1\u90fd\u662f\u9488\u5bf9\u5355\u4e2a\u5b57\u6bb5\u7684\uff0c\u4f46\u662f\u4e24\u6b21\u8f93\u5165\u5bc6\u7801\u7684\u4e00\u81f4\u6027\u9a8c\u8bc1vapor\u5e76\u6ca1\u6709\u63d0\u4f9b\u5185\u5efa\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u6709\u6548\u6027\u9a8c\u8bc1</p> <p>WebsiteController.swift Swift<pre><code>extension RegisterData: Validatable, Reflectable {\n    static func validations() throws -&gt; Validations&lt;RegisterData&gt; {\n        ...\n        validations.add(\"passwords match\", { (model) in\n            guard model.password == model.confirmPassword else {\n                throw BasicValidationError(\"passwords don't match\")\n            }\n        })\n        return validations\n    }\n}\n</code></pre></p>"},{"location":"client/web/validation/#\u6ce8\u518c\u9875\u9762\u663e\u793a\u9519\u8bef\u4fe1\u606f","title":"\u6ce8\u518c\u9875\u9762\u663e\u793a\u9519\u8bef\u4fe1\u606f","text":"<p>\u524d\u9762\u5b8c\u6210\u4e86\u6570\u636e\u6709\u6027\u6548\u9a8c\u8bc1\uff0c\u4f46\u53d1\u751f\u9519\u8bef\u65f6\u6ca1\u6709\u9014\u5f84\u901a\u77e5\u7528\u6237\u4fee\u6b63\u81ea\u5df1\u7684\u884c\u4e3a\uff0c\u6240\u4ee5\u9700\u8981\u5728\u51fa\u9519\u65f6\u663e\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u4ee5\u63d0\u793a\u7528\u6237</p> <p>register.leaf HTML<pre><code>#set(\"content\") {\n    &lt;h1&gt;#(title)&lt;/h1&gt;\n    #if(message) {\n        &lt;div class=\"alert alert-danger\" role=\"alert\"&gt;\n            Please fix the following errors:&lt;br /&gt;\n            #(message)\n        &lt;/div&gt;\n    }\n    ...\n</code></pre></p> <p>WebsiteController.swift Swift<pre><code>struct RegisterContext: Encodable {\n    let title = \"Register\"\n    let message: String?\n\n    init(message: String? = nil) {\n        self.message = message\n    }\n}\n...\n    func registerHandler(_ req: Request) throws -&gt; Future&lt;View&gt; {\n        let context: RegisterContext\n        if let message = req.query[String.self, at: \"message\"] {\n            context = RegisterContext(message: message)\n        } else {\n            context = RegisterContext()\n        }\n        ...\n    }\n\n func registerPostHandler(_ req: Request, data: RegisterData) throws -&gt; Future&lt;Response&gt; {\n        do {\n            try data.validate()\n        } catch(let error) {\n            let redirect: String\n            if let error = error as? ValidationError,\n                let message = error.reason.addingPercentEncoding(\n                    withAllowedCharacters: .urlQueryAllowed) {\n                redirect = \"/register?message=\\(message)\"\n            } else {\n                redirect = \"/register?message=Unknown+error\"\n            }\n            return req.future(req.redirect(to: redirect))\n        }\n        ...\n        }\n    }\n</code></pre></p> <p></p>"},{"location":"server/CRUD/","title":"\u6570\u636e\u5e93CRUD\u64cd\u4f5c","text":"<p>RESTful APIs\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u5728\u5e94\u7528\u4e2d\u8c03\u7528CRUD\u51fd\u6570\u7684\u65b9\u5f0f\u3002\u901a\u5e38\u6211\u4eec\u6709\u4e00\u4e2aURL\u5bf9\u5e94\u6570\u636e\u6a21\u578b\uff0c\u5728\u8fd9\u4e2aURL\u57fa\u7840\u4e0a\u914d\u5408HTTP\u4e0d\u540c\u7684\u8bf7\u6c42Method\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\u76f8\u5e94\u7684CRUD\u64cd\u4f5c\uff0c\u4f8b\u5982</p> <ul> <li>POST https://localhost:8080/api/acronyms    \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7f29\u7565\u8bed</li> <li>GET  https://localhost:8080/api/acronyms    \u83b7\u53d6\u6240\u6709\u7684\u7f29\u7565\u8bed\u6570\u636e</li> <li>GET  https://localhost:8080/api/acronyms/&lt;ID&gt;  \u83b7\u53d6\u6307\u5b9aID\u7684\u7f29\u7565\u8bed</li> <li>PUT  https://localhost:8080/api/acronyms/&lt;ID&gt;  \u66f4\u65b0\u6307\u5b9aID\u7684\u7f29\u7565\u8bed</li> <li>DELETE https://localhost:8080/api/acronyms/&lt;ID&gt; \u5220\u9664\u6307\u5b9aID\u7684\u7f29\u7565\u8bed  </li> </ul>"},{"location":"server/CRUD/#create","title":"Create","text":"<p>POST https://localhost:8080/api/acronyms    \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7f29\u7565\u8bed</p> Swift<pre><code>router.post(\"api\", \"acronyms\") { (req) -&gt; Future&lt;Acronym&gt; in\n    return try req.content.decode(Acronym.self)\n        .flatMap(to: Acronym.self) { (acronym) in\n            return acronym.save(on: req)\n    }\n}\n</code></pre>"},{"location":"server/CRUD/#retrieve","title":"Retrieve","text":"<p>GET  https://localhost:8080/api/acronyms    \u83b7\u53d6\u6240\u6709\u7684\u7f29\u7565\u8bed\u6570\u636e</p> <p>Swift<pre><code>router.get(\"api\", \"acronyms\") { (req) -&gt; Future&lt;[Acronym]&gt; in\n    return Acronym.query(on: req).all()\n}\n</code></pre> GET  https://localhost:8080/api/acronyms/&lt;ID&gt;  \u83b7\u53d6\u6307\u5b9aID\u7684\u7f29\u7565\u8bed</p> <p>\u9700\u8981\u6570\u636e\u6a21\u5f0f\u9075\u5faaParameter\u534f\u8bae</p> <p>Acronym.swift Text Only<pre><code>// \u4f7f\u53ef\u4ee5\u4f5c\u4e3a\u8bf7\u6c42\u53c2\u6570\nextension Acronym: Parameter {}\n</code></pre></p> Swift<pre><code>router.get(\"api\", \"acronyms\", Acronym.parameter) { (req) -&gt; Future&lt;Acronym&gt; in\n    return try req.parameters.next(Acronym.self)\n}\n</code></pre>"},{"location":"server/CRUD/#update","title":"Update","text":"<p>PUT  https://localhost:8080/api/acronyms/&lt;ID&gt;  \u66f4\u65b0\u6307\u5b9aID\u7684\u7f29\u7565\u8bed</p> Swift<pre><code>router.put(\"api\",\"acronyms\",Acronym.parameter) { (req) -&gt; Future&lt;Acronym&gt; in\n    return try flatMap(to: Acronym.self, req.parameters.next(Acronym.self), req.content.decode(Acronym.self)) { (acronym, updateAcronym) -&gt; Future&lt;Acronym&gt; in\n        acronym.short = updateAcronym.short\n        acronym.long = updateAcronym.long\n\n        return acronym.save(on: req)\n    }\n}\n</code></pre>"},{"location":"server/CRUD/#delete","title":"Delete","text":"<p>DELETE https://localhost:8080/api/acronyms/&lt;ID&gt; \u5220\u9664\u6307\u5b9aID\u7684\u7f29\u7565\u8bed</p> Swift<pre><code>router.delete(\"api\",\"acronyms\", Acronym.parameter) { (req) -&gt; Future&lt;HTTPStatus&gt;in\n    return try req.parameters.next(Acronym.self)\n    .delete(on: req)\n    .transform(to: HTTPStatus.noContent)\n}\n</code></pre>"},{"location":"server/Fluent-Persisting-models/","title":"\u6570\u636e\u5e93","text":"<p><code>Fluent</code>\u662fVapor\u4e2d\u548c\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u5de5\u5177\uff0c\u5373\u662fORM(Object Relational Mapping)\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u3002\u662f\u5728Vapor\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4e00\u4e2a\u62bd\u8c61\u5c42\u3002\u5b83\u7684\u5b58\u5728\u8ba9\u6211\u4eec\u64cd\u4f5c\u6570\u636e\u5e93\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u6211\u4eec\u4e0d\u9700\u8981\u76f4\u63a5\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>Models\u662fSwfit\u4e2d\u8868\u793a\u6570\u636e\u7684\u672f\u8bed\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6982\u5ff5\u5728Fluent\u4e2d\u4e5f\u662f\u4e00\u81f4\u7684\u3002Models\u5c31\u662f\u8981\u5b58\u5165\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61\u3002</p> <p>\u6240\u6709\u7684Fluent\u6570\u636e\u6a21\u578b\u90fd\u8981\u9075\u5b88Codable\u534f\u8bae\uff0c\u628a\u7c7b\u52a0\u4e0afinal\u53ef\u4ee5\u83b7\u5f97\u6027\u80fd\u63d0\u5347\uff0cid\u4f1a\u5728\u5b58\u5165\u6570\u636e\u5e93\u65f6\u586b\u5145\u3002Vapor\u63d0\u4f9b\u4e86\u534f\u8bae<code>Content</code>\uff0c\u5b83\u662f\u5bf9<code>Codable</code>\u7684\u5c01\u88c5\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5728\u591a\u79cd\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002</p> <p>\u81ea\u5b9a\u4e49Model\u5728\u6570\u636e\u5e93\u4e2dID\u540d\u79f0\u548c\u7c7b\u578b\u9700\u8981\u6570\u636e\u6a21\u578b\u9075\u5faaModel\u534f\u8bae\u3002\u4e00\u822cFluent\u9488\u5bf9\u6bcf\u79cd\u6570\u636e\u5e93\u5df2\u7ecf\u5b9a\u4e49\u4e86\u5404\u79cd\u53ef\u4ee5\u9075\u5faa\u7684Model\u534f\u8bae\uff0c\u5982SQLiteModel\u548cSQLiteUUIDModel\u4ee5\u53caSQLiteStringModel</p> <p>\u8981\u60f3\u628a\u6570\u636e\u5b58\u5165\u6570\u636e\u5e93\uff0c\u5fc5\u987b\u5728\u6570\u636e\u5e93\u4e2d\u5efa\u7acb\u76f8\u5e94\u7684\u8868\uff0c\u8fd9\u79cd\u5efa\u8868\u64cd\u4f5c\uff0cFluent\u901a\u8fc7migration\u6765\u8fdb\u884c\u3002Migration\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff0c\u4e0d\u4f1a\u521b\u5efa\u5df2\u7ecf\u5b58\u5728\u7684\u8868\u3002</p> <p>\u6211\u4eec\u4e4b\u540e\u8981\u521b\u5efa\u4e00\u4e2a\u7f29\u7565\u8bed\u76f8\u5173\u7684\u5e94\u7528\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5148\u628a\u6570\u636e\u6a21\u578b\u5efa\u7acb\u8d77\u6765\uff1a</p> Text Only<pre><code>$ touch Sources/App/Models/Acronym.swift\n</code></pre> <p>Acronym.swift</p> Swift<pre><code>import Vapor\nimport FluentSQLite\n\nfinal class Acronym: Codable { \n    var id: Int\uff1f\n    var short: String \n    var long: String\n\n    init(short: String, long: String) {\n        self.short = short\n        self.long = long\n    }\n}\n\nextension Acronym: Model {\n    typealias Database = SQLiteDatabase\n\n    typealias ID = Int\n\n    public static var idKey: IDKey = \\Acronym.id\n}\n\nextension Acronym: SQLiteModel {}\nextension Acronym: Migration {}\nextension Acronym: Content {}\n</code></pre> <p>\u9996\u5148\u5b9a\u4e49\u9075\u5faa<code>Codabel</code>\u534f\u8bae\u7684\u6570\u636e\u7c7b\u578b<code>Acronym</code>\uff0c\u5b83\u6709\u4e24\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5c5e\u6027\uff0c\u53e6\u4e00\u4e2a\u5c5e\u6027<code>id</code>\u662f\u7559\u7ed9\u6570\u636e\u5e93\u4f7f\u7528\u7684\uff0c\u6570\u636e\u5e93\u5728\u5b58\u50a8\u6570\u636e\u65f6\uff0c\u4f1a\u8d4b\u503c\u7ed9\u6bcf\u4e00\u4e2a\u6570\u636e\u5b9e\u4f8b\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53c8\u8ba9\u6570\u636e\u6a21\u578b\u9075\u5faa<code>Model</code>\u534f\u8bae\uff0c\u5176\u76ee\u7684\u662f\u4e3a\u4e86\u544a\u8bc9<code>Fluent</code>\u6211\u4eec\u8981\u4f7f\u7528\u54ea\u79cd\u6570\u636e\u5e93\u6765\u5b58\u50a8\u6570\u636e\u3001\u6570\u636e\u5b9e\u4f8b\u552f\u4e00\u6807\u8bc6\u7b26\u7684\u7c7b\u578b\u4ee5\u53ca\u5728\u6570\u636e\u6a21\u578b\u4e2d\u54ea\u4e00\u4e2a\u5c5e\u6027\u7528\u6765\u8868\u793a\u8fd9\u4e2a\u6570\u636e\u5b9e\u4f8b\u7684\u552f\u4e00\u6807\u8bc6\u3002\u6bcf\u4e00\u79cd\u6570\u636e\u5e93\u5176\u5b9e\u5df2\u7ecf\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u534f\u8bae\u7c7b\u578b\uff0c\u4ee5\u7b80\u5316\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u90e8\u5206\u76f4\u63a5\u66ff\u6362\u6210:</p> Swift<pre><code>extension Acronym: SQLiteModel {}\n</code></pre> <p>\u8981\u628a\u6570\u636e\u5b58\u5165\u6570\u636e\u5e93\uff0c\u90a3\u4e48\u5fc5\u987b\u8ba9\u6570\u636e\u5e93\u5bf9\u5e94\u7684\u5efa\u7acb\u4e00\u5f20\u5b58\u653e\u8fd9\u7c7b\u6570\u636e\u7684\u6570\u636e\u8868\uff0c\u8fd9\u4e2a\u5efa\u8868\u7684\u4efb\u52a1\u6211\u4eec\u53ef\u4ee5\u8ba9<code>Migration</code>\u6765\u5904\u7406\u3002\u4f46\u8fd9\u8981\u6c42\u6211\u4eec\u7684\u6570\u636e\u6a21\u578b\u9075\u5faa\u534f\u8bae<code>Migration</code>\u3002\u5bf9\u4e8e\u7b80\u5355\u7684\u6570\u636e\u6a21\u578b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u9075\u5faa\u8fd9\u4e2a\u534f\u8bae\u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u7684\u65f6\u65f6\u5019\u53ef\u80fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a<code>Mirgration</code>\u3002 \u8981\u8ba9\u5e94\u7528\u5728\u542f\u52a8\u65f6\u521b\u5efa\u6570\u636e\u8868\uff0c\u6211\u4eec\u9700\u8981\u5728<code>configure.swift</code>\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\uff1a</p> <p>Swift<pre><code>migrations.add(model: Acronym.self, database: .sqlite)\n</code></pre> \u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\u8868\u53ea\u4f1a\u521b\u5efa\u4e00\u6b21\uff0c\u5982\u679c\u4e4b\u540e\u6570\u636e\u6a21\u578b\u5185\u90e8\u53d1\u751f\u4e86\u8c03\u6574\u4e5f\u4e0d\u4f1a\u518d\u91cd\u65b0\u521b\u5efa\u65b0\u8868\u4e86\u3002</p>"},{"location":"server/accept-data/","title":"\u63a5\u6536POST\u6570\u636e","text":"<p>Content\u534f\u8bae\u662fVapor\u5bf9Codable\u534f\u8bae\u7684\u5c01\u88c5\uff0c\u7528\u6765\u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u6570\u636e\u3002</p> <p>\u6dfb\u52a0\u9075\u5b88Content\u534f\u8bae\u7684\u7ed3\u6784\u4f53InfoData, \u5b83\u53ea\u6709\u4e00\u4e2aname\u5b57\u7b26\u4e32\u6210\u5458\uff0cContent\u534f\u8bae\u652f\u6301\u8bf7\u6c42\u6570\u636e\u5411\u7ed3\u6784\u4f53\u5bf9\u8c61\u7684\u89e3\u7801\u8f6c\u6362\u3002\u5728routes\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e0b\u9762\u4ee3\u7801\uff0c\u7f16\u8bd1\u8fd0\u884c</p> <p>POST \u8bf7\u6c42</p> Swift<pre><code>import Vapor\n\nfunc routes(_ app: Application) throws {\n    app.get { req in\n        return \"It works!\"\n    }\n\n    app.get(\"hello\") { req -&gt; String in\n        return \"Hello, world!\"\n    }\n\n    // Add Routes\n    app.get(\"hello\", \":name\") { req -&gt; String in\n        guard let name = req.parameters.get(\"name\", as: String.self) else {\n            return \"\\(HTTPStatus.notFound)\"\n        }\n        return \"Hello, \\(name)\"\n    }\n    // ---\n    app.post(\"info\") { req -&gt; String in\n        let info = try req.content.decode(InfoData.self)\n        return \"Hello, \\(info.name)\"\n    }\n}\nstruct InfoData: Content {\n    let name: String\n}\n</code></pre> CURLRested(Deprecated) <p>\u6211\u4eec\u4f7f\u7528<code>curl</code>\u8fd9\u4e2a\u5de5\u5177\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u8def\u7531\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff0c\u8fd9\u4e2a\u5de5\u5177\u662f\u7c7bLinux\u7cfb\u7edf\u90fd\u81ea\u5e26\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4e0d\u5b58\u5728\u6536\u8d39\u95ee\u9898\uff0c\u53ef\u4ee5\u514d\u8d39\u4f7f\u7528\uff0c\u800c\u4e14\u5b66\u4e60\u540e\u7aef\u662f\u5fc5\u987b\u638c\u63e1\u8fd9\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\u7684\u4f7f\u7528\u65b9\u6cd5\u7684\uff1a</p> <p>Tip</p> <p>-X \u8868\u793a\u8bf7\u6c42\u7c7b\u578b: <code>GET</code>/<code>POST</code>/<code>PUT</code>/<code>DELETE</code>\uff0c\u9ed8\u8ba4\u4e3a<code>GET</code></p> <p>-H \u8bf7\u6c42\u53d1\u8d77\u65f6\u7684Headers\u8bbe\u7f6e</p> <p>-d \u8bf7\u6c42\u53d1\u8d77\u65f6\u6240\u643a\u5e26\u7684\u6570\u636e</p> curl\u6d4b\u8bd5\u547d\u4ee4<pre><code>curl http://localhost:8080/info \\\n-X POST \\\n-H \"content-type:application/json\" \\\n-d '{\"name\":\"joker\"}' \n</code></pre> Output<pre><code>Hello, joker\n</code></pre> <p>Warning</p> <p>\u4e4b\u524d\u4f7f\u7528\u4e00\u4e2aMac\u4e0a\u540d\u53eb<code>rested</code>\u7684\u5e94\u7528\uff0c\u6a21\u62df<code>POST</code>\u8bf7\u6c42(\u73b0\u5728\u8fd9\u4e2aApp\u5f00\u59cb\u6536\u8d39\uff0c\u4e0d\u80fd\u514d\u8d39\u4f7f\u7528\u4e86\uff0c\u5e76\u4e14\u5728\u4e2d\u56fd\u533a\u65e0\u6cd5\u4e0b\u8f7d)</p> <p></p>"},{"location":"server/add-routes/","title":"\u6dfb\u52a0GET\u8def\u7531","text":"<p>\u5982\u679c\u4f60\u5728Linux\u4e0a\u5f00\u53d1\uff0c\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u559c\u6b22\u7684\u7f16\u8f91\u5668\u6765\u4fee\u6539\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528\u547d\u4ee4\u884c<code>swift build</code>\u548c<code>vapor run</code>/<code>swift run</code>\u6765\u7f16\u8bd1\u8fd0\u884c\u3002</p> <p>\u5982\u679c\u4f60\u5728Mac\u4e0a\u5f00\u53d1\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528Xcode\u8fd9\u4e2aIDE\u6765\u8fdb\u884c\u5f00\u53d1\u3002\u4f7f\u7528<code>vapor xcode</code>\u547d\u4ee4\u5728Xcode\u4e2d\u6253\u5f00\u5de5\u7a0b\u3002</p> <p>\u4ec0\u4e48\u662f\u8def\u7531(route)</p> <p>\u5f53\u6d4f\u89c8\u5668\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u63a5\u5230\u6765\u81ea\u6d4f\u89c8\u5668\u7684\u8bf7\u6c42\u540e\u4f1a\u8f6c\u53d1\u7ed9\u76f8\u5e94\u7aef\u53e3\u4e0a\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u5230\u8bf7\u6c42\u540e\u9700\u8981\u77e5\u9053\u8c03\u7528\u54ea\u6bb5\u4ee3\u7801\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\uff0c\u6211\u4eec\u628a\u5ba2\u6237\u8bf7\u6c42(\u901a\u5e38\u662f\u4e00\u4e2aURL)\u548c\u5e94\u7528\u7a0b\u5e8f\u9488\u5bf9\u5b83\u8fdb\u884c\u5904\u7406\u7684\u4ee3\u7801\u903b\u8f91(\u901a\u5e38\u662f\u4e00\u4e2a\u51fd\u6570)\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u53eb\u4f5c<code>route</code>\u3002</p> <p><code>routes.swift</code>\u6587\u4ef6\u4e2d\u6240\u4f5c\u7684\u4e8b\uff0c\u5c31\u662f\u5efa\u7acb\u8fd9\u79cd\u5bf9\u5e94\u5173\u7cfb\u3002</p> <p>\u4e0b\u9762\u6dfb\u52a0\u4e00\u4e2aGET\u7c7b\u578b\u7684\u8def\u7531\uff0c\u5728\u6587\u4ef6routes.swift\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff0c\u5e76\u4f7f\u7528<code>vapor run</code>\u6216\u8005\u76f4\u63a5\u5728Xcode\u4e2d\u8fd0\u884c\u9879\u76ee\uff1a</p> Swift<pre><code>import Vapor\nfunc routes(_ app: Application) throws {\n    app.get { req in\n        return \"It works!\"\n    }\n\n    app.get(\"hello\") { req -&gt; String in\n        return \"Hello, world!\"\n    }\n\n    app.get(\"hello\", \":name\") { req -&gt; String in\n        guard let name = req.parameters.get(\"name\", as: String.self) else {\n            return \"\\(HTTPStatus.notFound)\"\n        }\n        return \"Hello, \\(name)\"\n    }\n}\n</code></pre> <p>\u4f7f\u7528chrome\u8bbf\u95ee\u6211\u4eec\u6dfb\u52a0\u7684\u8def\u7531\u5982\u4e0b\u56fe\uff0c\u53ef\u89c1\u6b63\u5e38\u5de5\u4f5c\uff0c\u65b0\u589e\u7684\u8def\u7531\u53ef\u4ee5\u63a5\u6536\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53c2\u6570\uff0c<code>:name</code>\u662f\u4e00\u4e2a\u547d\u540d\u5360\u4f4d\u7b26\uff1a</p> <p></p>"},{"location":"server/api-template/","title":"Vapor\u6a21\u677f\u5de5\u7a0b\u6587\u4ef6\u7ed3\u6784","text":"<p>\u76ee\u5f55\u603b\u4f53\u7ed3\u6784</p> Bash<pre><code>$ tree -L 1 .\n.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Package.resolved\n\u251c\u2500\u2500 Package.swift\n\u251c\u2500\u2500 Public\n\u251c\u2500\u2500 Sources\n\u251c\u2500\u2500 Tests\n\u2514\u2500\u2500 docker-compose.yml\n\n3 directories, 4 files\n</code></pre> <ul> <li><code>Package.resolved</code>\u89e3\u6790Package.swift\u65f6\u81ea\u52a8\u751f\u6210\u7684\uff0c\u5f00\u53d1\u8005\u4e0d\u9700\u8981\u4fee\u6539</li> <li><code>Package.swift</code>\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u9879\u76ee\u7684\u4f9d\u8d56\u548c\u751f\u6210\u4ea7\u7269\u4fe1\u606f</li> <li><code>Public</code>\u7528\u6765\u5b58\u653e\u516c\u5171\u8d44\u6e90\u6587\u4ef6\uff0c\u5305\u62ec\uff1a\u56fe\u7247\u3001CSS\u6837\u5f0f\u8868\u3001js\u6587\u4ef6\u4ee5\u53caLeaf\u6a21\u677f\u6587\u4ef6</li> <li><code>Sources</code>\u7528\u6765\u5b58\u653e\u6574\u4e2a\u5de5\u7a0b\u7684\u4e3b\u4f53\u6e90\u4ee3\u7801\u6587\u4ef6</li> <li><code>Tests</code>\u7528\u6765\u5b58\u653e\u9488\u5bf9\u5de5\u7a0b\u529f\u80fd\u6240\u5199\u7684\u6d4b\u8bd5\u7528\u4f8b\u7684\u4ee3\u7801\u6587\u4ef6</li> <li><code>Dockerfile</code>\u548c<code>docker-compose.yml</code>\u90e8\u7f72\u5230docker\u5bb9\u5668\u4e2d\u6267\u884c\u7684\u914d\u7f6e\u6587\u4ef6</li> </ul> <p>Sources\u5b50\u76ee\u5f55</p> Bash<pre><code>$ tree Sources/\nSources\n\u251c\u2500\u2500 App\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Controllers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 configure.swift\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routes.swift\n\u2514\u2500\u2500 Run\n    \u2514\u2500\u2500 main.swift\n\n3 directories, 3 files\n</code></pre> <p>Source\u76ee\u5f55\u4e0b\u7684\u6bcf\u4e00\u4e2a\u5b50\u76ee\u5f55\u90fd\u662f\u9879\u76ee\u7684\u4e00\u4e2a\u6a21\u5757\u3002<code>App</code>\u662f\u4e00\u4e2a\u529f\u80fd\u6a21\u5757\uff0c<code>Run</code>\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6a21\u5757\uff0c<code>Run</code>\u6a21\u5757\u7f16\u8bd1\u540e\u53ef\u88ab\u64cd\u4f5c\u7cfb\u7edf\u8c03\u8d77\u8fd0\u884c\uff0c<code>App</code>\u6a21\u5757\u4e0d\u53ef\u5355\u72ec\u8fd0\u884c\uff0c\u5b83\u88ab<code>Run</code>\u6a21\u5757\u4f9d\u8d56\u3002</p> <p>\u6574\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u5165\u53e3\u662f<code>main.swift</code>\u6587\u4ef6\u3002<code>Package.swift</code>\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u6574\u4f53\u5de5\u7a0b\u662f\u5982\u4f55\u6784\u6210\u7684\uff1a</p> <p>Package.swift \u9879\u76ee\u63cf\u8ff0\u6587\u4ef6</p> Swift<pre><code>// swift-tools-version:5.6\nimport PackageDescription\n\nlet package = Package(\n    name: \"HelloVapor\",\n    platforms: [\n    .macOS(.v12)\n    ],\n    dependencies: [\n        // \ud83d\udca7 A server-side Swift web framework.\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.0.0\"),\n    ],\n    targets: [\n        .target(\n            name: \"App\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ],\n            swiftSettings: [\n                // Enable better optimizations when building in Release configuration. Despite the use of\n                // the `.unsafeFlags` construct required by SwiftPM, this flag is recommended for Release\n                // builds. See &lt;https://github.com/swift-server/guides/blob/main/docs/building.md#building-for-production&gt; for details.\n                .unsafeFlags([\"-cross-module-optimization\"], .when(configuration: .release))\n            ]\n        ),\n        .executableTarget(name: \"Run\", dependencies: [.target(name: \"App\")]),\n        .testTarget(name: \"AppTests\", dependencies: [\n            .target(name: \"App\"),\n            .product(name: \"XCTVapor\", package: \"vapor\"),\n        ])\n    ]\n)\n</code></pre> <p>\u4ece<code>Package.swift</code>\u63cf\u8ff0\u6587\u4ef6\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u4e2aTarget\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6a21\u5757\uff0c<code>App</code>\u6a21\u5757\u4f9d\u8d56\u4e86\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7684\u5305: <code>vapor</code>\u4e2d\u7684<code>Vapor</code>\u6a21\u5757\uff0c\u8fd9\u4e2a\u88ab\u4f9d\u8d56\u7684\u5305\u7684\u4fe1\u606f\u5728\u4e0a\u9762\u7684<code>dependencies</code>\u6570\u7ec4\u4e2d\u6307\u5b9a\uff0c<code>SPM</code>\u4f1a\u89e3\u6790\u5b83\uff0c\u5e76\u62c9\u53d6\u76f8\u5173\u7684\u6587\u4ef6\u5230\u672c\u5730\u53c2\u4e0e\u5de5\u7a0b\u7f16\u8bd1\u3002</p> <p><code>Run</code>\u53ef\u6267\u884c\u6a21\u5757\u4f9d\u8d56\u4e86<code>App</code>\u529f\u80fd\u6a21\u5757\uff0c<code>App</code>\u529f\u80fd\u6a21\u5757\u53c8\u4f9d\u8d56\u4e86\u5176\u5b83\u7b2c\u4e09\u65b9\u63d0\u4f9b\u7684\u529f\u80fd\u6a21\u5757</p> <p><code>AppTests</code>\u6a21\u5757\u4f9d\u8d56\u4e86<code>App</code>\u6a21\u5757\uff0c\u56e0\u4e3a\u5b83\u662f\u9488\u5bf9<code>App</code>\u4e13\u95e8\u5199\u7684\u6d4b\u8bd5\u6a21\u5757\uff0c\u901a\u8fc7\u8fd0\u884c\u4e00\u4e2a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6765\u6d4b\u8bd5<code>App</code>\u6a21\u5757\u7684\u5404\u4e2a\u529f\u80fd\u662f\u5426\u6b63\u5e38\u3002</p> <p>Tests \u5b50\u76ee\u5f55</p> Bash<pre><code>$ tree Tests\nTests\n\u2514\u2500\u2500 AppTests\n    \u2514\u2500\u2500 AppTests.swift\n\n1 directory, 1 file\n</code></pre> <p>\u5728<code>AppTests.swift</code>\u4e2d\u53ef\u4ee5\u7f16\u5199\u6d4b\u8bd5<code>App</code>\u6a21\u5757\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002</p>"},{"location":"server/api-template/#\u793a\u4f8b\u5de5\u7a0b\u7684\u4ee3\u7801\u903b\u8f91","title":"\u793a\u4f8b\u5de5\u7a0b\u7684\u4ee3\u7801\u903b\u8f91","text":"main.swift Swift<pre><code>import App\nimport Vapor\n\nvar env = try Environment.detect()\ntry LoggingSystem.bootstrap(from: &amp;env)\nlet app = Application(env)\ndefer { app.shutdown() }\ntry configure(app)\ntry app.run()\n</code></pre> <p>\u4ee5<code>main.swift</code>\u4e3a\u7a0b\u5e8f\u8fd0\u884c\u7684\u5165\u53e3\uff0c\u83b7\u53d6\u5230\u547d\u4ee4\u884c\u53c2\u6570\u4ee5\u53ca\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u7528\u8fd9\u4e9b\u4fe1\u606f\u53bb\u521b\u5efaapp\uff0c\u5728app\u8fd0\u884c\u4e4b\u524d\uff0c\u4f7f\u7528<code>configure.swift</code>\u6587\u4ef6\u4e2d\u7684\u51fd\u6570configure\u5bf9app\u5b9e\u4f8b\u8fdb\u884c\u914d\u7f6e</p> configure.swift Swift<pre><code>import Vapor\n\n// configures your application\npublic func configure(_ app: Application) throws {\n    // uncomment to serve files from /Public folder\n    // app.middleware.use(FileMiddleware(publicDirectory: app.directory.publicDirectory))\n\n    // register routes\n    try routes(app)\n}\n</code></pre> <p>app\u5b9e\u4f8b\u914d\u7f6e\u8fc7\u7a0b\u4e2d\u8c03\u7528<code>routes.swift</code>\u4e2d\u7684\u65b9\u6cd5\uff0c\u5bf9app\u8def\u7531\u8fdb\u884c\u914d\u7f6e\u3002</p> routes.swift Swift<pre><code>import Vapor\n\nfunc routes(_ app: Application) throws {\n    app.get { req async in\n        \"It works!\"\n    }\n\n    app.get(\"hello\") { req async -&gt; String in\n        \"Hello, world!\"\n    }\n}\n</code></pre> <p>routes\u51fd\u6570\u4e2d\u4e3aapp\u5b9e\u4f8b\u914d\u7f6e\u4e86\u4e24\u4e2aGET\u7c7b\u578b\u7684\u8def\u7531: <code>/</code> \u548c <code>/hello</code>\uff0c\u5728<code>HelloVapor</code>\u5de5\u7a0b\u6839\u76ee\u5f55\u4e0b\u4f7f\u7528<code>vapor run</code>\u6216\u8005<code>swift run</code>\u547d\u4ee4\u7f16\u8bd1\u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u5373\u53ef\u4ee5\u6d4f\u89c8\u5668\u4e2d\u6d4b\u8bd5\u5bf9\u5e94\u7684\u8def\u7531\u662f\u5426\u6b63\u5e38\u5de5\u4f5c</p>"},{"location":"server/api-template/#\u6d4b\u8bd5\u5b50\u6a21\u5757","title":"\u6d4b\u8bd5\u5b50\u6a21\u5757","text":"AppTests.swift Swift<pre><code>@testable import App\nimport XCTVapor\n\nfinal class AppTests: XCTestCase {\n    func testHelloWorld() throws {\n        let app = Application(.testing)\n        defer { app.shutdown() }\n        try configure(app)\n\n        try app.test(.GET, \"hello\", afterResponse: { res in\n            XCTAssertEqual(res.status, .ok)\n            XCTAssertEqual(res.body.string, \"Hello, world!\")\n        })\n    }\n}\n</code></pre> <p><code>AppTests.swift</code>\u9488\u5bf9App\u6a21\u5757\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f7f\u7528\u4e86<code>XCTest</code>\u6846\u67b6\uff0c\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u65b9\u6cd5\u7684\u540d\u79f0\u90fd\u4ee5<code>test</code>\u5f00\u5934\u3002\u5728\u5de5\u7a0b\u6839\u76ee\u5f55\u4e0b\u4f7f\u7528<code>swift test</code>\u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u3002</p> <p>\u5728Mac\u4e0a\u4f7f\u7528Xcode\u8fdb\u884cVapor\u9879\u76ee\u7684\u5f00\u53d1</p> <p>\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c<code>vapor xcode</code>\uff0c\u4f7f\u7528Xcode\u6253\u5f00\u540e\uff0c\u8fd0\u884c\u7a0b\u5e8f\u6216\u8005\u6267\u884c\u6d4b\u8bd5\u3002</p> <ul> <li>Cmd+R \u8fd0\u884c\u7a0b\u5e8f</li> <li>Cmd+U \u6267\u884c\u6d4b\u8bd5</li> </ul> <p></p>"},{"location":"server/async/","title":"\u5f02\u6b65","text":"<p>\u5047\u8bbe\u4e00\u4e2a\u670d\u52a1\u5668\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u5ba2\u6237\u8bf7\u6c42\uff0c\u56db\u4e2a\u5ba2\u6237\u7aef\u8bf7\u6c42\u987a\u5e8f\u53d1\u8d77\uff1a</p> <ul> <li> <p>\u7b2c\u4e00\u4e2a\u5ba2\u6237\u8bf7\u6c42\u5411\u670d\u52a1\u5668\u83b7\u53d6\u80a1\u7968\u62a5\u4ef7\uff0c\u4f46\u80a1\u7968\u62a5\u4ef7\u4fe1\u606f\u4e0d\u5728\u5f53\u524d\u7684\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\uff0c\u9700\u8981\u5411\u5176\u5b83\u670d\u52a1\u5668\u8bf7\u6c42\u83b7\u53d6\u540e\u518d\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002</p> </li> <li> <p>\u7b2c\u4e8c\u4e2a\u5ba2\u6237\u8bf7\u6c42\u5411\u670d\u52a1\u5668\u83b7\u53d6CSS\u6837\u5f0f\u8868\uff0c\u8fd9\u4e2a\u6837\u5f0f\u8868\u5728\u5f53\u524d\u670d\u52a1\u5668\u7684\u5b58\u50a8\u5668\u4e2d\u53ef\u76f4\u63a5\u83b7\u53d6\uff0c\u53ef\u4ee5\u7acb\u5373\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002</p> </li> <li> <p>\u7b2c\u4e09\u4e2a\u5ba2\u6237\u8bf7\u6c42\u5411\u670d\u52a1\u5668\u83b7\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u9700\u8981\u67e5\u8be2\u5f53\u524d\u670d\u52a1\u5668\u4e0a\u7684\u7528\u6237\u4fe1\u606f\u6570\u636e\u5e93\uff0c\u67e5\u8be2\u6267\u884c\u5b8c\u6210\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002</p> </li> <li> <p>\u7b2c\u56db\u4e2a\u5ba2\u6237\u8bf7\u6c42\u5411\u670d\u52a1\u5668\u83b7\u53d6HTML\u5185\u5bb9\uff0c\u8fd9\u4e9bHTML\u5185\u5bb9\u5728\u5f53\u524d\u670d\u52a1\u5668\u7684\u5b58\u50a8\u5668\u4e2d\u53ef\u76f4\u63a5\u83b7\u53d6\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002</p> </li> </ul> <p>\u5982\u679c\u7528\u4e00\u4e2a\u5355\u7ebf\u7a0b\u670d\u52a1\u5668\u5904\u7406\u8fd9\u56db\u4e2a\u8bf7\u6c42\uff0c\u5f53\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u540e\uff0c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u9700\u8981\u5728\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\u540e\u624d\u80fd\u88ab\u5904\u7406\u5230\uff0c\u56e0\u6b64\u56db\u4e2a\u8bf7\u6c42\u662f\u987a\u5e8f\u6267\u884c\uff0c\u524d\u4e00\u4e2a\u5904\u7406\u5b8c\u6210\u624d\u80fd\u5904\u7406\u540e\u4e00\u4e2a\u3002\u8fd9\u79cd\u987a\u5e8f\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u5f0f\u5bb9\u6613\u53d1\u751f\u963b\u585e\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u8bf7\u6c42\u8017\u65f6\u592a\u4e45\uff0c\u5c31\u4f1a\u5f71\u54cd\u5230\u540e\u5e8f\u51e0\u4e2a\u8bf7\u6c42\u3002</p> <p>\u5982\u679c\u7528\u4e00\u4e2a\u591a\u7ebf\u7a0b\u670d\u52a1\u5668\u5904\u7406\u8fd9\u56db\u4e2a\u8bf7\u6c42\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u540c\u65f6\u53ef\u5f00\u542f\u7684\u7ebf\u7a0b\u6570\u91cf\u662f\u6709\u4e0a\u9650\u7684\uff0c\u7ebf\u7a0b\u95f4\u5207\u6362\u6267\u884c\u73af\u5883\u4e5f\u4f1a\u8017\u8d39\u8d44\u6e90\uff0c\u5e76\u4e14\u6570\u636e\u5728\u591a\u7ebf\u7a0b\u95f4\u8bbf\u95ee\u65f6\u5904\u7406\u4e0d\u5f53\u5f88\u5bb9\u6613\u53d1\u751f\u9519\u8bef\uff0c\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u8bbf\u95ee\u5bf9\u4e8e\u5f00\u53d1\u8005\u5f88\u6709\u6311\u6218\uff0c\u5f88\u5bb9\u6613\u51fa\u9519\u3002\u591a\u7ebf\u7a0b\u670d\u52a1\u5668\u4e00\u822c\u4f1a\u4f7f\u7528\u7ebf\u7a0b\u6c60\u7684\u65b9\u5f0f\uff0c\u867d\u7136\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u662f\u6548\u7387\u4e0d\u662f\u6700\u9ad8\u7684\u3002</p>"},{"location":"server/async/#\u5f02\u6b65\u975e\u963b\u585eio","title":"\u5f02\u6b65\u975e\u963b\u585eIO","text":"<p>Vapor \u5efa\u7acb\u5728 SwiftNIO \u4e4b\u4e0a\uff0cSwiftNIO \u63d0\u4f9b\u4e86\u5f02\u6b65\u975e\u963b\u585eIO\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u8fd9\u4e5f\u6784\u6210\u4e86 Vapor \u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\uff0c\u521a\u5f00\u59cb\u5b66\u4e60 Vapor \u7684\u5f02\u6b65\u5904\u7406\u673a\u5236\u65f6\u4f1a\u6709\u4e9b\u4ee4\u4eba\u56f0\u60d1\u3002</p> <p>\u5982\u4f55\u7406\u89e3Vapor\u4e2d\u7684\u5f02\u6b65\u5904\u7406\u673a\u5236</p> <p>\u5982\u679c\u5728\u540c\u4e00\u4e2a\u5355\u7ebf\u7a0b\u7684\u670d\u52a1\u5668\u4e0a\u7528\u5f02\u6b65\u975e\u963b\u585eIO\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u56db\u4e2a\u8bf7\u6c42\uff0c\u5f53\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u540e\uff0c\u7531\u4e8e\u8bf7\u6c42\u7ed3\u679c\u4e0d\u80fd\u9a6c\u4e0a\u83b7\u53d6\u5230\uff0c\u6b64\u65f6\u7ebf\u7a0b\u5c31\u4f1a\u628a\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5148\u653e\u5728\u4e00\u8fb9\uff0c\u76f4\u63a5\u53bb\u5904\u7406\u540e\u9762\u7684\u5176\u5b83\u8bf7\u6c42\u3002SwiftNIO\u4f9d\u8d56\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u901a\u77e5\u4e8b\u4ef6\uff0c\u5f53\u7f51\u7edc\u8bf7\u6c42\u6570\u636e\u8fd4\u56de\u65f6\uff0c\u7cfb\u7edf\u5185\u6838\u4f1a\u901a\u77e5SwiftNIO\uff0cSwiftNIO\u518d\u8fdb\u884c\u4e8b\u4ef6\u5206\u53d1\u3002\u88ab\u653e\u5728\u4e00\u8fb9\u7684\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u6536\u5230\u901a\u77e5\u4e4b\u540e\u88ab\u6062\u590d\u6267\u884c\uff0c\u628a\u8bf7\u6c42\u7ed3\u679c\u8fd4\u56de\u3002\u4ece\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u88ab\u653e\u5728\u4e00\u8fb9\u5230\u88ab\u6062\u590d\u6267\u884c\u7684\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u5e76\u4e0d\u4f1a\u963b\u585e\u670d\u52a1\u5668\u7ebf\u7a0b\u53bb\u5904\u7406\u540e\u9762\u5176\u5b83\u7684\u8bf7\u6c42\uff0c\u8fd9\u6837\u5c31\u63d0\u9ad8\u4e86\u6267\u884c\u6548\u7387\u3002</p> <p>\u5047\u8bbe\u6709\u4e00\u4e2a\u51fd\u6570\u662f\u8fd9\u6837\u7684\uff1a</p> <p>Swift<pre><code>func getAllUsers() -&gt; [User] {\n\n    var users:[User]?\n\n    // do some database queries async\n\n    return uesrs\n}\n</code></pre> \u5047\u8bbe\u51fd\u6570\u4e2d\u7684\u6570\u636e\u5e93\u67e5\u8be2\u64cd\u4f5c\u662f\u5f02\u6b65\u6267\u884c\u7684\uff0c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u6570\u636e\u5e93\u7684\u67e5\u8be2\u64cd\u4f5c\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u6240\u4ee5\u8c03\u7528\u65b9\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u5e76\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u7684\u3002</p> <p>\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u77e5\u9053\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4[User]\uff0c\u5374\u4e0d\u6e05\u695a\u8fd4\u56de\u7684\u5177\u4f53\u65f6\u523b\uff0c\u6240\u4ee5\u9700\u8981\u6539\u9020\u4e00\u4e0b\u8fd4\u56de\u7c7b\u578b\uff0c\u7528Future\u8fd9\u4e2a\u8303\u578b\u7ed3\u6784\u627f\u8bfa\u5728\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u523b\u8fd4\u56de\u5bf9\u5e94\u7c7b\u578b\u7684\u6570\u636e\u3002 Swift<pre><code>func getAllUsers() -&gt; Future&lt;[User]&gt; {\n    // do some database queries\n}\n</code></pre> <p>\u4f7f\u7528Future\u53ef\u80fd\u4e00\u5f00\u59cb\u4f1a\u6709\u70b9\u56f0\u60d1\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6982\u5ff5\u8fd8\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u4e0d\u8fc7\u4f7f\u7528\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u9002\u5e94\uff0c\u6bd5\u7adf\u5728Vapor\u4e2d\u4f1a\u6709\u5927\u91cf\u573a\u666f\u4f7f\u7528\u5b83\u3002</p> <p>\u5f53\u6211\u4eec\u4ece\u4e00\u4e2a\u51fd\u6570\u83b7\u5f97\u4e00\u4e2aFuture\u8fd4\u56de\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u60f3\u5728\u8fd9\u4e2aFuture\u6709\u5b9e\u9645\u7ed3\u679c\u65f6\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u4f46\u8fd9\u4e2aFuture\u5728\u88ab\u83b7\u53d6\u65f6\u8fd8\u6ca1\u6709\u4ea7\u751f\u5b9e\u9645\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ed9Future\u63d0\u4f9b\u5b83\u5728\u4ea7\u751f\u5b9e\u9645\u503c\u65f6\u9700\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\uff0c\u8ba9Future\u81ea\u5df1\u5728\u4ea7\u751f\u5b9e\u9645\u503c\u65f6\u8c03\u7528\u76f8\u5e94\u7684\u5904\u7406\u56de\u8c03\u3002</p> <p>TODO\uff1a \u8fd9\u91cc\u9700\u8981\u4e00\u4e2a\u66f4\u52a0\u6e05\u6670\u7684\u89e3\u91caFuture\u673a\u5236</p> <p>\u548cFuture\u642d\u914d\u4f7f\u7528\u7684\u64cd\u4f5c\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a</p> <ul> <li>flatMap\uff1aCollectionType -&gt; AnotherElemType <li>map: CollectionType -&gt; CollectionType <li>transform: \u4e0emap\u7c7b\u4f3c\uff0c\u4e0d\u5904\u7406\u5177\u4f53\u5143\u7d20\uff0c\u76f4\u63a5\u53d8\u6362\u4e3a\u6307\u5b9a\u503c</li> <li>flatten: \u7b49\u6240\u6709Future\u90fd\u8fd4\u56de\u65f6\u6267\u884c</li> <li>do/catch: \u7528\u6765\u6355\u83b7\u9519\u8bef\uff0c\u4f46\u4e0d\u662f\u6062\u590d\u9519\u8bef</li> <li>catchMap/catchFlatMap: \u6355\u83b7\u5e76\u4fee\u590d\u9519\u8bef</li> <li>always: \u4e0d\u7ba1\u7ed3\u679c\u5982\u4f55\u603b\u4f1a\u6267\u884c</li> <li>wait: \u4e0d\u80fd\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u4f7f\u7528</li> <li>request.future(_:)\u53ef\u4ee5\u521b\u5efa\u5728\u540c\u4e00\u4e2a\u8bf7\u6c42\u7ebf\u7a0b\u4e0a\u4f7f\u7528\u7684Future</li> <p>\u5173\u4e8eFlatMap\u548cMap\u7684\u7406\u89e3</p> <p>\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6f14\u793a\u4e24\u79cd\u64cd\u4f5c\u7684\u4e0d\u540c\u4e4b\u5904\uff1a</p> Swift<pre><code>let number = [1, 2, 3, 4]\n\nlet mapped = number.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\nlet flatMapped = number.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n</code></pre> <p>\u5b9e\u9645\u4e0a<code>s.flatMap(transform)</code>\u4e0e<code>Array(s.map(transform).joined())</code>\u662f\u7b49\u4ef7\u7684\u3002</p> <p>\u5728Vapor\u4e2d\u4e00\u4e2aRequest\u5c31\u662f\u4e00\u4e2aWorker\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u3002</p> <p>\u5168\u5c40\u64cd\u4f5c\u652f\u6301\u6700\u591a\u4e94\u4e2aFuture\u7ed3\u679c\u8fd4\u56de\u540e\u6267\u884c\u3002</p> <p>\u5bf9Future\u53ef\u4ee5\u94fe\u5f0f\u64cd\u4f5c\uff0c\u7528\u6765\u907f\u514d\u8fc7\u5ea6\u5d4c\u5957\u3002</p> <p>SwiftNIO</p> <p>\u662f\u82f9\u679c\u7684\u4e00\u4e2a\u5f00\u6e90\u8de8\u5e73\u53f0\u5f02\u6b65\u7f51\u7edc\u5e93\uff0c\u5b83\u7528\u6765\u7ba1\u7406\u8fde\u63a5\u548c\u5904\u7406\u6570\u636e\u4f20\u8f93\uff0c\u7ba1\u7406\u7740\u4e8b\u4ef6\u5faa\u73af(EventLoop)\uff0c\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u5bf9\u5e94\u4e00\u4e2a\u7ebf\u7a0b\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5199\u5165\u4e00\u4e2a\u53d8\u91cf\u7684\u540c\u65f6\u6709\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u540c\u65f6\u7684\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u7ade\u4e89\u5173\u7cfb\uff0c\u6709\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u5e94\u7528\u53d1\u751f\u5d29\u6e83\u3002\u4f20\u7edf\u7684\u5904\u7406\u65b9\u5f0f\u662f\u7ed9\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u7684\u53d8\u91cf\u5404\u81ea\u52a0\u4e00\u628a\u9501\u6765\u4f7f\u5bf9\u53d8\u91cf\u7684\u8bbf\u95ee\u53d8\u7684\u6709\u5e8f\uff0c\u4ece\u800c\u6d88\u9664\u7ade\u4e89\u5173\u7cfb\u3002\u7ebf\u7a0b\u5728\u8bbf\u95ee\u4e00\u4e2a\u53d8\u91cf\u524d\u5148\u7ed9\u8fd9\u4e2a\u53d8\u91cf\u4e0a\u9501\uff0c\u8868\u793a\u6b64\u523b\u8be5\u53d8\u91cf\u6b63\u5728\u4f7f\u7528\uff0c\u5176\u5b83\u7ebf\u7a0b\u4e0d\u80fd\u8bbf\u95ee\uff0c\u7b49\u8bbf\u95ee\u5b8c\u6210\u540e\u5bf9\u8be5\u53d8\u91cf\u89e3\u9501\uff0c\u4ee5\u793a\u5176\u5b83\u7ebf\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u5bf9\u5176\u8fdb\u884c\u8bbf\u95ee\u3002\u8fd9\u662f\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\uff0c\u4f46\u662f\u5b58\u5728\u7f3a\u70b9\uff0c\u5c31\u662f\u4f7f\u7528\u8d77\u6765\u5f88\u590d\u6742\uff0c\u540c\u65f6\u4e5f\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387\u3002</p> <p>\u53e6\u4e00\u79cd\u601d\u8def\u662f\u628a\u5bf9\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u8bbf\u95ee\u90fd\u653e\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u6765\u8fdb\u884c\u3002\u4f46\u8fd9\u5c31\u8981\u6c42\u8fd9\u4e2a\u5904\u7406\u8bfb\u5199\u64cd\u4f5c\u7684\u7ebf\u7a0b\u8981\u80fd\u591f\u628a\u8bfb\u5199\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u53d1\u8d77\u8bfb\u5199\u8bf7\u6c42\u7684\u7ebf\u7a0b\u4e2d\u53bb\u3002\u5176\u5b9e\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af(EventLoop)\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u5982\u679c\u53d8\u91cf\u7684\u8bfb\u5199\u64cd\u4f5c\u6240\u5728\u7684\u7ebf\u7a0b\u628a\u8bfb\u5199\u7ed3\u679c\u8fd4\u56de\u7ed9\u6ca1\u6709\u53d1\u8d77\u8bfb\u5199\u8bf7\u6c42\u7684\u5176\u5b83\u7ebf\u7a0b\uff0c\u90a3\u4e48SwiftNIO\u5c31\u4f1a\u7528\u5d29\u6e83\u6765\u907f\u514d\u7a0b\u5e8f\u53d1\u751f\u4e0d\u786e\u5b9a\u95ee\u9898\u3002\u8981\u628a\u8bfb\u5199\u64cd\u4f5c\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u53d1\u8d77\u8bfb\u5199\u8bf7\u6c42\u7684\u76f8\u5173\u7ebf\u7a0b\u4e2d\u53bb\u7684\u529f\u80fd\u5c31\u9700\u8981\u7528\u5230<code>Future</code>\u548c<code>Promise</code>\u8fd9\u4e24\u4e2a\u6982\u5ff5\u4e86\u3002</p> <p><code>Future</code>\u662f\u7528\u6765\u63cf\u8ff0\u76ee\u524d\u8fd8\u4e0d\u5b58\u5728\uff0c\u4f46\u672a\u6765\u4f1a\u5b58\u5728\u7684\u4fe1\u606f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u5199\u5f02\u6b65\u4ee3\u7801\u65f6\u7528<code>Future</code>\u6765\u8868\u793a\u4e00\u4e2a\u5904\u7406\u7ed3\u679c\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u8fd9\u4e24\u79cd\u7ed3\u679c\u786e\u5b9a\u4f1a\u53d1\u751f\u5728\u672a\u6765\uff0c\u4f46\u662f\u76ee\u524d\u4e0d\u77e5\u9053\u4f1a\u662f\u54ea\u4e00\u79cd\u3002\u4f46\u662f\u5982\u679c\u4e0d\u77e5\u9053\u672a\u6765\u7ed3\u679c\u5230\u5e95\u662f\u4ec0\u4e48\u6837\u5b50(\u53ef\u80fd\u6210\u529f\uff0c\u53ef\u80fd\u5931\u8d25\uff0c\u4e5f\u53ef\u80fd\u662f\u5176\u5b83\u7684)\uff0c\u90a3\u5c31\u9700\u8981\u521b\u5efa<code>Promise</code>\u4e86\u3002</p> <p><code>Promise</code>\u548c<code>Future</code>\u90fd\u5fc5\u987b\u5728\u4e8b\u4ef6\u5faa\u73af(EventLoop)\u4e2d\u521b\u5efa\uff0c<code>Future</code>\u4f1a\u88ab\u8fd4\u56de\u7ed9\u4ea7\u751f\u5b83\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u4e00\u6b21\u53ea\u80fd\u4ee3\u8868\u4e00\u4e2a\u7ed3\u679c\uff0c\u8981\u4e48\u6210\u529f\uff0c\u8981\u4e48\u5931\u8d25\uff0c\u90fd\u7b97\u662f\u5904\u7406\u5b8c\u6210\u72b6\u6001\u3002\u7136\u540e<code>Promise</code>\u521b\u5efa\u65f6\u4e00\u5b9a\u662f\u5b8c\u6210\u72b6\u6001\u7684\u3002</p>"},{"location":"server/authentication/","title":"API\u8ba4\u8bc1","text":"<p>\u8ba4\u8bc1(Authentication)\u662f\u9a8c\u8bc1\u67d0\u4eba\u5408\u6cd5\u7684\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u540c\u4e8e\u6388\u6743(Authorization)\uff0c\u6388\u6743\u662f\u8d4b\u4e88\u7528\u6237\u6267\u884c\u67d0\u4e2a\u52a8\u4f5c\u7684\u6743\u529b\u3002\u8ba4\u8bc1\u901a\u5e38\u662f\u4f7f\u7528<code>\u7528\u6237\u540d</code>\u548c<code>\u5bc6\u7801</code>\u7684\u7ec4\u5408\u6765\u8fdb\u884c\uff0cTIL\u5e94\u7528\u4e5f\u4e0d\u4f8b\u5916\u3002</p> <p>\u5728User\u6570\u636e\u6a21\u578b\u4e2d\u6dfb\u52a0password\u5c5e\u6027\uff0c\u5e76\u4fee\u6539\u521d\u59cb\u5316\u65b9\u6cd5\uff1a</p> <p>User.swift Swift<pre><code>final class User: Codable {\n    var id: UUID?\n    var name: String\n    var username: String\n    var password: String\n\n    init(name: String, username: String, password: String) {\n        self.name = name\n        self.username = username\n        self.password = password\n    }\n}\n</code></pre></p> <p>\u5b58\u50a8\u5bc6\u7801\u6709\u4e00\u4e2a\u539f\u5219\uff0c\u5c31\u662f\u4e0d\u80fd\u660e\u6587\u7684\u65b9\u5f0f\u5b58\u50a8\u3002Vapor\u63d0\u4f9b\u4e86\u5de5\u4e1a\u7ea7\u7684\u7b97\u6cd5<code>BCrypt</code>\uff0c\u7528\u6765\u5bf9\u5bc6\u7801\u660e\u6587\u8fdb\u884c\u54c8\u5e0c\u8ba1\u7b97\u3002\u54c8\u5e0c\u7684\u8fc7\u7a0b\u662f\u5355\u5411\u7684\uff0c\u5bc6\u7801\u660e\u6587\u80fd\u591f\u751f\u6210\u54c8\u5e0c\u503c\uff0c\u4f46\u4ece\u751f\u6210\u7684\u54c8\u5e0c\u503c\u65e0\u6cd5\u53cd\u5411\u751f\u6210\u5bc6\u7801\u660e\u6587\u6216\u8005\u8bf4\u590d\u539f\u5bc6\u7801\u660e\u6587\u7684\u4ee3\u4ef7\u592a\u5927\u4e0d\u53ef\u63a5\u53d7\u3002<code>BCrypt</code>\u5728\u54c8\u5e0c\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u81ea\u52a8\u52a0\u76d0\uff0c\u4f7f\u4ece\u54c8\u5e0c\u503c\u590d\u539f\u5bc6\u7801\u660e\u6587\u51e0\u4e4e\u4e0d\u53ef\u80fd\u3002\u540c\u65f6<code>BCrypt</code>\u63d0\u4f9b\u9a8c\u8bc1\u5bc6\u7801\u660e\u6587\u548c\u5bf9\u5e94\u5bc6\u7801\u54c8\u5e0c\u503c\u7684\u529f\u80fd\u3002\u6240\u4ee5\u6211\u4eec\u5728\u4fdd\u5b58\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u7528\u6237\u4e4b\u524d\uff0c\u8981\u5bf9\u7528\u6237\u6ce8\u518c\u65f6\u63d0\u4f9b\u7684\u5bc6\u7801\u660e\u6587\u8fdb\u884c\u54c8\u5e0c\u540e\u518d\u8fdb\u884c\u5b58\u50a8\u3002\u52a0\u5bc6\u7b97\u6cd5\u90fd\u653e\u5728<code>Crypto</code>\u5e93\u4e2d\u3002</p> <p>UserController.swift Swift<pre><code>...\nimport Crypto\n\nstruct UsersController: RouteCollection {\n    ...\n    func createHandler(_ req: Request, user: User) throws -&gt; Future&lt;User&gt; {\n        user.password = try BCrypt.hash(user.password)\n        return user.save(on: req)\n    }\n    ...\n</code></pre> \u8fd9\u6837\u5728\u7528\u6237\u521b\u5efa\u65f6\uff0c\u7528\u6237\u7684\u5bc6\u7801\u662f\u4ee5\u54c8\u5e0c\u503c\u7684\u65b9\u5f0f\u88ab\u5b58\u653e\uff0c\u5373\u4f7f\u672a\u6765\u88ab\u5176\u5b83\u4eba\u83b7\u5f97\u4e86\u670d\u52a1\u7aef\u7684\u7528\u6237\u4fe1\u606f\uff0c\u4e5f\u5f88\u96be\u7834\u89e3\u51fa\u7528\u6237\u7684\u5bc6\u7801\u660e\u6587\u6765\u3002</p>"},{"location":"server/authentication/#\u7528\u6237\u540d\u552f\u4e00\u6027","title":"\u7528\u6237\u540d\u552f\u4e00\u6027","text":"<p>\u76ee\u524d\u6765\u770b\uff0c\u6211\u4eec\u5bf9\u540c\u540d\u7528\u6237\u7684\u521b\u5efa\u6ca1\u6709\u4f5c\u9650\u5236\uff0c\u4f46\u4e4b\u540e\u7528\u6237\u5728\u767b\u5f55\u65f6\u9700\u8981\u901a\u8fc7\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fc7\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u6709\u540c\u540d\u7528\u6237\u5b58\u5728\uff0c\u6211\u4eec\u5728\u540c\u540d\u7528\u6237\u767b\u5f55\u65f6\u5c31\u65e0\u6cd5\u51b3\u5b9a\u53bb\u9a8c\u8bc1\u54ea\u4e00\u4e2a\u7528\u6237\uff0c\u6240\u4ee5\u5fc5\u987b\u4fdd\u8bc1\u7528\u6237\u540d\u7684\u552f\u4e00\u6027\u3002</p> <p>User.swift Swift<pre><code>...\nextension User: Migration {\n    static func prepare(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return Database.create(self, on: conn, closure: { (builder) in\n            try addProperties(to: builder)\n            builder.unique(on: \\.username)\n        })\n    }\n}\n...\n</code></pre> \u8fd9\u79cd\u64cd\u4f5c\u7c7b\u4f3c\u4e8e\u6dfb\u52a0\u5916\u952e\u7ea6\u675f\uff0c\u5982\u679c\u6709\u540c\u540d\u7528\u6237\u5df2\u7ecf\u521b\u5efa\u4e86\uff0c\u90a3\u4e2a\u65b0\u540c\u540d\u7528\u6237\u5c31\u4f1a\u521b\u5efa\u4e0d\u6210\u529f\u3002</p> <p>\u56e0\u4e3a\u6211\u4eec\u7684\u6570\u636e\u5e93\u8868\u5b57\u6bb5\u53d8\u66f4\u548c\u7ea6\u675f\u6dfb\u52a0\uff0c\u9700\u8981\u6211\u4eec\u91cd\u7f6e\u4e00\u6b21\u6570\u636e\u5e93\uff0c\u8ba9\u53d8\u52a8\u751f\u6548\u3002<code>Option + Run</code>\u8fdb\u884cSchema\u8bbe\u7f6e\u9875\uff0c\u9009\u62e9\u53c2\u6570\u9009\u62e9\u9875\uff0c\u6dfb\u52a0\u8fd0\u884c\u65f6\u53c2\u6570\u5982\u4e0b\uff1a</p> <p></p> <p>\u6dfb\u52a0\u53c2\u6570\u5e76\u6253\u52fe\u8fd0\u884c\u4e00\u6b21\u76f8\u5f53\u4e8e\u8fd0\u884c\u547d\u4ee4<code>vapor run revert --all --yes</code>\u53ef\u4ee5\u91cd\u7f6e\u672c\u5730\u6570\u636e\u5e93\u3002</p> <p></p> <p>\u91cd\u7f6e\u672c\u5730\u6570\u636e\u5e93\u4e4b\u540e\uff0c\u518d\u53bb\u8fd0\u884c\u5de5\u7a0b\u65f6\u5c31\u8981\u628aSchema\u4e2d\u7684\u53c2\u6570<code>revert --all --yes</code>\u9009\u62e9\u53d6\u6d88\u52fe\u9009\u4e86\u3002\u8fd9\u6837\u65b0\u7684\u6570\u636e\u5e93\u8868\u5173\u7cfb\u5c31\u4f1a\u751f\u6548\u4e86\u3002\u6211\u4eec\u4f7f\u7528<code>Rested</code>\u5e94\u7528\u6765\u521b\u5efa\u51e0\u4e2a\u7528\u6237\uff1a</p> <p></p> <p></p> <p>\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u8bf7\u6c42\u8fd4\u56de\u6570\u636e\u4e2d\u5305\u542b\u4e86\u7528\u6237\u7684\u5bc6\u7801\u54c8\u5e0c\u503c\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u6211\u4eec\u5728\u8bf7\u6c42\u8fd4\u56de\u6570\u636e\u4e2d\u5e94\u8be5\u4e0d\u5305\u542b\u5bc6\u7801\u76f8\u5173\u7684\u4fe1\u606f\u3002\u8fd9\u9700\u8981\u6211\u4eec\u5728\u8fd4\u56de\u7528\u6237\u6570\u636e\u524d\u4f5c\u4e00\u4e2a\u8f6c\u6362\u3002</p> <p>User.swift Swift<pre><code>...\nfinal class User: Codable {\n    ...\n\n    final class Public: Codable {\n        var id: UUID?\n        var name: String\n        var username: String\n        init(id: UUID?, name: String, username: String) {\n            self.id = id\n            self.name = name\n            self.username = username\n        }\n    }\n}\n...\nextension User.Public: Content {}\n...\nextension User {\n    func convertToPublic() -&gt; User.Public {\n        return User.Public(id: self.id, name: self.name, username: self.username)\n    }\n}\nextension Future where T: User {\n\n    func convertToPublic() -&gt; Future&lt;User.Public&gt; {\n        return self.map(to: User.Public.self) { (user) -&gt; User.Public in\n            return user.convertToPublic()\n        }\n    }\n}\n</code></pre></p> <p>UserController.swift Swift<pre><code>import Vapor\nimport Crypto\n\nstruct UsersController: RouteCollection {\n    ...\n    func createHandler(_ req: Request, user: User) throws -&gt; Future&lt;User.Public&gt; {\n        user.password = try BCrypt.hash(user.password)\n        return user.save(on: req).convertToPublic()\n    }\n\n    func getAllHandler(_ req: Request) throws -&gt; Future&lt;[User.Public]&gt; {\n        return User.query(on: req).decode(data: User.Public.self).all()\n    }\n\n    func getHandler(_ req: Request) throws -&gt; Future&lt;User.Public&gt; {\n        return try req.parameters.next(User.self).convertToPublic()\n    }\n\n    func updateHandler(_ req: Request) throws -&gt; Future&lt;User.Public&gt; {\n        return try flatMap(to: User.Public.self, req.parameters.next(User.self), req.content.decode(User.self)) { (user, updatedUser) -&gt; Future&lt;User.Public&gt; in\n\n            user.name = updatedUser.name\n            user.username = updatedUser.username\n\n            return user.save(on: req).convertToPublic()\n        }\n    }\n    ...\n}\n</code></pre></p> <p></p> <p></p> <p></p> <p>\u73b0\u5728\u6240\u6709\u7684\u8bf7\u6c42\u8fd4\u56de\u6570\u636e\u4e2d\u90fd\u4e0d\u5305\u542b\u5bc6\u7801\u76f8\u5173\u4fe1\u606f\u4e86\u3002</p>"},{"location":"server/basic-authentication/","title":"\u57fa\u672c\u8ba4\u8bc1","text":"<p>HTTP\u57fa\u672c\u8ba4\u8bc1\u8fc7\u7a0b\u662f\u628a\u8ba4\u8bc1\u4fe1\u606f\u653e\u5728\u8bf7\u6c42\u7684\u8ba4\u8bc1\u5934\u4e2d\u3002\u8ba4\u8bc1\u4fe1\u606f\u7684\u751f\u6210\u8fc7\u7a0b\u662f\u628a\u7528\u6237\u540d\u548c\u5bc6\u7801\u5408\u5e76\u540e\u8fdb\u884cbase64\u52a0\u5bc6\u540e\u751f\u6210token\u3002\u5982\u679c\u7528\u6237\u540d\u662fUser\uff0c\u5bc6\u7801\u662fpassword\uff0c\u90a3\u4e48\u8ba4\u8bc1\u4fe1\u606f\u5c31\u662f\uff1abase64(user:password) = <code>dXNlcjpwYXNzd29yZAo=</code>, \u8ba4\u8bc1\u5934\u5c31\u662f\uff1a Text Only<pre><code>Authorization: Basic dXNlcjpwYXNzd29yZAo=\n</code></pre></p> <p>Vapor\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u4e13\u95e8\u5904\u7406\u5404\u79cd\u8ba4\u8bc1\uff0c\u5305\u62ec\u8fd9\u79cd\u57fa\u672c\u8ba4\u8bc1\u3002\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u4f9d\u8d56:</p> <p>Package.swift Swift<pre><code>...\n.package(url: \"https://github.com/vapor/auth.git\", from: \"2.0.1\"),\n...\n.target(name: \"App\", dependencies: [\"FluentPostgreSQL\", \"Authentication\", \"Vapor\", \"Leaf\"]),\n...\n</code></pre></p> <p>\u91cd\u65b0\u751f\u6210Xcode\u5de5\u7a0b: <code>vapor xcode -y</code></p> <p>User.swift Swift<pre><code>...\nimport Authentication\n...\n\nextension User: BasicAuthenticatable {\n    static var usernameKey: WritableKeyPath&lt;User, String&gt; = \\.username\n    static var passwordKey: WritableKeyPath&lt;User, String&gt; = \\.password\n}\n</code></pre></p> <p>\u8fd9\u79cdUser\u6570\u636e\u652f\u6301\u4e86\u57fa\u672c\u8ba4\u8bc1\uff0c\u6307\u5b9a\u4e86\u7528\u6237\u540d\u548c\u5bc6\u7801\u5bf9\u5e94\u7ed3\u6784\u4e2d\u7684\u5c5e\u6027\u540d\u79f0</p> <p>AcronymsController.swift Swift<pre><code>...\nimport Authentication\n...\nstruct AcronymsController: RouteCollection {\n    func boot(router: Router) throws {\n        let routeGroup = router.grouped(\"api\", \"acronyms\")\n\n        let basicAuthenticationMiddleware = User.basicAuthMiddleware(using: BCryptDigest())\n        let guardAuthMiddleware = User.guardAuthMiddleware()\n        let protectd = routeGroup.grouped(basicAuthenticationMiddleware, guardAuthMiddleware)\n        protectd.post(Acronym.self, use: createHandler)\n        // routeGroup.post(Acronym.self, use: createHandler) \n        ...\n    }\n    ...\n}\n</code></pre></p> <p>\u4e2d\u95f4\u4ef6Middleware</p> <p>\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u7528\u6765\u62e6\u622a\u8bf7\u6c42\u548c\u8fd4\u56de\u6570\u636e\uff0c\u5728\u8fd9\u91cc\uff0c\u57fa\u672c\u8ba4\u8bc1\u4e2d\u95f4\u4ef6\u62e6\u622a\u4e86\u8bf7\u6c42\u6570\u636e\uff0c\u4f7f\u7528\u57fa\u672c\u8ba4\u8bc1\u65b9\u6cd5\u68c0\u9a8c\u53d1\u8d77\u8bf7\u6c42\u7684\u7528\u6237\u662f\u5426\u5408\u6cd5\uff0c\u4fdd\u8bc1\u8ba4\u8bc1\u4e2d\u95f4\u4ef6\u786e\u4fdd\u8ba4\u8bc1\u901a\u8fc7\u7684\u7528\u6237\u8bf7\u6c42\u7ee7\u7eed\u8fdb\u884c\u3002</p> <p>\u4e0a\u9762\u7684\u4e2d\u95f4\u4ef6\u6b63\u5e38\u5de5\u4f5c\u8fd8\u9700\u8981\u5728\u9879\u76ee\u914d\u7f6e\u4e2d\u6ce8\u518c\u4e2d\u95f4\u4ef6\u670d\u52a1\u63d0\u4f9b\u8005\u3002</p> <p>configure.swift Swift<pre><code>...\nimport Authentication\n...\npublic func configure(_ config: inout Config, _ env: inout Environment, _ services: inout Services) throws {\n    /// Register providers first\n    try services.register(FluentPostgreSQLProvider())\n    try services.register(AuthenticationProvider())\n    ...\n}\n</code></pre></p> <p>\u8fd0\u884c\u5de5\u7a0b\uff0c\u5e76\u4f7f\u7528Rested\u5de5\u5177\u8fdb\u884c\u68c0\u9a8c, \u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e\u8ba4\u8bc1\u4fe1\u606f\u5934\uff0c\u6240\u4ee5\u8ba4\u8bc1\u5931\u8d25\u4e0d\u80fd\u521b\u5efa\u7f29\u7565\u8bed</p> <p></p> <p>\u8bf7\u6c42\u65f6\u8bbe\u7f6e\u8ba4\u8bc1\u4fe1\u606f\u5934 </p> <p>\u7528\u6237\u8ba4\u8bc1\u901a\u8fc7\uff0c\u521b\u5efa\u7f29\u7565\u8bed\u6210\u529f </p>"},{"location":"server/configure-database/","title":"\u914d\u7f6e\u6570\u636e\u5e93","text":"<p>Vapor\u539f\u751f\u63d0\u4f9b\u4e86\u4e09\u79cd\u6570\u636e\u5e93\u7684\u9a71\u52a8:<code>SQLite</code>\u3001<code>MySQL</code>\u3001<code>PostgreSQL</code></p> <p>\u6570\u636e\u5e93\u5206\u4e3a\u4e24\u79cd\uff1a<code>\u5173\u7cfb\u578b\u6570\u636e\u5e93(SQL)</code>\u548c<code>\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93(NoSQL)</code>\u3002\u5173\u7cfb\u578b\u6570\u636e\u5e93\u9002\u5408\u5b58\u653e\u7ed3\u6784\u5316\u7684\u6570\u636e\uff0c\u76ee\u524dVapor\u53ea\u652f\u6301\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002\u4f46\u4e0d\u4e45\u7684\u5c06\u6765\u4e5f\u4f1a\u652f\u6301\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002</p> <p>\u5173\u7cfb\u578b\u6570\u636e\u5e93\u9762\u4e34\u7684\u95ee\u9898\u662f\u5df2\u7ecf\u5b58\u5165\u6570\u636e\u5e93\u7684\u7ed3\u6784\u5728\u540e\u671f\u53ef\u80fd\u9700\u8981\u53d8\u66f4\u7ed3\u6784\uff0c\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"server/configure-database/#sqlite","title":"SQLite","text":"<p>\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u4e8e\u6587\u4ef6\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7cfb\u7edf\uff0c\u8bbe\u8ba1\u76ee\u6807\u662f\u5d4c\u5165\u5230\u5e94\u7528\u4e2d\u4f7f\u7528\uff0c\u5bf9\u4e8e\u5355\u8fdb\u7a0b\u5e94\u7528\u5f88\u6709\u7528\u3002\u5b83\u4f9d\u9760\u6587\u4ef6\u9501\u4fdd\u8bc1\u6570\u636e\u5e93\u5b8c\u6574\u6027\uff0c\u6240\u4ee5\u4e0d\u9002\u5408\u5927\u91cf\u5199\u5165\u64cd\u4f5c\u7684\u5e94\u7528\uff0c\u4e5f\u4e0d\u80fd\u8de8\u670d\u52a1\u5668\u4f7f\u7528\u3002\u5b83\u9002\u5408\u5728\u5f00\u53d1\u539f\u578b\u548c\u6d4b\u8bd5\u65f6\u4f7f\u7528\u3002</p>"},{"location":"server/configure-database/#mysql","title":"MySQL","text":"<p>\u4e00\u4e2a\u5f00\u6e90\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u6d41\u884c\u4e8eLAMP\u5e94\u7528\u6808\u4e2d\uff0c\u5b83\u5f88\u5bb9\u6613\u4f7f\u7528\u540c\u65f6\u88ab\u5927\u591a\u6570\u4e91\u63d0\u4f9b\u5546\u652f\u6301\u3002</p>"},{"location":"server/configure-database/#postgresql","title":"PostgreSQL","text":"<p>\u4e00\u4e2a\u5f00\u6e90\u5173\u7cfb\u6570\u636e\u5e93\u3002\u4e3b\u8981\u8bbe\u8ba1\u76ee\u6807\u662f\u5546\u7528\uff0c\u6269\u5c55\u6027\u548c\u6807\u51c6\u5316\u662f\u5b83\u7684\u6838\u5fc3\u76ee\u6807\u3002</p>"},{"location":"server/configure-database/#docker","title":"Docker","text":"<p>\u6211\u4eec\u4f7f\u7528Docker\u5728\u672c\u5730\u5e03\u7f6e\u6570\u636e\u5e93\uff0c\u5b83\u6709\u522b\u4e8e\u865a\u62df\u673a\uff0c\u5f88\u65b9\u4fbf\u3002MySQL\u548cPostgreSQL\u53ef\u4ee5\u4f7f\u7528Docker\u90e8\u7f72\u5728\u672c\u5730\u3002</p>"},{"location":"server/configure-database/#\u53ea\u4f7f\u7528sqlite\u53ef\u4ee5\u7b80\u5316\u5f00\u53d1\u9002\u7528\u4e8e\u539f\u578b\u5f00\u53d1\u671f","title":"\u53ea\u4f7f\u7528SQLite\u53ef\u4ee5\u7b80\u5316\u5f00\u53d1\uff0c\u9002\u7528\u4e8e\u539f\u578b\u5f00\u53d1\u671f","text":"<p>\u4e3a\u4e86\u7b80\u5316\u6570\u636e\u5e93\u914d\u7f6e\uff0c\u6211\u4eec\u4f7f\u7528SQLite\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u5b58\u653e\u6570\u636e\u3002\u914d\u7f6e\u6570\u636e\u5e93</p> <p>configure.swift Swift<pre><code>   /// Register providers first\n    try services.register(FluentSQLiteProvider())\n\n    // Configure a SQLite database\n    let sqlite = try SQLiteDatabase(storage: .file(path: \"db.sqlite\"))\n\n    /// Register the configured SQLite database to the database config.\n    var databases = DatabasesConfig()\n    databases.add(database: sqlite, as: .sqlite)\n    services.register(databases)\n\n    /// Configure migrations\n    var migrations = MigrationConfig()\n    migrations.add(model: Acronym.self, database: .sqlite)\n    services.register(migrations)\n</code></pre></p> <p>Package.swift Text Only<pre><code>// swift-tools-version:4.0\nimport PackageDescription\n\nlet package = Package(\n    name: \"TILApp\",\n    dependencies: [\n        // \ud83d\udca7 A server-side Swift web framework.\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"3.0.0\"),\n\n        // \ud83d\udd35 Swift ORM (queries, models, relations, etc) built on SQLite 3.\n        .package(url: \"https://github.com/vapor/fluent-sqlite.git\", from: \"3.0.0\")\n    ],\n    targets: [\n        .target(name: \"App\", dependencies: [\"FluentSQLite\", \"Vapor\"]),\n        .target(name: \"Run\", dependencies: [\"App\"]),\n        .testTarget(name: \"AppTests\", dependencies: [\"App\"])\n    ]\n</code></pre></p> <p>\u6570\u636e\u5e93\u7684\u914d\u7f6e\u4e3b\u8981\u5728<code>configure.swift</code>\u6587\u4ef6\u4e2d\u5b8c\u6210\u3002\u9996\u5148\u6ce8\u518c<code>FluentSQLiteProvider</code>\u670d\u52a1\uff0c\u8fd9\u4e2a\u670d\u52a1\u662f\u901a\u8fc7<code>Fluent</code>\u8fd9\u4e2aORM\u4e2d\u95f4\u5c42\u6765\u5bf9SQLite\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\u7684\u670d\u52a1\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u4e0d\u7528\u7406\u4f1a\u5177\u4f53\u7684\u6570\u636e\u5e93\u3002</p> <p>\u7136\u540e\u521b\u5efa\u6570\u636e\u5e93\uff0c\u56e0\u4e3a<code>Vapor</code>\u652f\u6301\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u5185\u4f7f\u7528\u591a\u4e2a\u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u6240\u4ee5\u6dfb\u52a0\u6570\u636e\u5e93\u5b9e\u4f8b\u7684\u65b9\u5f0f\u662f\u5148\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u914d\u7f6e(DatabasesConfig)\uff0c\u8bb0\u5f55\u6240\u6709\u7528\u5230\u7684\u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u7136\u540e\u53bb\u7edf\u4e00\u6ce8\u518c\u8fdb\u670d\u52a1\u91cc\u3002</p> <p>\u6700\u540e\u628a\u6570\u636e\u5e93\u8981\u5b58\u653e\u7684\u6570\u636e\u6a21\u578b\u548c\u5bf9\u5e94\u8981\u5b58\u653e\u7684\u6570\u636e\u5e93\u7c7b\u578b\u7ed1\u5b9a\uff0c\u7edf\u4e00\u4f7f\u7528<code>Migration</code>\u670d\u52a1\u8fdb\u884c\u6ce8\u518c\u4f7f\u7528\u3002</p>"},{"location":"server/controller/","title":"\u63a7\u5236\u5668","text":"<p>\u5f53\u9879\u76ee\u5f88\u5927\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u4e00\u6761\u6761\u7684\u5199router\uff0c\u56e0\u4e3a\u4e4b\u540e\u5f88\u96be\u8fdb\u884c\u7ef4\u62a4\u3002\u4e00\u822c\u5927\u578b\u9879\u76ee\u90fd\u8981\u91c7\u7528\u4e00\u5b9a\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4ee5\u786e\u4fdd\u9879\u76ee\u53ef\u4ee5\u6709\u6548\u7684\u8fdb\u884c\u7ef4\u62a4\u3002\u5728Web\u5f00\u53d1\u4e2d\u5f88\u6d41\u884c\u7684\u4e00\u79cd\u6a21\u5f0f\u5c31\u662fMVC\uff0c\u5373Model-View-Controller\uff0c\u4ee5Web\u4e3a\u4f8b\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u6a21\u578b(Model)\uff0c\u7ed9\u7528\u6237\u5c55\u793a\u7684HTML\u9875\u9762\u4e3a\u89c6\u56fe(View),\u63a7\u5236\u7740\u6570\u636e\u5c55\u793a\u5230\u9875\u9762\u4e0a\u7684\u90a3\u90e8\u5206\u903b\u8f91\u4e3a\u63a7\u5236\u5668(Controller)\u3002\u6211\u4eec\u8fd9\u7bc7\u5c31\u662f\u8bb2Controller\u3002</p> <p>\u5f53\u5de5\u7a0b\u6bd4\u8f83\u5927\u65f6\uff0c\u4e00\u6761\u6761\u7684Router\u7ec4\u6210\u4e86\u8bf7\u6c42\u8fd4\u56de\u903b\u8f91\uff0c\u5904\u7406\u6570\u636e\u548c\u89c6\u56fe\u7684\u5c55\u793a\u3002\u4f7f\u7528Controller\u628a\u4e00\u6761\u6761\u96f6\u6563\u7684Router\u7ec4\u7ec7\u6210\u72ec\u7acb\u7684\u6a21\u5757\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u5212\u5206\u6982\u5ff5\u65b9\u4fbf\u540e\u671f\u7ef4\u62a4\u3002\u4f8b\u5982\u9488\u5bf9\u6570\u636e\u7684CRUD\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u63a7\u5236\u5668\u7ec4\u7ec7\u5728\u4e00\u8d77\u3002</p>"},{"location":"server/controller/#routecollection","title":"RouteCollection","text":"<p>routes.swift \u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a Swift<pre><code>import Vapor\n\n/// Register your application's routes here.\npublic func routes(_ router: Router) throws {\n\n    let acronymsController = AcronymsController()\n    try router.register(collection: acronymsController)\n}\n</code></pre> \u5206\u7ec4\u7684\u6240\u6709routes\u90fd\u5199\u5165\u63a7\u5236\u5668\u4e2d, \u63a7\u5236\u5668\u7ee7\u627f\u81ea<code>RouteCollection</code>\uff1a </p> <p>AcronymsController.swift Swift<pre><code>import Vapor\nimport Fluent\n\nstruct AcronymsController: RouteCollection {\n    func boot(router: Router) throws {\n        router.post(\"api\", \"acronyms\", use: createHandler)\n    }\n\n    func createHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt;\n    {\n        // \u8fd9\u91cc\u624b\u52a8\u89e3\u7801\u4e3a\u6570\u636e\u6a21\u578b\n        return try req.content.decode(Acronym.self)\n            .flatMap(to: Acronym.self) { (acronym) in\n                return acronym.save(on: req)\n        }\n    }\n    ...\n}\n</code></pre></p>"},{"location":"server/controller/#routegroup","title":"RouteGroup","text":"<p>\u4e0a\u9762\u7684\u65b9\u5f0f\u9700\u8981\u6bcf\u6761route\u90fd\u5199\u660e\u81ea\u5df1\u7684\u5168\u90e8\u8def\u5f84\uff0c\u5bf9\u4e8eRESTful\u6765\u8bf4\uff0c\u5982\u679c\u63a7\u5236\u5668\u4e2d\u6709\u591a\u6761route\uff0c\u5b83\u4eec\u7684\u8def\u5f84\u6709\u5f88\u957f\u4e00\u90e8\u5206\u90fd\u662f\u5171\u7528\u7684\uff0c\u90a3\u4e48\u540e\u671f\u5982\u679c\u8981\u540c\u65f6\u4fee\u6539\u5b83\u4eec\u524d\u9762\u76f8\u540c\u7684\u90e8\u5206\uff0c\u5bf9\u4e8e\u7ef4\u62a4\u6765\u8bf4\u5c06\u662f\u707e\u96be\u3002\u6240\u4ee5\u6709\u4e86RouteGroup\u7684\u6982\u5ff5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> Swift<pre><code>import Vapor\nimport Fluent\n\nstruct AcronymsController: RouteCollection {\n    func boot(router: Router) throws {\n        let routeGroup = router.grouped(\"api\", \"acronyms\")\n\n        routeGroup.post(use: createHandler)\n        routeGroup.get(use: getAllHandler)\n        routeGroup.get(Acronym.parameter, use: getHandler)\n        routeGroup.put(Acronym.parameter, use: updateHandler)\n        routeGroup.delete(Acronym.parameter, use: deleteHandler)\n        routeGroup.get(\"search\", use: searchHandler)\n        routeGroup.get(\"first\", use: firstHandler)\n        routeGroup.get(\"sorted\", use: sortedHandler)\n\n\n    }\n\n    func createHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt;\n    {\n        return try req.content.decode(Acronym.self)\n            .flatMap(to: Acronym.self) { (acronym) in\n                return acronym.save(on: req)\n        }\n    }\n\n    func getAllHandler(_ req: Request) throws -&gt; Future&lt;[Acronym]&gt; {\n        return Acronym.query(on: req).all()\n    }\n\n    func getHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt; {\n        return try req.parameters.next(Acronym.self)\n    }\n\n    func updateHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt; {\n        return try flatMap(to: Acronym.self, req.parameters.next(Acronym.self), req.content.decode(Acronym.self)) { (acronym, updateAcronym) -&gt; Future&lt;Acronym&gt; in\n            acronym.short = updateAcronym.short\n            acronym.long = updateAcronym.long\n\n            return acronym.save(on: req)\n        }\n    }\n\n    func deleteHandler(_ req: Request) throws -&gt; Future&lt;HTTPStatus&gt; {\n        return try req.parameters.next(Acronym.self)\n            .delete(on: req)\n            .transform(to: HTTPStatus.noContent)\n    }\n\n    func searchHandler(_ req: Request) throws -&gt; Future&lt;[Acronym]&gt; {\n        guard let searchItem = req.query[String.self, at: \"term\"] else {\n            throw Abort(.badRequest)\n        }\n        return Acronym.query(on: req).group(.or) { (or) in\n            or.filter(\\.short == searchItem)\n            or.filter(\\.long == searchItem)\n            }\n            .all()\n    }\n\n    func firstHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt; {\n        return Acronym.query(on: req).first().map(to: Acronym.self) { (acronym)  in\n            guard let acronym = acronym else {\n                throw Abort(.notFound)\n            }\n            return acronym\n        }\n    }\n\n    func sortedHandler(_ req: Request) throws -&gt; Future&lt;[Acronym]&gt; {\n        return Acronym.query(on: req).sort(\\.short, .ascending).all()\n    }\n}\n</code></pre> <p>\u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e2aroute\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u624b\u52a8\u89e3\u7801\u8bf7\u6c42\u53c2\u6570\uff0c\u4ee5createHandler\u4e3a\u4f8b,\u9700\u8981\u5728\u6ce8\u518croute\u65f6\u6307\u540d\u89e3\u7801\u7684\u7c7b\u578b\uff1a</p> Swift<pre><code>...\nrouteGroup.post(Acronym.self,use: createHandler)\n...\n\nfunc createHandler(_ req: Request, acronym: Acronym) throws -&gt; Future&lt;Acronym&gt; {\n    return acronym.save(on: req)\n}\n</code></pre>"},{"location":"server/database-seeding/","title":"\u6570\u636e\u5e93\u64ad\u79cd","text":"<p>\u524d\u9762\u6211\u4eec\u4f7f\u7528\u8ba4\u8bc1\u4e2d\u95f4\u4ef6\uff0c\u628a\u6240\u6709\u6d89\u53ca\u6570\u636e\u4fee\u6539\u7684API\u90fd\u4fdd\u62a4\u4e86\u8d77\u6765\uff0c\u4f46\u4e5f\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\u3002</p> <p>\u8bd5\u60f3\u4e00\u4e0b\u6211\u4eec\u521a\u521b\u5efa\u6570\u636e\u5e93\uff0c\u4e00\u4e2a\u7528\u6237\u90fd\u8fd8\u6ca1\u6709\uff0c\u4f46\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u521b\u5efa\u65b0\u7528\u6237\u7684\u65f6\u5019\uff0cAPI\u9700\u8981\u6211\u4eec\u5148\u4ee5\u4e00\u4e2a\u5408\u6cd5\u7684\u7528\u6237\u6765\u767b\u5f55\u540e\u624d\u80fd\u8fdb\u884c\u521b\u5efa\u7528\u6237\u7684\u64cd\u4f5c\uff0c\u4f46\u73b0\u5728\u6570\u636e\u5e93\u91cc\u6ca1\u6709\u4efb\u52a1\u6388\u6743\u7528\u6237\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u8ba4\u8bc1\u4e00\u5b9a\u4f1a\u5931\u8d25\uff0c\u56e0\u6b64\u4e5f\u5c31\u65e0\u6cd5\u521b\u5efa\u65b0\u7684\u7528\u6237\uff0c\u6570\u636e\u5e93\u5b8c\u5168\u6ca1\u6709\u529e\u6cd5\u4f7f\u7528\u3002</p> <p>\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u8fd0\u884c\u521b\u5efa\u6570\u636e\u5e93\u7684\u65f6\u5019\u5f80\u91cc\u9762\u585e\u4e00\u4e2a\u5408\u6cd5\u7528\u6237\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u89c1\u5230\u7684\u7ba1\u7406\u5458\u5e10\u6237\u3002</p> <p>User.swift Swift<pre><code>...\nstruct AdminUser: Migration {\n    typealias Database = PostgreSQLDatabase\n\n    static func prepare(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        let password = try? BCrypt.hash(\"password\")\n        guard let hashPassword = password else {\n            fatalError(\"Failed Create Admin User!\")\n        }\n\n        let user = User(name: \"admin\", username: \"admin\", password: hashPassword)\n        return user.save(on: conn).transform(to: ())\n    }\n\n    static func revert(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return .done(on: conn)\n    }\n}\n</code></pre></p> <p>configure.swift Swift<pre><code>...\n    var migrations = MigrationConfig()\n    migrations.add(model: User.self, database: .psql)\n    migrations.add(model: Token.self, database: .psql)\n    migrations.add(model: Acronym.self, database: .psql)\n    migrations.add(model: Category.self, database: .psql)\n    migrations.add(model: AcronymCategoryPivot.self, database: .psql)\n    migrations.add(migration: AdminUser.self, database: .psql)\n    services.register(migrations)\n...\n</code></pre></p>"},{"location":"server/deploy-private/","title":"\u90e8\u7f72\u5230\u81ea\u5df1\u7684\u4e91\u670d\u52a1\u5668","text":"<p>Vapor Cloud\u662f\u5f88\u65b9\u4fbf\u90e8\u7f72\u7684\uff0c\u4f46\u662f\u968f\u65f6\u53ef\u80fd\u4f1a\u53d8\u6210\u6536\u8d39\u7684\u3002\u5047\u548c\u4f60\u81ea\u5df1\u5df2\u7ecf\u6295\u8d44\u5165\u624b\u4e86\u4e91\u670d\u52a1\u5668\uff0c\u5b8c\u6210\u53ef\u4ee5\u628a\u9879\u76ee\u653e\u5728\u81ea\u5df1\u7684\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u3002</p> <p>\u9996\u5148\u5728ubuntu\u4e0a\u5b89\u88c5Docker\uff0c\u4e4b\u540e\u7528docker\u5b89\u88c5\u6570\u636e\u5e93\u5bb9\u5668\uff0c\u539f\u7406\u4e0e\u524d\u8ff0\u4e00\u81f4\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u53ea\u5728\u670d\u52a1\u5668\u4e0a\u672c\u5730\u4f7f\u7528\uff0c\u6240\u6709\u4e0d\u9700\u8981\u66b4\u9732\u7ed9\u5916\u9762\u4f7f\u7528</p> <p>Bash<pre><code>$ sudo apt-get update\n$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s  http://f1361db2.m.daocloud.io\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n$ docker run --name postgres \\\n-e POSTGRES_DB=vapor \\\n-e POSTGRES_USER=vapor \\\n-e POSTGRES_PASSWORD=password \\\n-p 5432:5432 \\\n-d postgres\n$ docker run --name postgres-test \\\n-e POSTGRES_DB=vapor-test \\\n-e POSTGRES_USER=vapor \\\n-e POSTGRES_PASSWORD=password \\\n-p 5433:5432 \\\n-d postgres\n$ vapor run --hostname=0.0.0.0 --port=8080\n</code></pre> \u4e91\u670d\u52a1\u5668\u9700\u8981\u5f00\u7aef\u53e3\u6743\u9650\uff0c\u57df\u540d\u9700\u8981\u914d\u7f6e\u89e3\u6790\uff0c\u4f7f\u7528nginx\u8fdb\u884c\u7aef\u53e3\u8f6c\u53d1</p> <p>\u6700\u7ec8\u5b8c\u6210API\u7684\u9879\u76ee\u5730\u5740: https://github.com/wangzhizhou/TILApp-BackEnd/releases/tag/1.0</p>"},{"location":"server/deploy-vapor-cloud/","title":"\u90e8\u7f72","text":"Bash<pre><code>$ vapor cloud deploy \napp: TILApp\ngit: https://github.com/wangzhizhou/TILApp-BackEnd.git\nenv: production\ndb: yes\nreplicas: 1\nreplica size: free\nbranch: master\nbuild: incremental\nCreating deployment [Done]\nConnecting to build logs ...\nWaiting in Queue [Done]\nCheckout branch 'master' [Done]\nVerifying base folder [Done]\nSelected swift version: 4.1.0 [Done]\nBuilding vapor (release) [Done]\nTrying to find executable [Done]\nFound executable: Run [Done]\nCreating container registry [Done]\nBuilding container [Done]\nPushing container to registry [Done]\nUpdating replicas [Done]\nDeployment succeeded: https://joker.vapor.cloud [Done]\nSuccessfully deployed.\n</code></pre>"},{"location":"server/deploy-vapor-cloud/#\u53d6\u6d88\u90e8\u7f72\u5e76\u5220\u9664","title":"\u53d6\u6d88\u90e8\u7f72\u5e76\u5220\u9664","text":"<p>\u9996\u5148\u9700\u8981\u628a\u90e8\u7f72\u7684\u673a\u5668\u6570\u53d8\u4e3a<code>0</code></p> Text Only<pre><code>$  vapor cloud deploy --replicas=0\n</code></pre> <p>\u7136\u540e\u5728Vapor\u4e91\u4e0a\u81ea\u5df1\u7684\u5e10\u53f7\u4e2d\uff0c\u4ece\u5185\u5230\u5916\u4e00\u7ea7\u4e00\u7ea7\u5220\u9664\u3002</p>"},{"location":"server/dev-env/","title":"\u5f00\u53d1\u73af\u5883","text":"<p>\u76ee\u524d\uff0cVapor \u7684\u5f00\u53d1\u73af\u5883\u4e3b\u8981\u662f\u5728 MacOS \u548c Ubuntu \u4e24\u4e2a\u5e73\u53f0\u90e8\u7f72\u3002</p> <p>MacOS\u5e73\u53f0\u4e0a\u53ef\u4ee5\u501f\u52a9Xcode\u8fd9\u4e2aIDE\u8fdb\u884c\u5f00\u53d1</p> <p>\u5728<code>MacOS</code>\u4f60\u8981\u5148\u5b89\u88c5\u597d<code>Xcode</code>\uff0cXcode\u5185\u7f6e\u6709<code>Swift</code>\u5f00\u53d1\u73af\u5883, <code>Vapor4</code>\u8981\u6c42Swift\u7248\u672c\u5728<code>5.2</code>\u53ca\u4ee5\u4e0a\u3002</p> <p>\u4f7f\u7528shell\u547d\u4ee4\u67e5\u770bSwift\u7248\u672c\uff1a Bash<pre><code>swift --version\n</code></pre></p> <p>\u4e0b\u9762\u662f<code>MacOS</code>\u548c<code>Ubuntu</code>\u4e24\u4e2a\u7cfb\u7edf\u5e73\u53f0\u4e0a\u90e8\u7f72Vapor\u5f00\u53d1\u73af\u5883\u7684\u5177\u4f53\u6b65\u9aa4\uff1a</p> MacOSUbuntu <ol> <li>\u5148\u4ece<code>App Store</code>\u5b89\u88c5\u5f00\u53d1\u5de5\u5177Xcode(Swift\u5f00\u53d1\u73af\u5883)</li> <li>\u518d\u5230Homebrew\u5b98\u7f51\uff0c\u5b89\u88c5Homebrew\u5305\u7ba1\u7406\u5668 Bash<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></li> <li>\u4f7f\u7528Homebrew\u5305\u7ba1\u7406\u5668\u5b89\u88c5Vapor\u5f00\u53d1\u5de5\u5177 Bash<pre><code>brew install vapor\n</code></pre></li> </ol> <p>1.\u6d4f\u89c8<code>Swift</code>\u5b98\u7f51\uff0c\u6309\u7167\u5b98\u65b9\u6307\u5bfc\uff0c\u4e0b\u8f7dSwift\u5de5\u5177\u94fe\u5e76\u5b89\u88c5\u5f00\u53d1\u73af\u5883\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\u67e5\u770bswift\u7248\u672c\u53f7\uff1a<code>swift --version</code></p> <p>2.\u4ece\u6e90\u7801\u5b89\u88c5Vapor Bash<pre><code>git clone https://github.com/vapor/toolbox.git\ncd toolbox\ngit checkout &lt;desired version&gt;\nmake install\n</code></pre></p> <p>\u68c0\u67e5Vapor\u662f\u5426\u5b89\u88c5\u6210\u529f Bash<pre><code>vapor --help\n</code></pre></p> <p>\u6267\u884c\u5b8c\u4e0a\u9762\u7684\u6b65\u9aa4\uff0c<code>Vapor</code>\u7684\u5f00\u53d1\u73af\u5883\u5c31\u5e03\u7f6e\u5b8c\u6210\u4e86\u3002</p> <p>\u5982\u679c\u4f60\u7684\u5f00\u53d1\u5e73\u53f0\u662fMacOS\uff0c\u5efa\u8bae\u4f7f\u7528Xcode\u4f5c\u4e3a\u5f00\u53d1\u5de5\u5177\u3002\u76ee\u524d\u5728Ubuntu\u4e0a\u8fd8\u6ca1\u6709\u5bf9Swift\u652f\u6301\u6bd4\u8f83\u597d\u7684IDE\uff0c\u53ef\u4ee5\u4f7f\u7528Visual Studio Code\u5b89\u88c5Swift\u63d2\u4ef6\u7684\u65b9\u5f0f\u8fdb\u884c\u5f00\u53d1\uff0c\u547d\u4ee4\u884c\u4e0b\u4e5f\u53ef\u4ee5\u4f7f\u7528Vim\u7f16\u8f91\u5668\u8fdb\u884cSwift\u76f8\u5173\u5f00\u53d1\u3002</p> Xcode(MacOS)Visual Studio Code(\u901a\u7528)Vim(\u547d\u4ee4\u884cIDE) <p>\u53ea\u9700\u8981\u5728Vapor\u521b\u5efa\u7684\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c\u547d\u4ee4\uff0c\u5373\u53ef\u6253\u5f00Xcode\u5de5\u7a0b\u8fdb\u884c\u5f00\u53d1 Bash<pre><code>cd HelloVapor\nvapor xcode   # \u4e5f\u53ef\u4ee5\u4f7f\u7528 open Package.swift \u7684\u65b9\u5f0f\u8ba9Xcode\u6253\u5f00SPM\u9879\u76ee\u5de5\u7a0b\n</code></pre></p> <ol> <li>\u672c\u5730\u9700\u8981\u5148\u5b89\u88c5\u597dSwift\u73af\u5883</li> <li>\u5b89\u88c5 Visual Studio Code</li> <li>\u5b89\u88c5 Visual Studio Code \u63d2\u4ef6\uff1asswg.swift-lang\uff0c\u63d2\u4ef6\u7684\u76f8\u5173\u6587\u6863\u53ef\u4ee5\u53c2\u8003\uff1aREADME</li> <li>\u4f7f\u7528 Visual Studio Code \u6253\u5f00Vapor\u5de5\u7a0b\u6839\u76ee\u5f55</li> <li>\u8fd0\u884c\u3001\u6253\u65ad\u70b9\u3001\u8c03\u8bd5\u53ef\u4ee5\u76f4\u63a5\u6309\u5e38\u89c4\u64cd\u4f5c\u8fdb\u884c</li> </ol> <p>TODO: \u6dfb\u52a0Vim\u914d\u7f6eSwift\u5f00\u53d1\u73af\u5883</p> <p>Swift\u5f00\u53d1\u73af\u5883\u548cVapor\u5de5\u5177\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4e0b\u4e00\u6b65\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u5f00\u53d1\u4e86\u3002\ud83d\ude43\ud83d\ude43\ud83d\ude43</p>"},{"location":"server/error-fix/","title":"\u6392\u9519","text":"<p>\u4f7f\u7528Xcode\u5f00\u53d1\u65f6\uff0c\u5982\u679c\u627e\u4e0d\u5230\u6587\u4ef6\u6216\u8005\u9879\u76ee\u914d\u7f6e\u51fa\u9519\u65f6\u5c1d\u8bd5\u91cd\u65b0\u751f\u6210Xcode\u9879\u76ee</p> Bash<pre><code>vapor clean --swiftpm &amp;&amp; vapor xcode \n</code></pre> <p>\u5b8c\u5168\u627e\u4e0d\u5230\u9519\u8bef\u539f\u56e0\u65f6\u5c1d\u8bd5\u5168\u90e8\u6e05\u7406\u91cd\u65b0\u7f16\u8bd1\u8fd0\u884c</p> <ol> <li> <p>Xcode\u4e2d\u4f7f\u7528 Cmd+Shift+K \u6e05\u7a7a\u7f16\u8bd1\u4ea7\u7269</p> </li> <li> <p>\u6e05\u7a7a\u7f16\u8bd1\u4e2d\u95f4\u4ea7\u7269 Bash<pre><code>vapor clean\n</code></pre></p> </li> <li> <p>\u6e05\u7a7a\u6240\u6709\u4ea7\u7269 Bash<pre><code>vapor clean --update --global --swiftpm\n</code></pre> \u6216\u8005 Bash<pre><code>vapor clean -u -g -s\n</code></pre></p> </li> </ol> <p>\u6c42\u52a9\u4ed6\u4eba</p> <p>Vapor\u5728Discord Channel\u4e0a\u6709\u9891\u9053\u53ef\u4ee5\u6c42\u52a9\u3002\u4f46Discord\u5728\u4e2d\u56fd\u5b8c\u5168\u88ab\u5899\u6389\u4e86\uff0c\u8fd9\u4e5f\u5bf9\u4e8eVapor\u7684\u6d41\u884c\u8d77\u5230\u4e86\u4e00\u5b9a\u7684\u963b\u788d\u4f5c\u7528\u3002\u5982\u679c\u6709\u8bbf\u95ee\u56fd\u9645\u4e92\u8054\u7f51\u7684\u624b\u6bb5\uff0c\u7ffb\u5899\u540e\u53ef\u4ee5\u4e0b\u8f7d<code>Discord</code>\uff0c\u5e76\u8fdb\u5165\u9891\u9053</p> <p>TODO: \u4e3a\u4e86\u66f4\u597d\u7684\u8fdb\u884cVapor\u5b66\u4e60\u4ea4\u6d41\uff0c\u4e5f\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u8ba8\u8bba\u7fa4</p>"},{"location":"server/fluent-query/","title":"Fluent\u67e5\u8be2\u64cd\u4f5c","text":"<p>\u9700\u8981<code>import Fluent</code></p>"},{"location":"server/fluent-query/#filter","title":"Filter","text":"<p>http://localhost:8080/api/acronyms/search?term={searchItem} </p> Swift<pre><code>router.get(\"api\", \"acronyms\", \"search\") { (req) -&gt; Future&lt;[Acronym]&gt; in\n    guard let searchItem = req.query[String.self, at: \"term\"] else {\n        throw Abort(.badRequest)\n    }\n    return Acronym.query(on: req)\n    .filter(\\.short == searchItem)\n    .all()\n}\n</code></pre> Swift<pre><code>router.get(\"api\", \"acronyms\", \"search\") { (req) -&gt; Future&lt;[Acronym]&gt; in\n    guard let searchItem = req.query[String.self, at: \"term\"] else {\n        throw Abort(.badRequest)\n    }\n    return Acronym.query(on: req).group(.or) { (or) in\n        or.filter(\\.short == searchItem)\n        or.filter(\\.long == searchItem)\n    }\n    .all()\n}\n</code></pre>"},{"location":"server/fluent-query/#first","title":"First","text":"Swift<pre><code>router.get(\"api\",\"acronyms\",\"first\") { (req) -&gt; Future&lt;Acronym&gt; in\n    return Acronym.query(on: req).first().map(to: Acronym.self) { (acronym)  in\n        guard let acronym = acronym else {\n            throw Abort(.notFound)\n        }\n        return acronym\n    }\n}\n</code></pre> <p>\u6216\u8005\u66f4\u7b80\u5355\u4e00\u70b9\u5c31\u662f\uff1a </p> Swift<pre><code>func firstHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt; {\n    return Acronym.query(on: req).first().unwrap(or: Abort(.notFound))\n}\n</code></pre>"},{"location":"server/fluent-query/#sort","title":"Sort","text":"Swift<pre><code>router.get(\"api\",\"acronyms\",\"sorted\") { (req) -&gt; Future&lt;[Acronym]&gt; in\n    return Acronym.query(on: req).sort(\\.short, .ascending).all()\n}\n</code></pre>"},{"location":"server/http-basic/","title":"HTTP\u57fa\u7840","text":"<p>HTTP \u534f\u8bae</p> <p>HTTP(Hyper Text Transfer Protocol)\u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff0c\u662fWeb\u7684\u57fa\u7840\u5185\u5bb9\u3002</p> <p>\u6709\u4e24\u4e2a\u5b9e\u4f53\uff1a\u5ba2\u6237\u7aef(Client)\u3001\u670d\u52a1\u7aef(Server)</p> <p>\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8bf7\u6c42\uff0c\u7d22\u8981\u8d44\u6e90\u3002\u670d\u52a1\u7aef\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9700\u8981\u7684\u8d44\u6e90\u3002\u5982\u679c\u670d\u52a1\u7aef\u6ee1\u8db3\u4e0d\u4e86\u5ba2\u6237\u7aef\u7684\u9700\u8981\uff0c\u9700\u8981\u8fd4\u56de\u76f8\u5173\u7684\u8bf4\u660e\u3002</p> <p>HTTP \u53c2\u8003\u6587\u6863</p>"},{"location":"server/http-basic/#http-\u8bf7\u6c42request","title":"HTTP \u8bf7\u6c42(Request)","text":"<p>\u8bf7\u6c42\u5305\u542b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <p>HTTP 2.0</p> <p><code>HTTP 2.0</code>\u5728\u6548\u7387\u548c\u5ef6\u8fdf\u4e0a\u5bf9<code>HTTP 1.1</code>\u8fdb\u884c\u4e86\u6269\u5c55\uff0c\u5355\u4e2a\u7684\u8bf7\u6c42\u548c<code>HTTP 1.1</code>\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u4f46\u662f<code>HTTP 2.0</code>\u7684\u8bf7\u6c42\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u3002\u670d\u52a1\u5668\u53ef\u4ee5\u9884\u6d4b\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u4ece\u800c\u5728\u8bf7\u6c42\u8fd8\u6ca1\u6709\u53d1\u51fa\u7684\u60c5\u51b5\u4e0b\u628a\u5ba2\u6237\u7aef\u53ef\u80fd\u9700\u8981\u7684\u8d44\u6e90\u63d0\u524d\u63a8\u9001\u7ed9\u5ba2\u6237\u7aef\u3002 </p> <p>Vapor\u652f\u6301HTTP 1.1\u548cHTTP 2.0</p> <ul> <li> <p>\u8bf7\u6c42\u884c\u3002\u4f8b\u5982\uff1a <code>GET /about.html HTTP/1.1</code>, \u5b83\u6307\u5b9a\u4e86\u8bf7\u6c42\u7684\u65b9\u5f0f\u4e3a<code>GET</code>\uff0c\u8bf7\u6c42\u7684\u8d44\u6e90uri\u662f<code>/about.html</code>\u6587\u4ef6, \u4f7f\u7528\u7684\u4f20\u8f93\u534f\u8bae\u662f<code>HTTP</code>\uff0c\u4f20\u8f93\u534f\u8bae\u7684\u7248\u672c\u53f7\u662f<code>1.1</code></p> </li> <li> <p>\u4e3b\u673a\u540d\u3002\u53ef\u80fd\u6709\u591a\u4e2a\u670d\u52a1\u5668\u5171\u7528\u540c\u4e00\u4e2aIP\u5730\u5740\uff0c\u4e3a\u4e86\u533a\u522b\u5b83\u4eec\uff0c\u4e3b\u673a\u540d\u88ab\u7528\u6765\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002</p> </li> <li> <p>\u8bf7\u6c42\u5934\u3002\u5305\u542b\u8bf7\u6c42\u65f6\u6dfb\u52a0\u7684\u989d\u5916\u4fe1\u606f\uff1a<code>Authorization</code>\u3001 <code>Accept</code>\u3001<code>Cache-Control</code>\u3001<code>Content-Length</code>\u3001<code>Content-Type</code>\u7b49\u3002\u8bf7\u6c42\u5934\u662f\u952e-\u503c\u5bf9\u7684\u96c6\u5408\u3002</p> </li> <li> <p>\u53ef\u9009\u8bf7\u6c42\u6570\u636e\u3002\u4f8b\u5982\uff1a POST\u65b9\u5f0f\u8bf7\u6c42\u53ef\u4ee5\u643a\u5e26\u4e00\u4e9b\u8bf7\u6c42\u6570\u636e\u3002</p> </li> </ul> <p>\u5ba2\u6237\u7aef\u53d1\u8d77\u8bf7\u6c42\u65f6\u53ef\u4ee5\u7528\u591a\u79cd\u65b9\u5f0f\u8fdb\u884c\u9009\u62e9:</p> <ul> <li>GET</li> <li>HEAD</li> <li>POST</li> <li>PUT</li> <li>DELETE</li> <li>CONNECT</li> <li>OPTIONS</li> <li>TRACE</li> <li>PATCH</li> </ul> <p>Tip</p> <p>Web\u6d4f\u89c8\u5668\u53ea\u80fd\u4f7f\u7528GET\u548cPOST\u4e24\u79cd\u65b9\u5f0f\u7684\u8bf7\u6c42\uff0c\u5e76\u4e14\u4e0d\u80fd\u4fee\u6539\u8bf7\u6c42\u5934\uff0c\u8981\u4fee\u6539\u8bf7\u6c42\u5934\u53ea\u80fd\u4f9d\u8d56<code>java script</code>\u3002</p> <p>\u5176\u5b83\u5ba2\u6237\u7aef\u50cfiOS\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u7684HTTP\u8bf7\u6c42\u65b9\u5f0f\uff0c\u66f4\u52a0\u7075\u6d3b\u3002</p>"},{"location":"server/http-basic/#http-\u54cd\u5e94response","title":"HTTP \u54cd\u5e94(Response)","text":"<p>\u54cd\u5e94\u5305\u542b\u51e0\u4e2a\u90e8\u5206\uff1a </p> <p>HTTP\u54cd\u5e94\u7801</p> <ul> <li>\u6807\u51c6\u54cd\u5e94\u7801\u5217\u8868\u53c2\u8003</li> </ul> <ul> <li>\u72b6\u6001\u884c\u3002\u5305\u542b\u72b6\u6001\u7801\u3001\u534f\u8bae\u53ca\u5176\u7248\u672c\u53f7\u3001\u4fe1\u606f\u6587\u672c\u3002\u72b6\u6001\u7801\u548c\u72b6\u6001\u4fe1\u606f\u6587\u672c\u8868\u660e\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u7ed3\u679c\u662f\u5426\u6210\u529f\u3002\u72b6\u6001\u7801\u6309\u7b2c\u4e00\u4f4d\u6570\u5b57\u5206\u6210\u4e94\u7c7b\uff1a<ul> <li>1 - \u4fe1\u606f\u54cd\u5e94</li> <li>2 - \u8bf7\u6c42\u6210\u529f\uff0c\u6b63\u5e38\u8fd4\u56de\u3002\u4f8b\u5982\uff1a 200 OK\u3002 204\u8868\u793a\u8bf7\u6c42\u6210\u529f\uff0c\u4f46\u8fd4\u56de\u5185\u5bb9\u4e3a\u7a7a\u3002</li> <li>3 - \u91cd\u5b9a\u5411\u54cd\u5e94\u3002\u54cd\u5e94\u7684\u5185\u5bb9\u662f\u5728\u8bf7\u6c42\u6307\u5411\u7684\u670d\u52a1\u5668\u4e4b\u5916\u7684\u5176\u5b83\u670d\u52a1\u5668\u62ff\u5230\u540e\u8fd4\u56de\u7684\u3002</li> <li>4 - \u5ba2\u6237\u7aef\u8bf7\u6c42\u9519\u8bef\u3002418\u662f\u4e00\u4e2a\u8457\u540d\u7684\u72b6\u6001\u7801\uff0c\u6709\u7740\u7279\u6b8a\u7684\u610f\u4e49</li> <li>5 - \u670d\u52a1\u7aef\u9519\u8bef\u3002</li> </ul> </li> <li>\u54cd\u5e94\u5934\u3002\u4f8b\u5982: <code>Set-cookie</code>\u3001<code>WWW-Authenticate</code>\u3001<code>Cache-Control</code>\u3001<code>Content-Length</code>\u7b49\u3002\u54cd\u5e94\u5934\u4e0e\u8bf7\u6c42\u5934\u7c7b\u4f3c\uff0c\u4e5f\u662f\u7531\u952e\u503c\u5bf9(key-value)\u7ec4\u6210\u7684\u3002</li> <li>\u53ef\u9009\u54cd\u5e94\u4f53\u3002\u5e26\u7740\u54cd\u5e94\u8fd4\u56de\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662fHTML\u9875\u9762\u5185\u5bb9\u3001\u56fe\u7247\u6216\u8005JSON\u6570\u636e</li> </ul>"},{"location":"server/other-testcases/","title":"\u5176\u5b83\u6d4b\u8bd5\u7528\u4f8b","text":"<p>\u524d\u9762\u6211\u4eec\u53ea\u5199\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4e0b\u9762\u518d\u591a\u5199\u51e0\u4e2a\u7ec3\u7ec3\u624b</p> <p>UserTests.swift Swift<pre><code>...\n    func testUserCanBeSavedWithAPI() throws {\n\n        let user = User(name: usersName, username: usersUsername)\n\n        let receivedUser = try app.getResponse(to: usersURI,\n                                               method: .POST,\n                                               headers: [\"Content-Type\":\"application/json\"],\n                                               data: user,\n                                               decodeTo: User.self)\n\n        XCTAssertEqual(receivedUser.name, usersName)\n        XCTAssertEqual(receivedUser.username, usersUsername)\n        XCTAssertNotNil(receivedUser.id)\n\n        let users = try app.getResponse(to: usersURI,\n                                        decodeTo: [User].self)\n\n        XCTAssertEqual(users.count, 1)\n        XCTAssertEqual(users[0].name, usersName)\n        XCTAssertEqual(users[0].username, usersUsername)\n        XCTAssertEqual(users[0].id, receivedUser.id)\n    }\n\n    func testGettingASingleUserFromTheAPI() throws {\n\n        let user = try User.create(name: usersName, username: usersUsername, on: conn)\n\n        let receivedUser = try app.getResponse(to: \"\\(usersURI)\\(user.id!)\", decodeTo: User.self)\n\n        XCTAssertEqual(receivedUser.name, usersName)\n        XCTAssertEqual(receivedUser.username, usersUsername)\n        XCTAssertEqual(receivedUser.id, user.id)\n    }\n...\n</code></pre></p>"},{"location":"server/other-testcases/#\u6d4b\u8bd5user\u548cacronym","title":"\u6d4b\u8bd5User\u548cAcronym","text":"<p>Models+testable.swift Swift<pre><code>...\nextension Acronym {\n    static func create(\n        short: String = \"TIL\",\n        long: String = \"Today I Learned\",\n        user: User? = nil,\n        on connection: PostgreSQLConnection\n        ) throws -&gt; Acronym {\n        var acronymUser = user\n        if acronymUser == nil {\n            acronymUser = try User.create(on: connection)\n        }\n\n        let acronym = Acronym(short: short, long: long, userID: acronymUser!.id!)\n        return try acronym.save(on: connection).wait()\n    }\n}\n</code></pre></p> <p>UserTests.swift Swift<pre><code>   func testGettingAUsersAcronymsFromTheAPI() throws {\n        let user = try User.create(on: conn)\n\n        let acronymShort = \"OMG\"\n        let acronymLong = \"Oh My God\"\n\n        let acronym1 = try Acronym.create(short: acronymShort, long: acronymLong, user: user, on: conn)\n        _ = try Acronym.create(short: \"LOL\", long: \"Laugh Out Loud\", user: user, on: conn)\n\n        let acronyms = try app.getResponse(to: \"\\(usersURI)\\(user.id!)/acronyms\", decodeTo: [Acronym].self)\n\n        XCTAssertEqual(acronyms.count, 2)\n        XCTAssertEqual(acronyms[0].id, acronym1.id)\n        XCTAssertEqual(acronyms[0].short, acronymShort)\n        XCTAssertEqual(acronyms[0].long, acronymLong)\n    }\n</code></pre></p>"},{"location":"server/other-testcases/#\u6d4b\u8bd5acronym\u548ccategory","title":"\u6d4b\u8bd5Acronym\u548cCategory","text":"<p>Models+testable.swift Swift<pre><code>extension Category {\n    static func create(\n        name: String = \"Random\",\n        on connection: PostgreSQLConnection\n        ) throws -&gt; Category {\n        let category = Category(name: name)\n        return try category.save(on: connection).wait()\n    }\n}\n</code></pre></p> <p>\u6d4b\u8bd5\u7528\u4f8b\u6709\u70b9\u591a\uff0c\u5c31\u4e0d\u4e00\u4e00\u5199\u4e86\u3002\u53ef\u4ee5\u53c2\u770b\u5de5\u7a0b\u4ee3\u7801\u3002</p> <p></p>"},{"location":"server/parent-children-relation/","title":"\u7236\u5b50\u5173\u7cfb","text":"<p>\u7236\u5b50\u5173\u7cfb\u63cf\u8ff0\u4e00\u5bf9\u4e00\u6216\u8005\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u4f8b\u5982\uff1a \u4e00\u4e2a\u4eba\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u5ba0\u7269\uff0c\u4e00\u4e2a\u4eba\u4e5f\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u5ba0\u7269\uff0c\u4e00\u4e2a\u5ba0\u7269\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4eba\u3002\u8fd9\u6837\u7684\u5173\u7cfb\u5c31\u662f\u7236\u5b50\u5173\u7cfb\u3002\u5373\u4e00\u4e2a\u7236\u4eb2\u53ef\u4ee5\u7528\u591a\u4e2a\u5b50\u5973\uff0c\u4f46\u4e00\u4e2a\u5b50\u5973\u53ea\u80fd\u6709\u4e00\u4e2a\u7236\u4eb2\u3002</p>"},{"location":"server/parent-children-relation/#\u5b9a\u4e49\u7236\u5b50\u5173\u7cfb","title":"\u5b9a\u4e49\u7236\u5b50\u5173\u7cfb","text":"<p>\u56e0\u4e3a\u5b69\u5b50\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u7236\u4eb2\uff0c\u6240\u4ee5\u7ed9\u5b69\u5b50\u7684\u6570\u636e\u6a21\u578b\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6307\u5411\u7236\u4eb2\u7684\u5f15\u7528\uff0c\u5c31\u53ef\u4ee5\u5efa\u7acb\u7236\u5b50\u5173\u7cfb\u3002</p> <p>\u4ece\u5b50\u7684\u4e00\u8fb9\u5b9a\u4e49\u5c31\u53ef\u4ee5\u4e86, \u6dfb\u52a0\u4e86<code>userID: User.ID</code>\u5c5e\u6027\uff0c\u4fee\u6539\u521d\u59cb\u5316\u51fd\u6570\u3002\u66f4\u65b0<code>updateHandler</code></p> <p>Acronym.swift Swift<pre><code>final class Acronym: Codable {\n    var id: Int?\n    var short: String\n    var long: String\n\n    // \u4e00\u4e2a\u7528\u6237\u521b\u5efa\u4e00\u4e2a\u7f29\u7565\u8bed\n    var userID: User.ID\n\n    init(short: String, long: String, userID: User.ID) {\n        self.short = short\n        self.long = long\n        self.userID = userID\n    }\n}\n</code></pre></p> <p>AcronymsController.swift Swift<pre><code>func updateHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt; {\n    return try flatMap(to: Acronym.self, req.parameters.next(Acronym.self) req.content.decode(Acronym.self)) { (acronym, updateAcronym) - Future&lt;Acronym&gt; in\n        acronym.short = updateAcronym.short\n        acronym.long = updateAcronym.long\n        acronym.userID = updateAcronym.userID\n\n        return acronym.save(on: req)\n    }\n}\n</code></pre></p> <p>\u5173\u4e8e\u6570\u636e\u5e93\u66f4\u65b0</p> <p>\u56e0\u4e3a<code>Migration</code>\u53ea\u4f1a\u521b\u5efa\u4e00\u6b21\u6570\u636e\u8868\uff0c\u5982\u679c\u6570\u636e\u8868\u5df2\u7ecf\u521b\u5efa\uff0c\u90a3\u4e48\u4e4b\u540e\u5bf9\u6570\u636e\u6a21\u578b\u7684\u6539\u52a8\u4e0d\u4f1a\u5f15\u8d77\u6570\u636e\u8868\u7684\u66f4\u65b0\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u7f6e\u6570\u636e\u5e93\uff0c\u91cd\u65b0\u521b\u5efa\u6570\u636e\u8868\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\u662f\u5199\u6570\u636e\u5e93\u8fc1\u79fb\u89c4\u5219\uff0c\u90a3\u4e2a\u4f1a\u6d89\u53ca\u5230\u6570\u636e\u5e93\u8fc1\u79fb\uff0c\u76ee\u524d\u5c31\u662f\u5f3a\u52bf\u5220\u5e93\u91cd\u5efa\uff0c\u56e0\u4e3a\u76ee\u524d\u7684\u6570\u636e\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u8fd9\u4e48\u505a\u6700\u65b9\u4fbf\u3002</p>"},{"location":"server/parent-children-relation/#\u4ece\u5b69\u5b50\u4fa7\u83b7\u53d6\u7236\u6570\u636e","title":"\u4ece\u5b69\u5b50\u4fa7\u83b7\u53d6\u7236\u6570\u636e","text":"<p>\u7531\u4e8e\u6211\u4eec\u5728\u7f29\u7565\u8bcd\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u6dfb\u52a0\u4e86\u5b83\u6240\u5c5e\u7528\u6237\u7684id\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7<code>.parent</code>\u65b9\u6cd5\u6765\u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u7684\u7528\u6237\u6570\u636e\uff0c\u4ece\u800c\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u3002\u9700\u8981\u6dfb\u52a0\u4e00\u90e8\u5206\u4ee3\u7801\u7528\u6765\u83b7\u53d6\u7236\u4eb2\u7684\u4fe1\u606f</p> <p>Acronym.swift Swift<pre><code>...\n// \u83b7\u53d6\u7236\u5173\u7cfb\u6570\u636e\nextension Acronym {\n    var user: Parent&lt;Acronym, User&gt; { // User\u662fAcronym\u7684\u7236\u4eb2\n        return parent(\\.userID)\n    }\n}\n</code></pre></p> <p>AcronymsController.swift Swift<pre><code>routeGroup.get(Acronym.parameter, \"user\", use: getUserHandler)\n...\nfunc getUserHandler(_ req: Request) throws -&gt; Future&lt;User&gt; {\n    return try req.parameters.next(Acronym.self).flatMap(to: User.self) { (acronym) -&gt; Future&lt;User&gt; in\n        return acronym.user.get(on: req)\n    }\n }\n</code></pre></p>"},{"location":"server/parent-children-relation/#\u83b7\u53d6\u5b50\u6570\u636e","title":"\u83b7\u53d6\u5b50\u6570\u636e","text":"<p>\u4ece\u7236\u6570\u636e\u4e2d\u83b7\u53d6\u5b50\u6570\u636e\uff0c\u5728\u8fd9\u91cc\u5c31\u662f\u83b7\u53d6\u4e00\u4e2a\u7528\u6237\u521b\u5efa\u7684\u6240\u6709\u7f29\u7565\u8bcd</p> <p>User.swift Swift<pre><code>//\u83b7\u53d6\u5b50\u6570\u636e\u4fe1\u606f\nextension User {\n    var acronyms: Children&lt;User, Acronym&gt; { // Acronym\u662fUser\u7684\u5b69\u5b50\n        return children(\\.userID)\n    }\n}\n</code></pre></p> <p>UsersController.swift Swift<pre><code>usersGroup.get(User.parameter, \"acronyms\", use: getAcronymsHandler)\n...\nfunc getAcronymsHandler(_ req: Request) throws -&gt; Future&lt;[Acronym]&gt; {\n\n    return try req.parameters.next(User.self).flatMap(to: [Acronym].self)  (user) -&gt; Future&lt;[Acronym]&gt; in\n        return try user.acronyms.query(on: req).all()\n    }\n}\n</code></pre></p>"},{"location":"server/parent-children-relation/#\u5916\u952e\u7ea6\u675f","title":"\u5916\u952e\u7ea6\u675f","text":"<p>SQLite \u4e0d\u652f\u6301\u5916\u952e\u7ea6\u675f</p> <p>\u6dfb\u52a0\u5916\u952e\u7ea6\u675f\u4f7f\u7528PostgreSQL\u9a8c\u8bc1</p> <p>\u5916\u952e\u7ea6\u675f\u63cf\u8ff0\u4e24\u5f20\u8868\u4e4b\u95f4\u7684\u94fe\u63a5\u5173\u7cfb\uff0c\u5728\u6570\u636e\u6709\u6548\u6027\u9a8c\u8bc1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u3002\u4f7f\u7528\u5916\u952e\u7ea6\u675f\u6709\u4e0b\u9762\u7684\u597d\u5904\uff1a</p> <ul> <li>\u786e\u4fdd\u4e0d\u4f1a\u521b\u5efa\u51fauserID\u4e3a\u65e0\u6548\u7528\u6237\u7684\u7f29\u7565\u8bed</li> <li>\u5728\u5220\u9664\u7528\u6237\u521b\u5efa\u7684\u6240\u6709\u7f29\u7565\u8bed\u4e4b\u524d\u4e0d\u80fd\u5220\u9664\u8be5\u7528\u6237</li> <li>\u5728\u5220\u9664\u7f29\u7565\u8bed\u8868\u4e4b\u524d\u65e0\u6cd5\u5220\u9664\u7528\u6237\u8868</li> </ul> <p>\u5916\u952e\u7ea6\u675f\u9700\u8981\u5728<code>Migration</code>\u4e2d\u5b9a\u4e49, \u628a\u539f\u6765Acronym.swift\u4e2d\u5bf9Migration\u7684\u6269\u5c55\u6539\u5199\u5982\u4e0b\uff1a</p> <p>Swift<pre><code>// \u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u53ca\u5916\u952e\u7ea6\u675f\nextension Acronym: Migration {\n    static func prepare(on connection: SQLiteConnection) -&gt; Future&lt;Void&gt; {\n\n        // \u521b\u5efaAcronym\u5728\u6570\u636e\u5e93\u4e2d\u7684\u8868\n        return Database.create(self, on: connection) { (builder) in\n\n            // \u81ea\u52a8\u6dfb\u52a0Acronym\u6240\u6709\u5c5e\u6027\u5230\u6570\u636e\u8868\u4e2d\n            try addProperties(to: builder)\n\n            // \u8fd9\u4e00\u53e5\u6dfb\u52a0\u4e86Acronym.userID\u5230User.id\u7684\u5916\u952e\u7ea6\u675f\n            builder.reference(from: \\.userID, to: \\User.id)\n        }\n    }\n}\n</code></pre> \u540c\u65f6\u56e0\u4e3a\u6dfb\u52a0\u4e86Acronym\u5bf9User\u7684\u5916\u952e\u7ea6\u675f\uff0c\u6240\u4ee5User\u5bf9\u5e94\u7684\u8868\u5e94\u8be5\u5148\u4e8eAcronym\u8868\u521b\u5efa\uff0c\u6240\u4ee5\u9700\u8981\u8c03\u6574\u4e00\u4e2aconfiure.swift\u4e2d\u7684\u8868\u521b\u5efa\u987a\u5e8f\uff1a  Swift<pre><code>...\nvar migrations = MigrationConfig()\nmigrations.add(model: User.self, database: .sqlite)\nmigrations.add(model: Acronym.self, database: .sqlite)\nservices.register(migrations)\n</code></pre></p> <p>\u5220\u5e93\u91cd\u5efa</p> <p>\u56e0\u4e3a\u6570\u636e\u5e93\u4e2d\u8868\u7684\u5173\u7cfb\u6709\u53d8\u6362\uff0c\u5e76\u4e14\u8868\u53ea\u80fd\u521b\u5efa\u4e00\u6b21\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u5220\u5e93\u91cd\u5efa\uff0c\u5916\u952e\u7ea6\u675f\u5173\u7cfb\u662f\u4e0d\u4f1a\u751f\u6548\u7684\u3002\u76ee\u524d\u6211\u4eec\u8fd8\u6ca1\u6709\u5b66\u4e60\u6570\u636e\u5e93\u8fc1\u79fb\uff0c\u5e76\u4e14\u6211\u4eec\u7684\u6570\u636e\u91cf\u4e0d\u5927\u4e5f\u4e0d\u91cd\u8981\u3002\u6240\u4ee5\u4f7f\u7528\u5220\u5e93\u91cd\u5efa\u6765\u4f7f\u53d8\u6539\u751f\u6548\u3002\u6bcf\u6b21\u8868\u7ed3\u6784\u53d8\u5316\u6216\u5173\u7cfb\u53d8\u5316\uff0c\u90fd\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p>"},{"location":"server/project-structure/","title":"\u9879\u76ee\u7ed3\u6784","text":"<p>\u4e0a\u4e00\u8282\u6211\u4eec\u901a\u8fc7\u4f7f\u7528<code>vapor new</code>\u547d\u4ee4\uff0c\u4ee5\u901a\u7528api\u6a21\u677f\u521b\u5efa\u4e86\u4e00\u4e2a\u9879\u76ee<code>HelloVapor</code>\uff0c\u4e0b\u9762\u770b\u4e00\u4e0b\u6a21\u677f\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u4e86\u89e3\u5e94\u7528\u7684\u529f\u80fd\u6a21\u5757\u662f\u5982\u4f55\u5212\u5206\u7684\u3002</p> Bash<pre><code>$ pwd \n/Users/joker/Desktop/vapor/HelloVapor\n$ brew install tree\n$ tree .\n.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Package.resolved\n\u251c\u2500\u2500 Package.swift\n\u251c\u2500\u2500 Public\n\u251c\u2500\u2500 Sources\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 App\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Controllers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 configure.swift\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 routes.swift\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Run\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.swift\n\u251c\u2500\u2500 Tests\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 AppTests\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AppTests.swift\n\u2514\u2500\u2500 docker-compose.yml\n\n7 directories, 8 files\n</code></pre> <p>Vapor\u4f7f\u7528Swift Package Manager(SPM)\uff0c\u5b83\u662f\u4e00\u4e2a\u4f9d\u8d56\u7ba1\u7406\u7cfb\u7edf\uff0c\u7c7b\u4f3c\u4e8eiOS\u5e73\u53f0\u4e0a\u7684Cocoapods\uff0c\u7528\u6765\u914d\u7f6eVapor\u5e94\u7528\u9879\u76ee\u3002\u914d\u7f6e\u597d\u7684Vapor\u9879\u76ee\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528<code>swift</code>\u5de5\u5177\u94fe\u8fdb\u884c\u7f16\u8bd1\u94fe\u63a5\uff0c\u751f\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u6216\u8005\u4e09\u65b9\u5e93\u3002</p> <p>\u4e00\u4e2aSPM\u9879\u76ee\u5b9a\u4e49\u5728Package.swift\u6846\u67b6\u6587\u4ef6\u4e2d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86\u76ee\u6807(Target)\u3001\u4f9d\u8d56(Dependencies)\u4ee5\u53ca\u600e\u6837\u628a\u5b83\u4eec\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u9879\u76ee\u7684\u5e03\u5c40\u4e5f\u548c\u4f20\u7edf\u7684Xcode\u9879\u76ee\u6709\u6240\u4e0d\u540c\u3002</p> <p><code>Source</code>\u76ee\u5f55\u7528\u6765\u5b58\u653e\u6e90\u6587\u4ef6\uff0c<code>Package.swift</code>\u4e2d\u5b9a\u4e49\u7684\u6bcf\u4e00\u4e2a<code>Target</code>\u90fd\u5bf9\u5e94<code>Source</code>\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u5b50\u6a21\u5757\u76ee\u5f55\u3002\u6a21\u677f\u9879\u76ee\u4e2d\u58f0\u660e\u4e86\u4e24\u4e2a\u5b50\u6a21\u5757: <code>App</code>\u548c<code>Run</code>\u3002</p> <ul> <li><code>App</code>\u6a21\u5757\u4e0b\u5b58\u653e\u5e94\u7528\u4ee3\u7801\u903b\u8f91</li> <li><code>Run</code>\u6a21\u5757\u4e0b\u4ec5\u6709\u4e00\u4e2a<code>main.swift</code>\u6587\u4ef6\uff0c\u8fd9\u662fswift\u9879\u76ee\u8fd0\u884c\u65f6\u7684\u542f\u52a8\u5165\u53e3\u3002\u6211\u4eec\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u4fee\u6539<code>Run</code>\u6a21\u5757\u3002</li> </ul> <p><code>Tests</code>\u4e2d\u5b58\u653e\u6240\u6709\u7684\u6d4b\u8bd5\u5b50\u6a21\u5757\uff0c<code>Package.swift</code>\u4e2d\u5b9a\u4e49\u7684\u6bcf\u4e00\u4e2a<code>testTarget</code>\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u5b50\u6a21\u5757\uff0c\u4e00\u4e2a\u6d4b\u8bd5\u5b50\u6a21\u5757\u9488\u5bf9<code>Sources</code>\u4e2d\u7684\u4e00\u4e2a\u5e94\u7528\u5b50\u6a21\u5757\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p><code>Package.resolved</code>\u6587\u4ef6\u662f\u5bf9<code>Package.swift</code>\u4e2d\u63cf\u8ff0\u7684\u4f9d\u8d56\u5173\u7cfb\u89e3\u6790\u540e\u7684\u7ed3\u679c\uff0c\u7528\u6765\u4fdd\u5b58\u4f9d\u8d56\u6a21\u5757\u7684\u5177\u4f53\u4fe1\u606f\u3002</p> <p><code>Dockerfile</code>\u548c<code>docker-compose.yml</code>\u6587\u4ef6\u662f\u670d\u52a1\u8fd0\u884c\u4e8eDocker\u5bb9\u5668\u6240\u9700\u8981\u7684\u6784\u5efa\u914d\u7f6e\u6587\u4ef6\uff0c\u76ee\u524d\u53ef\u4e0d\u5fc5\u5173\u5fc3\u3002</p> <p>\u751f\u6210\u53ef\u4ee5\u5728Xcode\u4e2d\u8fdb\u884c\u5f00\u53d1\u7684vapor\u5de5\u7a0b</p> <p>\u4e4b\u524d\u8fd0\u884cVapor\u662f\u5728\u547d\u4ee4\u884c\u4e0b\u8fdb\u884c\u7684\uff0c\u5982\u679c\u6211\u4eec\u662f\u5728MacOS\u7cfb\u7edf\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Vapor\u751f\u6210Xcode\u5de5\u7a0b\u9879\u76ee\uff0c\u76f4\u63a5\u4f7f\u7528Xcode\u8fdb\u884cVapor\u5e94\u7528\u5f00\u53d1 Bash<pre><code>$ cd HelloVapor\n$ vapor xcode\nOpening project in Xcode.\n</code></pre> </p>"},{"location":"server/rest-api/","title":"REST API","text":"<p>REST</p> <ul> <li> <p>REST\u662f Representational State Transfer \u7684\u7f29\u5199\uff0c\u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u8d85\u5a92\u4f53\u7cfb\u7edf\u7684\u67b6\u6784\u98ce\u683c</p> </li> <li> <p>\u50cf\u5176\u5b83\u67b6\u6784\u98ce\u683c\u4e00\u6837\uff0c\u5b83\u6709\u81ea\u5df1\u7684\u89c4\u5219\u548c\u89c4\u8303\u3002\u5982\u679c\u4e00\u4e2aAPI\u670d\u52a1\u6ee1\u8db3REST\u67b6\u6784\u89c4\u8303\uff0c\u5c31\u53ef\u4ee5\u88ab\u79f0\u4e3a RESTful API</p> </li> <li> <p>\u901a\u8fc7\u4e00\u4e2aRESTful API\u6559\u7a0b\uff0c\u5177\u4f53\u4e86\u89e3REST\u67b6\u6784</p> </li> </ul> <p>\u9075\u5faaREST\u98ce\u683c\u7684API\u53ef\u4ee5\u548c\u6570\u636e\u5e93\u64cd\u4f5cCRUD(\u521b\u5efa\u3001\u67e5\u8be2\u3001\u66f4\u65b0\u3001\u5220\u9664)\u8054\u7cfb\u8d77\u6765\u3002REST\u98ce\u683c\u7684API\u53ef\u4ee5\u7528\u4e00\u79cd\u7edf\u4e00\u7684\u6a21\u5f0f\u6765\u64cd\u4f5c\u8d44\u6e90\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u5ba2\u6237\u7aef\u7684\u6784\u5efa\u8fc7\u7a0b\u3002</p> <p>\u4f8b\u5982\u8981\u5f00\u53d1\u4e00\u5957\u9996\u5b57\u6bcd\u7f29\u5199\u76f8\u5173\u7684API\uff0c\u9075\u5faaREST\u98ce\u683c\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a</p> <p>RESTful API\u5b9a\u4e49\u793a\u4f8b</p> <p>\u521b\u5efa</p> <ul> <li><code>POST /api/acronuyms/1</code>\uff0c\u521b\u5efa\u4e00\u4e2aID\u4e3a1\u7684\u9996\u5b57\u6bcd\u7f29\u5199</li> </ul> <p>\u67e5\u8be2</p> <ul> <li><code>GET /api/acronyms/</code>\uff0c\u83b7\u53d6\u5168\u90e8\u7684\u9996\u5b57\u6bcd\u7f29\u5199</li> <li><code>GET /api/acronyms/1</code>\uff0c\u83b7\u53d6ID\u4e3a1\u7684\u9996\u5b57\u6bcd\u7f29\u5199</li> </ul> <p>\u66f4\u65b0</p> <ul> <li><code>PUT /api/acronyms/1</code>\uff0c\u7528\u65b0\u7684\u5185\u5bb9\u66f4\u65b0ID\u4e3a1\u7684\u9996\u5b57\u6bcd\u7f29\u5199</li> </ul> <p>\u5220\u9664</p> <ul> <li><code>DELETE /api/acronyms/1</code>\uff0c\u5220\u9664ID\u4e3a1\u7684\u9996\u5b57\u7ebf\u7f29\u5199</li> </ul> <p>\u901a\u8fc7API\u7684\u63a5\u53e3\u5b9a\u4e49\u5c31\u53ef\u4ee5\u6e05\u695a\u7684\u4e86\u89e3API\u7684\u5177\u4f53\u529f\u80fd\u4f5c\u7528\uff0c\u63a5\u53e3\u5b9a\u4e49\u4e5f\u6bd4\u8f83\u89c4\u8303\u548c\u6574\u6d01\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u6ce8\u91ca\u5c31\u53ef\u4ee5\u7406\u89e3</p>"},{"location":"server/return-json/","title":"\u8fd4\u56deJSON\u6570\u636e","text":"<p>Content\u534f\u8bae\u4e5f\u53ef\u4ee5\u7f16\u7801\u7ed3\u6784\u4f53\u6210\u4e3aJSON\u6570\u636e\uff0c\u5728\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u9075\u5faaContent\u534f\u8bae\u7684\u7ed3\u6784\u4f53InfoResponse\uff0c\u4f7f\u7528\u8bf7\u6c42\u6570\u636e\u521d\u59cb\u5316\u4e00\u4e2a\u54cd\u5e94\u7ed3\u6784\u4f53\u5bf9\u8c61\uff0c\u76f4\u63a5\u8fd4\u56de\uff0cJSON\u7f16\u7801\u4f1a\u81ea\u52a8\u5b8c\u6210\uff0c\u5e76\u8fd4\u56deJSON\u6570\u636e\u7ed9\u7528\u6237\u3002</p> \u8fd4\u56deJSON\u6570\u636e Swift<pre><code>import Vapor\n\nfunc routes(_ app: Application) throws {\n    app.get { req in\n        return \"It works!\"\n    }\n\n    app.get(\"hello\") { req -&gt; String in\n        return \"Hello, world!\"\n    }\n\n    // Add Routes\n    app.get(\"hello\", \":name\") { req -&gt; String in\n        guard let name = req.parameters.get(\"name\", as: String.self) else {\n            return \"\\(HTTPStatus.notFound)\"\n        }\n        return \"Hello, \\(name)\"\n    }\n    // ---\n    app.post(\"info\") { (req) -&gt; InfoResponse in\n        let info = try req.content.decode(InfoData.self)\n\n        let response = InfoResponse(requestData: info)\n        return response\n    }\n\n}\n\n\nstruct InfoData: Content {\n    let name: String\n}\n\nstruct InfoResponse: Content {\n    let requestData: InfoData\n}\n</code></pre> CURLRested(Deprecated) curl\u6d4b\u8bd5\u547d\u4ee4<pre><code>curl http://localhost:8080/info \\\n-X POST \\\n-H \"content-type:application/json\" \\\n-d '{\"name\":\"joker\"}' \n</code></pre> Bash<pre><code>{\"requestData\":{\"name\":\"joker\"}}\n</code></pre> <p>\u5982\u679c\u60f3\u683c\u5f0f\u5316\u8f93\u5165\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528<code>jq</code>\u5de5\u5177\u547d\u4ee4</p> <p>Tip</p> <ul> <li><code>jq</code>\u8fd9\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u7cfb\u7edf\u53ef\u80fd\u6ca1\u6709\u81ea\u5e26</li> <li>MacOS\u53ef\u4ee5\u4f7f\u7528<code>brew install jq</code>\u8fdb\u884c\u5b89\u88c5</li> <li>Ubuntu\u53ef\u4ee5\u4f7f\u7528<code>sudo apt-get install jq -y</code>\u8fdb\u884c\u5b89\u88c5</li> </ul> Bash<pre><code>curl -s http://localhost:8080/info \\\n-X POST \\\n-H \"content-type:application/json\" \\\n-d '{\"name\":\"joker\"}' | jq\n</code></pre> JSON<pre><code>{\n    \"requestData\": {\n        \"name\": \"joker\"\n    }\n}\n</code></pre> <p>\u4f7f\u7528<code>resetd</code>\u5e94\u7528\u6d4b\u8bd5\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"server/sibiling-relation/","title":"\u5144\u5f1f\u5173\u7cfb","text":"<p>\u5144\u5f1f\u5173\u7cfb\u662f\u7528\u6765\u63cf\u8ff0\u4e24\u4e2a\u6570\u636e\u6a21\u578b\u95f4\u76f8\u4e92\u94fe\u63a5\u5173\u7cfb\u7684\u3002\u4e5f\u53eb\u4f5c\u591a\u5bf9\u591a\u5173\u7cfb\u3002\u5728\u5144\u5f1f\u5173\u7cfb\u95f4\u4e0d\u5b58\u5728\u7ea6\u675f\u3002\u6211\u4eec\u8fd9\u4e00\u90e8\u5206\u8981\u7ed9\u7f29\u7565\u8bed\u6dfb\u52a0\u7c7b\u522b\uff0c\u90a3\u4e48\u4e00\u4e2a\u7f29\u7565\u8bed\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u522b\uff0c\u4e00\u4e2a\u7c7b\u522b\u4e5f\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u7f29\u7565\u8bed\uff0c\u8fd9\u5c31\u662f\u4e00\u79cd\u5144\u5f1f\u5173\u7cfb\uff0c\u5373\u591a\u5bf9\u591a\u5173\u7cfb\u3002</p> <p>\u4e4b\u524d\u7684\u7236\u5b50\u5173\u7cfb\u4e2d\uff0c\u6211\u4eec\u5728Acronym\u4e2d\u6dfb\u52a0\u4e86User\u7684\u4e3b\u952e\u4f5c\u4e3a\u5916\u952e\uff0c\u5728\u5144\u5f1f\u5173\u7cfb\u4e2d\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4f1a\u6709\u6548\u7387\u95ee\u9898\u3002\u5982\u679c\u6bcf\u4e00\u4e2a\u7c7b\u522b\u4e0b\u6709\u591a\u4e2a\u7f29\u7565\u8bed\uff0c\u5982\u679c\u8981\u67e5\u8be2\u67d0\u4e2a\u7f29\u7565\u8bed\u5c5e\u4e8e\u591a\u5c11\u4e2a\u7c7b\u522b\uff0c\u5c31\u9700\u8981\u67e5\u8be2\u6240\u6709\u7684\u7c7b\u522b\u3002\u5982\u679c\u6bcf\u4e2a\u7f29\u7565\u8bed\u4e0b\u6709\u5b83\u5c5e\u4e8e\u7684\u6240\u6709\u7c7b\u522b\uff0c\u90a3\u4e2a\u67e5\u8be2\u67d0\u4e2a\u7c7b\u522b\u4e0b\u6709\u591a\u5c11\u4e2a\u7f29\u7565\u8bed\u5c31\u9700\u8981\u67e5\u8be2\u6240\u6709\u7f29\u7565\u8bed\uff0c\u8fd9\u5f88\u660e\u663e\u6709\u6548\u7387\u95ee\u9898\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u62bd\u8c61\u51fa\u53e6\u5916\u4e00\u79cd\u6570\u636e\u6a21\u578b\u6765\u8bb0\u5f55\u7c7b\u522b\u548c\u7f29\u7565\u8bed\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u8fd9\u4e2a\u62bd\u8c61\u51fa\u7684\u6570\u636e\u6a21\u578b\u53eb\u4f5c\u652f\u70b9(pivot), \u4e5f\u5c31\u662f\u65b0\u5efa\u4e00\u4e2a\u8868\u6765\u8bb0\u5f55\u5bf9\u5e94\u5173\u7cfb\uff0c\u662f\u4e00\u79cd\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u65b9\u6cd5\u3002\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u652f\u70b9\u6570\u636e\u6a21\u578b\u6587\u4ef6\uff1a</p> <p>AcronymCategoryPivot.swift Swift<pre><code>//\n//  AcronymCategoryPivot.swift\n//  App\n//\n//  Created by joker on 2018/10/22.\n//\n\nimport FluentPostgreSQL\nimport Foundation\n\nfinal class AcronymCategoryPivot: PostgreSQLUUIDPivot, ModifiablePivot {\n\n    var id: UUID?\n    var acronymID: Acronym.ID\n    var categoryID: Category.ID\n\n    typealias Left = Acronym\n    typealias Right = Category\n\n\n    static let leftIDKey: LeftIDKey = \\.acronymID\n    static let rightIDKey: RightIDKey = \\.categoryID\n\n    init(_ acronym: Acronym, _ category: Category) throws {\n        self.acronymID = try acronym.requireID()\n        self.categoryID = try category.requireID()\n    }\n}\n\nextension AcronymCategoryPivot: Migration {}\n</code></pre></p> <p>configure.swift Swift<pre><code>migrations.add(model: AcronymCategoryPivot.self, database: .psql)\n</code></pre></p>"},{"location":"server/sibiling-relation/#acronym\u4fa7","title":"Acronym\u4fa7","text":"<p>Aronym.swift Swift<pre><code>// \u83b7\u53d6\u5144\u5f1f\u5173\u7cfb\u6570\u636e\nextension Acronym {\n    var categories: Siblings&lt;Acronym, Category, AcronymCategoryPivot&gt; {\n        return siblings()\n    }\n}\n</code></pre></p> <p>AcronymsController.swift Swift<pre><code>routeGroup.post(Acronym.parameter,\"categories\", Category.parameter, use: addCategoriesHandler)\nrouteGroup.delete(Acronym.parameter, \"categories\", Category.parameter, use: removeCategoriesHandler)\nrouteGroup.get(Acronym.parameter, \"categories\", use: getCagtegoriesHandler)\n...\nfunc addCategoriesHandler(_ req: Request) throws -&gt; Future&lt;HTTPStatus&gt; {\n    return try flatMap(to: HTTPStatus.self,\n                       req.parameters.next(Acronym.self),\n                       req.parameters.next(Category.self)) { (acronym, category) in\n                        return acronym\n                            .categories\n                            .attach(category, on: req)\n                            .transform(to: HTTPStatus.created)\n    }\n}\n\nfunc removeCategoriesHandler(_ req: Request) throws -&gt; Future&lt;HTTPStatus&gt; {\n    return try flatMap(to: HTTPStatus.self, req.parameters.next(Acronym.self), req.parameters.net(Category.self)) { (acronym, category) in\n        return  acronym.categories.detach(category, on: req).transform(to: HTTPStatus.noContent)\n    }\n}\n\nfunc getCagtegoriesHandler(_ req: Request) throws -&gt; Future&lt;[Category]&gt; {\n    return try req.parameters.next(Acronym.self).flatMap(to: [Category].self) { (acronym) in\n        return try acronym.categories.query(on: req).all()\n    }\n}\n</code></pre></p>"},{"location":"server/sibiling-relation/#category\u4fa7","title":"Category\u4fa7","text":"<p>Category.swift Swift<pre><code>extension Category {\n    var acronyms: Siblings&lt;Category, Acronym, AcronymCategoryPivot&gt; {\n        return siblings()\n    }\n}\n</code></pre></p> <p>CategoriesController.swift Swift<pre><code>categoriesRoute.get(Category.parameter,\"acronyms\",use: getAcronymsHandler)\n...\nfunc getAcronymsHandler(_ req: Request) throws -&gt; Future&lt;[Acronym]&gt; {\n    return try req.parameters.next(Category.self).flatMap(to: [Acronym].self) { (category) in\n        return try category.acronyms.query(on: req).all()\n    }\n}\n</code></pre></p>"},{"location":"server/sibiling-relation/#acronymcategorypivot\u4fa7\u5916\u952e\u7ea6\u675f\u6dfb\u52a0","title":"AcronymCategoryPivot\u4fa7\u5916\u952e\u7ea6\u675f\u6dfb\u52a0","text":"<p>AcronymCategoryPivot.swift Swift<pre><code>...\nextension AcronymCategoryPivot: Migration {\n    static func prepare(on connection: PostgreSQLDatabase.Connection) -&gt; Future&lt;Void&gt; {\n        return Database.create(self, on: connection) { (builder) in\n            try addProperties(to: builder)\n\n            builder.reference(from: \\.acronymID, to: \\Acronym.id, onDelete: .cascade)\n            builder.reference(from: \\.categoryID, to: \\Category.id, onDelete: .cascade)\n        }\n    }\n}\n...\n</code></pre> <code>onDelete</code>\u53c2\u6570\u662f<code>.cascade</code>\uff0c\u8868\u793a\u5220\u9664\u6570\u636e\u65f6\u7ea7\u8054\u7684\u628a\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u4e5f\u4e00\u5e76\u5220\u9664\uff0c\u4ee5\u907f\u514d\u62a5\u9519\u3002</p>"},{"location":"server/sibiling-relation/#\u91cd\u7f6e\u6570\u636e\u5e93","title":"\u91cd\u7f6e\u6570\u636e\u5e93","text":"Bash<pre><code>$ docker stop postgresql\n$ docker rm postgresql\n$ docker run --name postgres -e POSTGRES_DB=vapor \\\n  -e POSTGRES_USER=vapor -e POSTGRES_PASSWORD=password \\\n  -p 5432:5432 -d postgres\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9879\u76eeTILApp-BackEnd\u4e2d\u7684\u811a\u672c\u6765\u91cd\u7f6e\u6570\u636e\u5e93:</p> Bash<pre><code>$ ./database-config-mac.sh -r\n</code></pre>"},{"location":"server/swift-nio/","title":"SwiftNIO \u6982\u8ff0","text":"<p>Info</p> <p>Vapor\u662f\u57fa\u4e8e SwiftNIO \u6784\u5efa\u7684\uff0c\u6240\u4ee5\u6700\u597d\u8fd8\u662f\u5bf9\u5b83\u8fdb\u884c\u4e00\u4e9b\u4e86\u89e3\uff0c\u4e0d\u8fc7\u8fd9\u4e5f\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u5982\u679c\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\u3002\u4e0d\u611f\u5174\u8da3\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u672c\u9875\u5185\u5bb9\u3002</p> <p>SwiftNIO \u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u5f02\u6b65\u4e8b\u4ef6\u9a71\u52a8\u7684\u7f51\u7edc\u5e94\u7528\u6846\u67b6\uff0c\u57fa\u4e8e\u5b83\u53ef\u4ee5\u5feb\u901f\u5f00\u53d1\u9ad8\u6027\u80fd\u53ef\u7ef4\u62a4\u7684\u534f\u8bae\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u3002SwiftNIO\u662fSwift\u751f\u6001\u4e2d\u7b49\u4ef7\u4e8eJava\u751f\u6001\u4e0b Netty \u7684\u5b58\u5728\u3002</p>"},{"location":"server/swift-nio/#\u7b80\u4ecb","title":"\u7b80\u4ecb","text":"<p>SwiftNIO \u662f\u4f7f\u7528Swift\u8bed\u8a00\u6784\u5efa\u9ad8\u6027\u80fd\u7f51\u7edc\u5e94\u7528\u7684\u57fa\u7840\u5c42\u5de5\u5177\u3002\u4e3b\u8981\u662f\u9488\u5bf9\u90a3\u4e9b\u4f7f\u7528<code>\u6bcf\u4e2a\u7f51\u7edc\u94fe\u63a5\u5bf9\u5e94\u4e00\u4e2a\u7ebf\u7a0b</code>\u7684\u5e76\u53d1\u6a21\u578b\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5e76\u53d1\u6a21\u578b\u5728\u7f51\u7edc\u94fe\u63a5\u5e76\u53d1\u91cf\u5f88\u5927\u65f6\u4f1a\u53d8\u7684\u76f8\u5bf9\u4f4e\u6548\u3002SwiftNIO \u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u4f4e\u6548\u95ee\u9898\uff0c\u5927\u91cf\u4f7f\u7528\u4e86\u975e\u963b\u585e\u578bIO\u6a21\u5f0f\uff0c\u4e0e\u5e38\u89c1\u7684\u963b\u585e\u578bIO\u6a21\u5f0f\u76f8\u6bd4\uff0c\u5e94\u7528\u53ef\u4ee5\u4e0d\u5fc5\u7b49\u5f85\u7f51\u7edc\u628a\u6570\u636e\u53d1\u9001\u51fa\u53bb\u6216\u8005\u63a5\u6536\u56de\u6765\u540e\u518d\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u662f\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5728IO\u64cd\u4f5c\u53ef\u4ee5\u6267\u884c\u65f6\u901a\u77e5SwiftNIO\uff0c\u6765\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\u5904\u7406\u3002</p> <p>SwiftNIO\u7684\u76ee\u6807\u4e0d\u662f\u63d0\u4f9b\u7c7b\u4f3c\u4e8eWeb\u6846\u67b6\u7684\u9ad8\u7ea7\u5e94\u7528\u5c42\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u662f\u4e13\u6ce8\u4e8e\u4e3a\u8fd9\u4e9b\u9ad8\u7ea7\u5e94\u7528\u5c42\u63d0\u4f9b\u5e95\u5c42\u7f51\u7edc\u80fd\u529b\u3002\u5f53\u8981\u6784\u5efa\u4e00\u4e2aWeb\u5e94\u7528\u65f6\uff0c\u7528\u6237\u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528SwiftNIO\uff0c\u4ed6\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e9bSwift\u751f\u6001\u4e2d\u63d0\u4f9b\u7684Web\u6846\u67b6\u5b8c\u6210\u4efb\u52a1\uff0c\u8fd9\u4e9bWeb\u6846\u67b6\u53ef\u80fd\u4e0b\u5c42\u4f9d\u8d56\u7684\u7f51\u7edc\u5c42\u57fa\u7840\u80fd\u529b\u5c31\u662fSwiftNIO\u63d0\u4f9b\u7684\u3002</p>"},{"location":"server/swift-nio/#swiftnio-\u7684\u57fa\u7840\u67b6\u6784","title":"SwiftNIO \u7684\u57fa\u7840\u67b6\u6784","text":"<p>SwiftNIO \u901a\u8fc7 NIOCore \u6a21\u5757\u4e2d\u5b9a\u4e49\u76848\u79cd\u7c7b\u578b\u63d0\u4f9b\u57fa\u7840\u80fd\u529b\uff1a</p> <ul> <li>EventLoopGroup\uff0c \u534f\u8bae</li> <li>EventLoop\uff0c \u534f\u8bae </li> <li>Channel\uff0c\u534f\u8bae</li> <li>ChannelHandler\uff0c\u534f\u8bae</li> <li>Bootstrap\uff0c\u4e00\u7ec4\u76f8\u5173\u7ed3\u6784\u4f53</li> <li>ByteBuffer\uff0c\u7ed3\u6784\u4f53</li> <li>EventLoopFuture, \u8303\u578b\u7c7b</li> <li>EventLoopPromise\uff0c\u8303\u578b\u7ed3\u6784\u4f53</li> </ul> <p>\u6240\u6709\u7684SwiftNIO\u5e94\u7528\u6700\u7ec8\u90fd\u662f\u901a\u8fc7\u4e0a\u9762\u76848\u79cd\u7c7b\u578b\u6784\u5efa\u51fa\u6765\u7684</p>"},{"location":"server/swift-nio/#eventloops--eventloopgroups","title":"EventLoops &amp; EventLoopGroups","text":"<p>EventLoop\u662fSwiftNIO\u4e2d\u7684\u57fa\u672c\u5143\u7d20\uff0c\u5b83\u662f\u7528\u6765\u7b49\u5f85IO\u4e8b\u4ef6\u7684\u5bf9\u8c61\uff0c\u5f53\u5bf9\u5e94IO\u4e8b\u4ef6\u5b8c\u6210\u65f6\uff0c\u5b83\u4f1a\u8fdb\u884c\u4e00\u4e9b\u56de\u8c03\u64cd\u4f5c\u3002\u901a\u5e38\u4f7f\u7528SwiftNIO\u7684\u5e94\u7528\u4f1a\u4f7f\u7528\u76f8\u5bf9\u5c11\u91cf\u7684EventLoop\uff0c\u4e00\u822c\u5355\u4e2aCPU\u6838\u5fc3\u5bf9\u5e94\u4e00\u5230\u4e24\u4e2aEventLoop, EventLoop\u901a\u5e38\u5728\u5e94\u7528\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u4e00\u76f4\u4fdd\u6301\u8fd0\u884c\uff0c\u4e0d\u65ad\u7684\u5faa\u73af\u6267\u884c\u5e76\u5206\u53d1\u4e8b\u4ef6\u3002</p> <p>\u591a\u4e2aEventLoop\u53ef\u4ee5\u88ab\u96c6\u5408\u6210EventLoopGroup\uff0cEventLoopGroup\u53ef\u4ee5\u4e3a\u5b83\u7ba1\u7406\u7684\u591a\u4e2aEventLoop\u5206\u914d\u4efb\u52a1\uff0c\u5e73\u8861\u5404EventLoop\u7684\u5de5\u4f5c\u91cf\uff0c\u907f\u514d\u5176\u4e2d\u4e00\u4e9bEventLoop\u8fc7\u8f7d\uff0c\u800c\u53e6\u5916\u4e00\u4e9bEventLoop\u7a7a\u95f2\u3002</p> <p>\u76ee\u524dSwiftNIO\u63d0\u4f9b\u4e86EventLoopGroup\u534f\u8bae\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u4ee5\u53caEventLoop\u534f\u8bae\u7684\u4e24\u79cd\u5b9e\u73b0\u3002</p> <ul> <li> <p><code>MultiThreadedEventLoopGroup</code>\u53ef\u4ee5\u4f7f\u7528<code>pthread</code>\u5e93\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u4e3a\u6bcf\u4e00\u4e2a\u521b\u5efa\u7684\u7ebf\u7a0b\u5f00\u542f\u4e00\u4e2a<code>SelectedEventLoop</code>\u8fd0\u884c\u3002</p> </li> <li> <p><code>SelectedEventLoop</code>\u662fEventLoop\u534f\u8bae\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u5b83\u6839\u636e\u6240\u5728\u7684\u7cfb\u7edf\u5e73\u53f0\u4e0d\u540c\uff0c\u4f7f\u7528<code>kqueue</code>\u6216<code>epoll</code>\u65b9\u5f0f\u7ba1\u7406\u6765\u81ea\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684IO\u4e8b\u4ef6\u6216\u8005\u6d3e\u53d1\u5de5\u4f5c</p> </li> <li> <p><code>EmbeddedEventLoop</code>\u662fEventLoop\u534f\u8bae\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\uff0c\u662fEventLoop\u7684\u4e00\u4e2a\u4eff\u5236\u54c1\uff0c\u4e3b\u8981\u7528\u6765\u5199\u6d4b\u8bd5\u7528\u4f8b</p> </li> </ul>"},{"location":"server/swift-nio/#channels--channel-handlers--channel-pipelines--channel-contexts","title":"Channels &amp; Channel Handlers &amp; Channel Pipelines &amp; Channel Contexts","text":"<p>SwiftNIO\u7528\u6237\u4f7f\u7528EventLoop\u7684\u4e3b\u8981\u573a\u666f\u662f\u521b\u5efaEventLoopPromise\u7c7b\u578b\u6216\u8005\u8c03\u5ea6\u4efb\u52a1\uff0c\u4f46\u4ed6\u4eec\u9700\u8981\u82b1\u5927\u91cf\u7cbe\u529b\u6765\u5904\u7406<code>Channel</code>\u548c<code>ChannelHandler</code></p> <p>\u5728SwiftNIO\u5e94\u7528\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u88ab\u5904\u7406\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u90fd\u9700\u8981\u4e0e\u4e00\u4e2aChannel\u7ed3\u5408\uff0cChannel\u62e5\u6709\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5e76\u8d1f\u8d23\u7ba1\u7406\u5b83\u7684\u751f\u547d\u5468\u671f\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u5904\u7406\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173\u7684\u4e8b\u4ef6\u3002\u5f53\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u901a\u77e5EventLoop\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173\u7684\u4e8b\u4ef6\u65f6\uff0cEventLoop\u5c31\u4f1a\u901a\u77e5\u62e5\u6709\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684Channel\u5bf9\u8c61</p> <p>Channel\u672c\u8eab\u5e76\u6ca1\u6709\u592a\u5927\u4f5c\u7528\uff0c\u5b83\u4e3b\u8981\u7528\u6765\u4f20\u9012\u6570\u636e\u3002ChannelPipeline\u662f\u7531\u4e00\u7cfb\u5217ChannelHander\u5bf9\u8c61\u7ec4\u6210\uff0cChannelPipeline\u7528\u6765\u5904\u7406Channel\u4e0a\u4f20\u9012\u8fc7\u6765\u7684\u6570\u636e\uff0c\u76f8\u5f53\u4e8e\u6570\u636e\u5904\u7406\u6d41\u6c34\u7ebf\u3002</p> <p>ChannelHandler\u53ef\u4ee5\u901a\u8fc7ChannelHandlerContext\u4e86\u89e3\u81ea\u5df1\u5728ChannelPipeline\u4e2d\u7684\u6267\u884c\u73af\u5883\uff0c\u83b7\u53d6\u81ea\u5df1\u524d\u540e\u7ed3\u70b9\u5bf9\u5e94\u7684ChannelHander\u5bf9\u8c61\uff0c\u4fdd\u8bc1\u4e8b\u4ef6\u53ef\u4ee5\u5728ChannelPipeline\u4e2d\u53cc\u5411\u6d41\u52a8\u3002SwiftNIO\u4e2d\u5185\u7f6e\u4e86\u4e00\u4e9bChannelHandler\uff0c\u7528\u6765\u8fdb\u884c\u7279\u5b9a\u76ee\u7684\u7684\u6570\u636e\u5904\u7406\u3002</p> <p>SwiftNIO\u4e5f\u5185\u7f6e\u4e86\u4e00\u4e9bChannel\u534f\u8bae\u7684\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1aServerSocketChannel\u53ef\u4ee5\u7528\u6765\u63a5\u53d7\u8fdc\u7aef\u7684Socket\u8fde\u63a5\uff0cSocketChannel\u7528\u6765\u5904\u7406TCP\u8fde\u63a5\uff0cDatagramChannel\u7528\u6765\u5904\u7406UDP\u6570\u636e\u5305\u3002EmbeddedChannel\u7528\u6765\u5199\u6d4b\u8bd5\u7528\u4f8b</p> <p>ChannelPipeline\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0cChannelPipeline\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u903b\u8f91\u90fd\u88ab\u653e\u5230\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\uff0c\u6240\u4ee5\u4e3a\u4e86\u4e0d\u963b\u585eChannelPipeline\u7684\u6267\u884c\uff0c\u9700\u8981\u6bcf\u4e00\u4e2aChannelHandler\u4e2d\u7684\u903b\u8f91\u90fd\u4e0d\u80fd\u6267\u884c\u963b\u585e\u578b\u7684\u4ee3\u7801\u903b\u8f91\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u6574\u4e2aChannelPipeline\u7684\u6267\u884c\u6548\u7387</p>"},{"location":"server/swift-nio/#bootstrap","title":"Bootstrap","text":"<p>\u4f7f\u7528EventLoop\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6ce8\u518c\u548c\u914d\u7f6eChannel, SwiftNIO\u4e3a\u4e86\u7b80\u5316Channel\u7684\u521b\u5efa\uff0c\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5185\u7f6e\u5bf9\u8c61\uff0c\u4f8b\u5982ServerBootstrap\u7528\u6765\u914d\u7f6e\u76d1\u542cChannel\uff0cClientBootstrap\u7528\u6765\u6ce8\u518c\u5ba2\u6237\u7aefTCP\u901a\u9053\uff0cDatagramBootstrap\u7528\u6765\u6ce8\u518cUDP\u901a\u9053</p>"},{"location":"server/swift-nio/#bytebuffer","title":"ByteBuffer","text":"<p>SwiftNIO\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u6d89\u53ca\u5230\u5f88\u591a\u6570\u636e\u7f13\u5b58\u533a\u7684\u5904\u7406\u64cd\u4f5c\uff0c\u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9ad8\u6027\u80fd\u6570\u636e\u7ed3\u6784\u3002ByteBuffer\u5c31\u662f\u4e00\u79cd\u5feb\u901f\u7684\u652f\u6301\u5199\u65f6\u590d\u5236\u7279\u6027\u7684\u6570\u636e\u7f13\u5b58\u533a\u6570\u636e\u7ed3\u6784\u3002ByteBuffer\u63d0\u4f9b\u4e86\u5f88\u591a\u6709\u7528\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u5728\u975e\u5b89\u5168\u6a21\u5f0f\u4e0b\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5173\u95ed\u8fb9\u754c\u68c0\u67e5\u6765\u63d0\u9ad8\u6267\u884c\u6027\u80fd\u3002\u5927\u90e8\u5206\u573a\u666f\uff0c\u8fd8\u662f\u4f18\u5148\u63a8\u8350\u5728\u5b89\u5168\u6a21\u5f0f\u4e0b\u4f7f\u7528ByteBuffer\u6570\u636e\u7ed3\u6784</p>"},{"location":"server/swift-nio/#promises--futures","title":"Promises &amp; Futures","text":"<p>\u5e76\u53d1\u4ee3\u7801\u548c\u540c\u6b65\u4ee3\u7801\u4e3b\u8981\u7684\u533a\u522b\u5c31\u662f\u6267\u884c\u7ed3\u679c\u4e0d\u80fd\u7acb\u523b\u8fd4\u56de\u3002SwiftNIO\u63d0\u4f9b\u4e86EventLoopPromise\u548cEventLoopFuture\u6765\u5904\u7406\u9700\u8981\u5f02\u6b65\u8fd4\u56de\u7684\u64cd\u4f5c\u3002</p> <p>EventLoopFuture\u672c\u8d28\u4e0a\u662f\u51fd\u6570\u8fd4\u56de\u503c\u7684\u5360\u4f4d\u5bb9\u5668\u3002\u6bcf\u4e00\u4e2aEventLoopFuture\u90fd\u5bf9\u5e94\u4e00\u4e2aEventLoopPromise\u3002\u5f53\u51fd\u6570\u7684\u8fd4\u56de\u503c\u786e\u5b9a\u4e0b\u6765\u65f6\uff0c\u4f1a\u901a\u8fc7EventLoopPromise\u628a\u51fd\u6570\u5b9e\u9645\u7684\u8fd4\u56de\u503c\u585e\u5165EventLoopFuture\u5bf9\u8c61\u4e2d\u3002</p> <p>\u5982\u679c\u901a\u8fc7\u8f6e\u8be2\u7684\u65b9\u5f0f\u68c0\u67e5EventLoopFuture\u662f\u5426\u5b8c\u6210\uff0c\u4f1a\u975e\u5e38\u4f4e\u6548\u3002\u56e0\u6b64EventLoopFuture\u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a\u56de\u8c03\u5217\u8868\u3002\u7528\u6237\u53ef\u4ee5\u628a\u81ea\u5df1\u7684\u56de\u8c03\u585e\u5165EventLoopFuture\u5185\u90e8\u7ef4\u62a4\u7684\u56de\u8c03\u5217\u8868\u4e2d\uff0c\u5f53EventLoopFuture\u83b7\u53d6\u4e00\u4e2a\u8fd4\u56de\u7ed3\u679c\u65f6\uff0c\u4f1a\u6267\u884c\u56de\u8c03\u5217\u8868\u4e2d\u7684\u56de\u8c03\u4ee3\u7801\u903b\u8f91\uff0c\u8fd9\u6837\u7528\u6237\u5c31\u80fd\u83b7\u53d6\u5230\u51fd\u6570\u6267\u884c\u7684\u7ed3\u679c\u4e86\u3002\u540c\u65f6\u4e3a\u4e86\u7ebf\u7a0b\u5b89\u5168\uff0cEventLoopFuture\u7684\u56de\u8c03\u5217\u8868\u4f1a\u88ab\u4fdd\u8bc1\u5728\u4e0e\u5176\u5bf9\u5e94\u7684EventLoopPromise\u76f8\u540c\u7684EventLoop\u4e0a\u6267\u884c\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6570\u636e\u7684\u540c\u6b65\u8bbf\u95ee\uff0c\u907f\u514d\u591a\u7ebf\u7a0b\u95ee\u9898\u3002</p> <p>Tip</p> <p>\u5982\u679c\u770b\u5b8c\u8fd9\u7bc7\u4ecb\u7ecd\uff0c\u8fd8\u662f\u6709\u70b9\u61f5\u61c2\u7684\u8bdd\uff0c\u4e0b\u4e00\u6b65\uff0c\u5c31\u53ef\u4ee5\u62c9\u4e0bswift-nio\u7684\u4ed3\u5e93\u6e90\u7801\uff0c\u770b\u770bEventLoopPromise\u548cEventLoopFuture\u7684\u5177\u4f53\u5b9e\u73b0\u4e86\u3002\u5199\u4ee3\u7801\u5c31\u50cf\u5199\u6587\u7ae0\u4e00\u6837\uff0c\u80fd\u591f\u8bfb\u61c2\u4f18\u79c0\u4ed3\u5e93\u7684\u4ee3\u7801\uff0c\u5c31\u76f8\u5f53\u4e8e\u53ef\u4ee5\u8bfb\u61c2\u540d\u8457\u4e00\u6837\uff0c\u5bf9\u4e2a\u4eba\u63d0\u5347\u6765\u8bf4\u662f\u6700\u5feb\u548c\u6700\u76f4\u63a5\u7684\u3002</p>"},{"location":"server/switch-database-postgreSQL/","title":"\u5207\u6362\u6570\u636e\u5e93","text":"<p>\u56e0\u4e3a\u4e4b\u524d\u56fe\u65b9\u4fbf\uff0c\u5c31\u4e00\u76f4\u4f7f\u7528\u7684SQLite\u6570\u636e\u5e93\uff0c\u5b83\u662f\u4e00\u4e2a\u57fa\u4e8e\u6587\u4ef6\u7684\u6570\u636e\u5e93\u7cfb\u7edf\uff0c\u5f53\u7136\u4e5f\u6709\u4e00\u4e9b\u529f\u80fd\u4e0a\u7684\u540e\u7f3a\u5931\u3002</p> <p>\u4e0a\u4e00\u7bc7\u7236\u5b50\u5173\u7cfb\u8bd5\u9a8c\u65f6\u53d1\u73b0SQLite\u4e0d\u652f\u6301\u5916\u952e\u7ea6\u675f\uff0c\u52a0\u4e86\u548c\u6ca1\u52a0\u4e00\u6837\u3002\u6240\u4ee5\u51b3\u5b9a\u5207\u6362\u6570\u636e\u5230PostgreSQL\u6765\u9a8c\u8bc1\u4e00\u4e0b\u3002</p> <p>\u6211\u4eec\u4f7f\u7528Docker\u6765\u5e03\u7f6ePostgreSQL\u6570\u636e\u5e93\uff0c\u9996\u5148\u8981\u5b89\u88c5Docker\uff0c\u8fd9\u4e2a\u81ea\u5df1\u641c\u5b98\u7f51\u6309\u7167\u6700\u65b0\u5b89\u88c5\u6587\u6863\u53ef\u4ee5\u5b8c\u6210\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5199\u4e86\u3002\u4e0b\u9762\u5728Shell\u4e2d\u8fd0\u884c\u4e00\u6bb5\u547d\u4ee4\uff0c\u5e03\u7f6e\u4e00\u4e0bPostgreSQL\u7684Docker\u73af\u5883\uff1a</p> Bash<pre><code>docker run --name postgres -e POSTGRES_DB=vapor \\\n  -e POSTGRES_USER=vapor -e POSTGRES_PASSWORD=password \\\n  -p 5432:5432 -d postgres\n</code></pre> <p>\u5728MacOS\u914d\u7f6e\u6570\u636e\u5e93</p> <p>MacOS\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6211\u5199\u7684\u811a\u672c\u5b89\u88c5\uff1ahttps://github.com/wangzhizhou/TILApp-BackEnd/blob/master/database-config-mac.sh</p> Bash<pre><code>$ wget https://raw.githubusercontent.com/wangzhizhou/TILApp-BackEnd/master/database-config-mac.sh\n$ chmod u+x database-config-mac.sh\n$ ./database-config-mac.sh -i\n$ ./database-config-mac.sh -d\n</code></pre> <p>\u56fd\u5185Docker\u52a0\u901f\u5668\u8bbe\u7f6e\uff0c\u4f7f\u7528DaoCloud\u52a0\u901f</p> <p>```bash tab=\"Linux\" curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s    http://f1361db2.m.daocloud.io</p> <p>// \u8be5\u811a\u672c\u53ef\u4ee5\u5c06 --registry-mirror \u52a0\u5165\u5230\u4f60\u7684 Docker \u914d\u7f6e\u6587\u4ef6 /etc/docker/daemon.json \u4e2d\u3002\u9002\u7528\u4e8e Ubuntu14.04\u3001Debian\u3001CentOS6 \u3001CentOS7\u3001Fedora\u3001Arch Linux\u3001openSUSE Leap 42.1\uff0c\u5176\u4ed6\u7248\u672c\u53ef\u80fd\u6709\u7ec6\u5fae\u4e0d\u540c\u3002\u66f4\u591a\u8be6\u60c5\u8bf7\u8bbf\u95ee\u6587\u6863\u3002 Text Only<pre><code>```bash tab=\"MacOS\"\n// \u53f3\u952e\u70b9\u51fb\u684c\u9762\u9876\u680f\u7684 docker \u56fe\u6807\uff0c\u9009\u62e9 Preferences \uff0c\u5728 Daemon \u6807\u7b7e\uff08Docker 17.03 \u4e4b\u524d\u7248\u672c\u4e3a Advanced \u6807\u7b7e\uff09\u4e0b\u7684 Registry mirrors \u5217\u8868\u4e2d\u52a0\u5165\u4e0b\u9762\u7684\u955c\u50cf\u5730\u5740:\n\nhttp://f1361db2.m.daocloud.io\n\n// \u70b9\u51fb Apply &amp; Restart \u6309\u94ae\u4f7f\u8bbe\u7f6e\u751f\u6548\u3002\n</code></pre></p> <p>```bash tab=\"Windows\" // \u5728\u684c\u9762\u53f3\u4e0b\u89d2\u72b6\u6001\u680f\u4e2d\u53f3\u952e docker \u56fe\u6807\uff0c\u4fee\u6539\u5728 Docker Daemon \u6807\u7b7e\u9875\u4e2d\u7684 json \uff0c\u628a\u4e0b\u9762\u7684\u5730\u5740:</p> <p>http://f1361db2.m.daocloud.io</p> <p>\u52a0\u5230\" registry-mirrors\"\u7684\u6570\u7ec4\u91cc\u3002\u70b9\u51fb Apply \u3002 ```</p> <p></p>"},{"location":"server/switch-database-postgreSQL/#\u5de5\u7a0b\u4e2d\u5207\u6362fluentpostgresql","title":"\u5de5\u7a0b\u4e2d\u5207\u6362FluentPostgreSQL","text":"<p>Package.swift Swift<pre><code>// PostgreSQL\n.package(url: \"https://github.com/vapor/fluent-postgresql\", from: \"1.0.0\")\n...\n.target(name: \"App\", dependencies: [\"FluentPostgreSQL\", \"Vapor\"]),\n</code></pre> configure.swift Swift<pre><code>import FluentPostgreSQL\n...\ntry services.register(FluentPostgreSQLProvider())\n...\n/// Register the configured SQLite database to the database config.\nlet databaseConfig = PostgreSQLDatabaseConfig(hostname: \"localhost\",\n                                              port: 5432,\n                                              username: \"vapor\",\n                                              database: \"vapor\",\n                                              password: \"password\")\nlet database = PostgreSQLDatabase(config: databaseConfig)\n\nvar databases = DatabasesConfig()\ndatabases.add(database: database, as: .psql)\nservices.register(databases)\n\n/// Configure migrations\nvar migrations = MigrationConfig()\nmigrations.add(model: User.self, database: .psql)\nmigrations.add(model: Acronym.self, database: .psql)\nservices.register(migrations)\n</code></pre></p> <p>Acronym.swift Swift<pre><code>import FluentPostgreSQL\n...\nextension Acronym: PostgreSQLModel {}\n...\nextension Acronym: Migration {\n    static func prepare(on connection: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n\n        // \u521b\u5efaAcronym\u5728\u6570\u636e\u5e93\u4e2d\u7684\u8868\n        return Database.create(self, on: connection) { (builder) in\n\n            // \u6dfb\u52a0Acronym\u6240\u6709\u5c5e\u6027\u5230\u8868\u4e2d\n            try addProperties(to: builder)\n\n            // \u8fd9\u4e00\u53e5\u6dfb\u52a0\u4e86Acronym.userID\u5230User.id\u7684\u5916\u952e\u7ea6\u675f\n            builder.reference(from: \\.userID, to: \\User.id)\n        }\n    }\n}\n...\n</code></pre></p> <p>User.swift Swift<pre><code>import FluentPostgreSQL\n...\nextension User: PostgreSQLUUIDModel {}\n</code></pre></p> <p>\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5e76\u9a8c\u8bc1\u5916\u952e\u7ea6\u675f\u662f\u5426\u751f\u6548\u3002\u4ece\u9519\u8bef\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cPostgreSQL\u652f\u6301\u5916\u952e\u7ea6\u675f\u3002</p> <p></p> <p>\u4ec0\u4e48\u662f\u5916\u952e\u7ea6\u675f</p> <p>\u5916\u952e\u5fc5\u987b\u4e3a\u53e6\u4e00\u4e2a\u8868\u4e2d\u7684\u4e3b\u952e\u3002\u5916\u952e\u7684\u7528\u9014\u662f\u786e\u4fdd\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u56e0\u4e3a\u6211\u4eec\u5728Acronym\u4e2d\u5b9a\u4e49\u4e86\u5916\u952eUserID\u4e3aUser\u8868\u4e2d\u7684\u4e3b\u952eid\uff0c\u6240\u4ee5\u8981\u521b\u5efa\u4e00\u4e2aAcronym\u65f6\u5b83\u5bf9\u5e94\u7684User\u5fc5\u987b\u662f\u5df2\u7ecf\u5b58\u5728\u7684\u624d\u80fd\u521b\u5efa\u6210\u529f\uff0c\u5f53\u8981\u5220\u9664\u4e00\u4e2aUser\u65f6\uff0c\u9700\u8981\u5148\u628aUser\u4e0b\u7684\u6240\u6709Acronym\u90fd\u5220\u9664\u540e\uff0c\u624d\u80fd\u5220\u9664\u8be5User\u3002</p>"},{"location":"server/test-on-linux/","title":"\u5728Linux\u4e0a\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b","text":"<p>\u5bf9\u4e8e\u670d\u52a1\u7aef\u5e94\u7528\uff0c\u5728Linux\u4e0a\u8dd1\u6d4b\u8bd5\u7528\u4f8b\u662f\u5f88\u91cd\u8981\u7684\u3002\u5f53\u6211\u4eec\u90e8\u7f72\u5230Vapor Cloud\u4e0a\u65f6\uff0c\u5176\u5b9e\u90e8\u7f72\u7684\u64cd\u4f5c\u7cfb\u7edf(Linux)\u548c\u6211\u4eec\u5f00\u53d1\u4f7f\u7528\u7684\u7cfb\u7edf(MacOS)\u662f\u4e0d\u540c\u7684\u3002Linux\u4e0a\u7684Foundation\u5e93\u4e0d\u540c\u4e8eMacOS\u4e0a\u7684Foundation\uff0cMacOS\u4e0a\u7684Foundation\u5df2\u7ecf\u88ab\u6d4b\u8bd5\u4f7f\u7528\u591a\u5e74\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528Objective-C\u8fd0\u884c\u65f6\u7279\u6027\uff0c\u4f46Linux\u4e0a\u7684Foundation\u662f\u7eafswift\u5b9e\u73b0\u7684\uff0c\u6709\u4e00\u4e9b\u7279\u6027\u8fd8\u6ca1\u6709\u5b8c\u6210\u5b9e\u73b0\uff0c\u76f8\u5bf9\u4e0d\u7a33\u5b9a\uff0c\u6709\u65f6\u4f1a\u5f15\u8d77\u5d29\u6e83\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u5728Linux\u73af\u5883\u4e0b\u4e5f\u80fd\u6210\u529f\u8dd1\u5b8c\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002</p> <p>\u5728MacOS\u4e0a\uff0c\u53ef\u4ee5\u5229\u7528Objective-C\u7684\u8fd0\u884c\u65f6\u7279\u6027\uff0c\u901a\u8fc7\u68c0\u67e5\u51fd\u6570\u540d\u79f0\u524d\u7f00\u4e3atest\u6765\u8bc6\u522b\u6d4b\u8bd5\u7528\u4f8b\u3002\u4f46\u662f\u5728Linux\u4e0a\uff0c\u7531\u4e8e\u6ca1\u6709Objective-C\u8fd0\u884c\u65f6\u7279\u6027\u652f\u6301\uff0c\u6240\u6709\u6211\u4eec\u5fc5\u987b\u624b\u52a8\u6307\u5b9a\u54ea\u4e9b\u51fd\u6570\u662f\u6d4b\u8bd5\u7528\u4f8b\u3002</p> <p>\u5728 <code>Tests</code>\u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a\u540d\u4e3a<code>LinuxMain.swift</code>\u7684\u6587\u4ef6\uff0c\u5b83\u4e0d\u662fXcode\u5de5\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u624b\u52a8\u5217\u51fa\u54ea\u4e9b\u51fd\u6570\u662f\u6d4b\u8bd5\u7528\u4f8b\u3002</p> <p>LinuxMain.swift Swift<pre><code>import XCTest\n\n@testable import AppTests\n\nXCTMain([\n    testCase(AcronymTests.allTests),\n    testCase(CategoryTests.allTests),\n    testCase(UserTests.allTests),\n])\n</code></pre></p> <p>UserTests.swift Swift<pre><code>...\nstatic let allTests = [\n    (\"testUsersCanBeRetrievedFromAPI\", testUsersCanBeRetrievedFromAPI),\n    (\"testUserCanBeSavedWithAPI\", testUserCanBeSavedWithAPI),\n    (\"testGettingASingleUserFromTheAPI\", testGettingASingleUserFromTheAPI),\n    (\"testGettingAUsersAcronymsFromTheAPI\", testGettingAUsersAcronymsFromTheAPI)\n]\n</code></pre></p> <p>AcronymTests.swift Swift<pre><code>...\nstatic let allTests = [\n    (\"testAcronymsCanBeRetrievedFromAPI\", testAcronymsCanBeRetrievedFromAPI),\n    (\"testAcronymCanBeSavedWithAPI\", testAcronymCanBeSavedWithAPI),\n    (\"testGettingASingleAcronymFromTheAPI\", testGettingASingleAcronymFromTheAPI),\n    (\"testUpdatingAnAcronym\", testUpdatingAnAcronym),\n    (\"testDeletingAnAcronym\", testDeletingAnAcronym),\n    (\"testSearchAcronymShort\", testSearchAcronymShort),\n    (\"testSearchAcronymLong\", testSearchAcronymLong),\n    (\"testGetFirstAcronym\", testGetFirstAcronym),\n    (\"testSortingAcronyms\", testSortingAcronyms),\n    (\"testGettingAnAcronymsUser\", testGettingAnAcronymsUser),\n    (\"testAcronymsCategories\", testAcronymsCategories),\n]\n</code></pre></p> <p>CategoryTests.swift Swift<pre><code>...\nstatic let allTests = [\n    (\"testCategoriesCanBeRetrievedFromAPI\", testCategoriesCanBeRetrievedFromAPI),\n    (\"testCategoryCanBeSavedWithAPI\", testCategoryCanBeSavedWithAPI),\n    (\"testGettingASingleCategoryFromTheAPI\", testGettingASingleCategoryFromTheAPI),\n    (\"testGettingACategoriesAcronymsFromTheAPI\", testGettingACategoriesAcronymsFromTheAPI),\n]\n</code></pre></p>"},{"location":"server/test-on-linux/#\u4f7f\u7528docker\u6a21\u62df\u5728linux\u4e0a\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b","title":"\u4f7f\u7528Docker\u6a21\u62df\u5728Linux\u4e0a\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b","text":"<p>\u7f16\u8f91<code>Dockerfile</code></p> <p>Dockerfile Docker<pre><code>FROM swift:4.1\n\nWORKDIR /package\n\nCOPY . ./\n\nRUN swift package resolve\nRUN swift package clean\n\nCMD [\"swift\", \"test\"]\n</code></pre></p> <p>\u7f16\u8f91<code>docker-compose.yml</code>\u6587\u4ef6</p> <p>docker-compose.yml Text Only<pre><code>version: '3'\n\nservices:\n    til-app:\n        depends_on:\n            - postgres\n        build: .\n        environment:\n            - DATABASE_HOSTNAME=postgres\n            - DATABASE_PORT=5432\n    postgres:\n        image: \"postgres\"\n        environment:\n            - POSTGRES_DB=vapor-test\n            - POSTGRES_USER=vapor\n            - POSTGRES_PASSWORD=password\n</code></pre></p> <p>\u5728<code>configure.swift</code>\u6587\u4ef6\u4e2d\u4f5c\u4e00\u4e0b\u6d4b\u8bd5\u7aef\u53e3\u7684\u4fee\u6539\uff0c\u4ee5\u9002\u5e94\u6d4b\u8bd5\u73af\u5883\u53d8\u91cf\u8bbe\u5b9a</p> <p>configure.swift Swift<pre><code>if let testPort = Environment.get(\"DATABASE_PORT\") {\n    databasePort = Int(testPort) ?? 5433\n} else {\n    databasePort = 5433\n}\n</code></pre></p> <p>\u4e0a\u9762\u90fd\u914d\u7f6e\u597d\u540e\uff0c\u5728\u5de5\u7a0b\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u5728\u7ec8\u7aef\u8fd0\u884cLinux\u4e0a\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e86\uff1a</p> Bash<pre><code>$ docker-compose build\n$ docker-compose up --abort-on-container-exit\n</code></pre> <p></p>"},{"location":"server/testing-refine/","title":"\u6d4b\u8bd5\u4f18\u5316","text":"<p>\u6211\u4eec\u628a\u6240\u6709\u7684\u4ee3\u7801\u5199\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u9762\u4e0d\u5229\u4e8e\u590d\u7528\uff0c\u524d\u9762\u6211\u4eec\u53ea\u5199\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f46\u5982\u679c\u8981\u5199\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u65f6\u4f1a\u53d1\u73b0\uff0c\u91cd\u7f6e\u6570\u636e\u5e93\u8fd9\u4e2a\u64cd\u4f5c\u662f\u5f88\u591a\u5730\u65b9\u4f1a\u91cd\u590d\u4f7f\u7528\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u4e00\u4e9b\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u7684\u903b\u8f91\u62bd\u79bb\u51fa\u6765\uff0c\u4ee5\u65b9\u4fbf\u5199\u66f4\u591a\u7684\u6d4b\u8bd5\u3002</p> <p>\u628a\u6570\u636e\u5e93\u91cd\u7f6e\u8fd9\u4e00\u90e8\u5206\u62bd\u51fa\u5230<code>Application+Testable.swift</code>\u4e2d</p> Swift<pre><code>import Vapor\n\nextension Application {\n    static func testable(envArgs: [String]? = nil) throws -&gt; Application {\n        // \u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u5bf9\u8c61\n        var config = Config.default()\n        // \u6d4b\u8bd5\u73af\u5883\n        var env = Environment.testing\n        // \u521b\u5efa\u9ed8\u8ba4\u670d\u52a1\u5bf9\u8c61\n        var services = Services.default()\n\n        if let environmentArgs = envArgs {\n            env.arguments = environmentArgs\n        }\n        // \u4f7f\u7528 config\u548cenv\u6765\u914d\u7f6e\u670d\u52a1\n        try App.configure(&amp;config, &amp;env, &amp;services)\n        // \u4f7f\u7528config\u3001env\u548cservices\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u5e94\u7528\u5bf9\u8c61\n        let app = try Application(config: config, environment: env, services: services)\n        // \u4f5c\u4e00\u4e9b\u5e94\u7528\u521d\u59cb\u5316\u4e4b\u540e\u8981\u505a\u7684\u5de5\u4f5c\n        try App.boot(app)\n\n        return app\n    }\n\n    static func reset() throws {\n        let revertEnvironmentArgs = [\"vapor\", \"revert\", \"--all\", \"-y\"]\n        try Application.testable(envArgs: revertEnvironmentArgs).asyncRun().wait()\n\n        let migrateEnvironmentArgs = [\"vapor\", \"migrate\", \"-y\"]\n        try Application.testable(envArgs: migrateEnvironmentArgs).asyncRun().wait()\n    }\n}\n</code></pre> <p>\u62bd\u51fa\u8fd9\u90e8\u5206\u903b\u8f91\u540e\uff0c\u4e4b\u524d\u7684\u90a3\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u91cd\u7f6e\u6570\u636e\u5e93\u7684\u90e8\u5206\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\u4e00\u53e5\u8bdd\uff1a</p> <p>UserTests.swift Swift<pre><code>...\nfunc testUsersCanBeRetrievedFromAPI() throws {\n        // \u91cd\u7f6e\u6570\u636e\u5e93\n        try Application.reset()\n        // \u53ef\u6d4b\u8bd5\n        let app = try Application.testable()\n        ...\n}\n...\n</code></pre></p> <p>\u518d\u8fdb\u4e00\u6b65\u62bd\u79bb\u4e00\u4e9b\u53ef\u4ee5\u590d\u7528\u7684\u903b\u8f91\uff0c\u53d1\u73b0\u53d1\u9001\u8bf7\u6c42\u548c\u83b7\u53d6\u54cd\u5e94\u4e5f\u662f\u53ef\u4ee5\u590d\u7528\u7684\uff0c\u903b\u8f91\u90fd\u62bd\u79bb\u5230<code>Application+testable.swift</code>\u4e2d\uff1a</p> Swift<pre><code>...\n    // \u56e0\u4e3a\u6a21\u677f\u51fd\u6570\u4e0d\u63a5\u6536nil\uff0c\u6240\u6709\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u5185\u5bb9\u6765\u4ee3\u66ff\n    struct EmptyContent: Content {}\n\n    func sendRequest&lt;T&gt;(\n        to path: String,\n        method: HTTPMethod,\n        headers: HTTPHeaders = .init(),\n        body: T? = nil\n        ) throws -&gt; Response where T: Content {\n\n        // \u521b\u5efa\u4e00\u4e2a\u548c\u53d1\u9001\u5230app\u7684HTTP\u8bf7\u6c42\n        let request = HTTPRequest(method: method,\n                                  url: URL(string: path)!,\n                                  headers: headers)\n        let wrappedRequest = Request(http: request, using: self)\n\n        if let body = body {\n            try wrappedRequest.content.encode(body)\n        }\n\n        // \u56e0\u4e3aapp\u672c\u8eab\u6ca1\u6709\u6b63\u5f0f\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u624b\u52a8\u8fdb\u884cj\u54cd\u5e94\n        let responder = try self.make(Responder.self)\n        return try responder.respond(to: wrappedRequest).wait()\n    }\n\n    func sendRequest(\n        to path: String,\n        method: HTTPMethod,\n        headers: HTTPHeaders = .init()\n    ) throws -&gt; Response {\n        let emptyContent: EmptyContent? = nil\n        return try sendRequest(to: path,\n                               method: method,\n                               headers: headers,\n                               body: emptyContent)\n    }\n\n    func sendRequest&lt;T&gt;(\n        to path: String,\n        method: HTTPMethod,\n        headers: HTTPHeaders,\n        data: T\n        ) throws where T: Content {\n\n        _ =  try sendRequest(to: path,\n                               method: method,\n                               headers: headers,\n                               body: data)\n    }\n\n\n    func getResponse&lt;C, T&gt;(\n        to path: String,\n        method: HTTPMethod = .GET,\n        headers: HTTPHeaders = .init(),\n        data: C? = nil,\n        decodeTo type: T.Type\n        ) throws -&gt; T where C: Content, T: Decodable {\n\n        let response = try self.sendRequest(to: path,\n                                            method: method,\n                                            headers: headers,\n                                            body: data)\n        // \u4ece\u54cd\u5e94\u6570\u636e\u4e2d\u89e3\u6790\u51fa\u7528\u6237\u6570\u636e\uff0c\u4e5f\u5373\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u51fa\u6765\u7684\u7528\u6237\u6570\u636e\n        return try response.content.decode(type).wait()\n    }\n\n    func getResponse&lt;T&gt; (\n        to path: String,\n        method: HTTPMethod = .GET,\n        headers: HTTPHeaders = .init(),\n        decodeTo type: T.Type\n    ) throws -&gt; T where T: Decodable {\n        let emptyContent: EmptyContent? = nil\n        return try self.getResponse(to: path,\n                                    method: method,\n                                    headers: headers,\n                                    data: emptyContent,\n                                    decodeTo: type)\n    }\n...\n</code></pre> <p>\u5c06\u8fd9\u4e9b\u903b\u8f91\u62bd\u5230<code>Application+testable.swift</code>\u4e2d\u540e\uff0c\u539f\u6765\u7684\u6d4b\u8bd5\u7528\u4f8b\u7b80\u5316\u4e3a\uff1a </p> Swift<pre><code>func testUsersCanBeRetrievedFromAPI() throws {\n\n     // \u91cd\u7f6e\u6570\u636e\u5e93\n     try Application.reset()\n     // \u53ef\u6d4b\u8bd5\n     let app = try Application.testable()\n     // \u521b\u5efa\u4e00\u4e2aapp\u5230PostgreSQL\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u8868\u793aapp\u4f7f\u7528PostgreSQL\u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f\n     let conn = try app.newConnection(to: .psql).wait()\n\n    // \u5b9a\u4e49\u6d4b\u8bd5\u6570\u636e\n     let expectedName = \"Alice\"\n     let expectedUsername = \"alice\"\n     // \u521b\u5efa\u4e24\u4e2a\u7528\u6237\u6570\u636e\uff0c\u5e76\u4fdd\u5b58\u8fdb\u6570\u636e\u5e93\u4e2d\n     let user = User(name: expectedName, username: expectedUsername)\n     let savedUser = try user.save(on: conn).wait()\n     _ = try User(name: \"Luke\", username: \"lukes\").save(on: conn).wait()\n\n     // \u53d1\u8bf7\u6c42\u5e76\u83b7\u5f97\u54cd\u5e94\n     let users = try app.getResponse(to: \"/api/users\", decodeTo: [User].self)\n\n     // \u8fdb\u884c\u9a8c\u8bc1\n     XCTAssertEqual(users.count, 2)\n     XCTAssertEqual(users[0].name, savedUser.name)\n     XCTAssertEqual(users[0].username, savedUser.username)\n     XCTAssertEqual(users[0].id, savedUser.id)\n\n     // \u5173\u95ed\u5bf9\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u505c\u6b62\u4f7f\u7528\u6570\u636e\u5e93\n     conn.close()\n }\n</code></pre> <p>\u518d\u8003\u8651\u628a\u521b\u5efa\u6d4b\u8bd5\u6570\u636e\u7684\u90e8\u5206\u62bd\u79bb\u5230<code>Models+testable.swift</code>\u4e2d\uff1a Swift<pre><code>import Vapor\nimport FluentPostgreSQL\n\nextension User {\n    static func create(\n        name: String = \"Luke\",\n        username: String = \"lukes\",\n        on connection: PostgreSQLConnection) throws -&gt; User {\n        let user = User(name: name, username: username)\n        return try user.save(on: connection).wait()\n    }\n}\n</code></pre></p> <p>\u518d\u7ed3\u5408XCTest\u6d4b\u8bd5\u6846\u67b6\u7684<code>setUp</code>\u548c<code>tearDown</code>\u51fd\u6570\uff0c\u6700\u7ec8\u6d4b\u8bd5\u7528\u4f8b\u7b80\u5316\u5982\u4e0b\uff1a </p> <p>UserTests.swit Swift<pre><code>@testable import App\nimport XCTest\nimport Vapor\nimport FluentPostgreSQL\n\nfinal class UserTests: XCTestCase {\n\n    let usersName = \"Alice\"\n    let usersUsername = \"alice\"\n    let usersURI = \"/api/users/\"\n    var app: Application!\n    var conn: PostgreSQLConnection!\n\n    override func setUp() {\n        // \u91cd\u7f6e\u6570\u636e\u5e93\n        try! Application.reset()\n        // \u53ef\u6d4b\u8bd5\n        app = try! Application.testable()\n        // \u521b\u5efa\u4e00\u4e2aapp\u5230PostgreSQL\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u8868\u793aapp\u4f7f\u7528PostgreSQL\u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f\n        conn = try! app.newConnection(to: .psql).wait()\n    }\n\n    override func tearDown() {\n        // \u5173\u95ed\u5bf9\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u505c\u6b62\u4f7f\u7528\u6570\u636e\u5e93\n        conn.close()\n    }\n\n    func testUsersCanBeRetrievedFromAPI() throws {\n\n        // \u521b\u5efa\u4e24\u4e2a\u6d4b\u8bd5\u7528\u6237\u6570\u636e\n        let user = try User.create(name: usersName,\n                                   username: usersUsername,\n                                   on: conn)\n        _ = try User.create(on: conn)\n\n        // \u53d1\u8bf7\u6c42\u5e76\u83b7\u5f97\u54cd\u5e94\n        let users = try app.getResponse(to: usersURI, decodeTo: [User].self)\n\n        // \u8fdb\u884c\u9a8c\u8bc1\n        XCTAssertEqual(users.count, 2)\n        XCTAssertEqual(users[0].name, usersName)\n        XCTAssertEqual(users[0].username, usersUsername)\n        XCTAssertEqual(users[0].id, user.id)\n    }\n}\n</code></pre></p> <p>\u8fd9\u6574\u4e2a\u4f18\u5316\u8fc7\u7a0b\u5b9e\u5728\u662f\u6559\u79d1\u4e66\u5f0f\u7684\u4f8b\u5b50\u3002\u6709\u4e2a\u8fd9\u79cd\u4f18\u5316\uff0c\u4e4b\u540e\u5199\u5176\u5b83\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee3\u7801\u4f1a\u7b80\u6d01\u5f88\u591a\u3002</p>"},{"location":"server/testing/","title":"\u6d4b\u8bd5","text":"<p>\u6d4b\u8bd5\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u5f88\u91cd\u8981\uff0c\u5728\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5e94\u8be5\u5c3d\u91cf\u7684\u5199\u5355\u5143\u6d4b\u8bd5\u5e76\u4e14\u5c06\u5355\u5143\u6d4b\u8bd5\u81ea\u52a8\u5316\u8d77\u6765\uff0c\u6709\u6837\u6709\u5229\u4e8e\u5e94\u7528\u7684\u5feb\u901f\u8fed\u4ee3\u3002</p>"},{"location":"server/testing/#\u4e3a\u4ec0\u4e48\u5e94\u8be5\u5199\u6d4b\u8bd5","title":"\u4e3a\u4ec0\u4e48\u5e94\u8be5\u5199\u6d4b\u8bd5","text":"<p>\u8f6f\u4ef6\u6d4b\u8bd5\u548c\u8f6f\u4ef6\u5f00\u53d1\u4e00\u6837\u53e4\u8001\u3002\u73b0\u4ee3\u7684\u670d\u52a1\u5668\u5e94\u7528\u4e00\u5929\u4e4b\u5185\u53ef\u4ee5\u90e8\u7f72\u5f88\u591a\u6b21\uff0c\u56e0\u6b64\u786e\u4fdd\u6bcf\u4e00\u6b21\u7684\u90e8\u7f72\u90fd\u8fbe\u5230\u9884\u671f\u662f\u5f88\u91cd\u8981\u7684\u3002\u5199\u6d4b\u8bd5\u5e76\u8ba9\u6d4b\u8bd5\u7528\u4f8b\u6765\u4fdd\u8bc1\u4ee3\u7801\u8d28\u91cf\u662f\u5f88\u6709\u524d\u9014\u7684\u4e8b\u3002</p> <p>\u5728\u91cd\u6784\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u6d4b\u8bd5\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u4e00\u79cd\u4fdd\u969c\u3002\u624b\u52a8\u6d4b\u8bd5\u662f\u5f88\u6ca1\u6548\u7387\u7684\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5f53\u5e94\u7528\u53d8\u7684\u5f88\u5927\u65f6\uff0c\u624b\u52a8\u6d4b\u8bd5\u7b80\u76f4\u5c31\u662f\u4e00\u79cd\u5669\u68a6\u3002\u5982\u679c\u80fd\u591f\u7528\u81ea\u52a8\u5316\u5355\u5143\u6d4b\u8bd5\u7684\u65b9\u6cd5\u4fdd\u8bc1\u91cd\u8981\u7684\u5df2\u6709\u529f\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u90a3\u4e48\u5728\u5f00\u53d1\u65b0\u9700\u6c42\u65f6\u4e5f\u4f1a\u5f88\u6709\u4fe1\u5fc3\u3002</p> <p>\u6d4b\u8bd5\u540c\u65f6\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u8bbe\u8ba1\u4ee3\u7801\u903b\u8f91\u3002\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\u5c31\u662f\u4e00\u79cd\u5728\u5f00\u53d1\u524d\u5148\u5199\u6d4b\u8bd5\u7528\u4f8b\u7684\u4e00\u79cd\u5f00\u53d1\u65b9\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u5f88\u9ad8\u7684\u4ee3\u7801\u8986\u76d6\u7387\uff0c\u5e2e\u52a9\u8bbe\u8ba1\u4ee3\u7801\u548cAPI\u3002</p>"},{"location":"server/testing/#\u4f7f\u7528spm\u5199\u6d4b\u8bd5\u7528\u4f8b","title":"\u4f7f\u7528SPM\u5199\u6d4b\u8bd5\u7528\u4f8b","text":"<p>\u5728Package.swift\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7f16\u8bd1\u76ee\u6807\uff0c\u5b83\u4f9d\u8d56\u4e8e\u5e94\u7528\u3002 Package.swift Swift<pre><code>targets: [\n    ...\n    .testTarget(name: \"AppTests\", dependencies: [\"App\"])\n]\n</code></pre></p> <p>\u6d4b\u8bd5\u7f16\u8bd1\u76ee\u6807\u8981\u653e\u5230<code>Tests</code>\u76ee\u5f55\u4e0b\u9762, \u6a21\u677f\u5de5\u7a0b\u7684\u6d4b\u8bd5\u7f16\u8bd1\u76ee\u6807\u5c31\u662f\u5728<code>Tests/AppTests</code>\u76ee\u5f55\u3002</p> <p>\u4f7f\u7528<code>vapor xcode -y</code>\u751f\u6210\u5de5\u7a0b\u6587\u4ef6\u540e\uff0c\u9009\u62e9Schema\u4e3a<code>*-Package</code>, \u5c31\u53ef\u4ee5\u628aApp\u548cTests\u7f16\u8bd1\u76ee\u5f55\u8054\u7cfb\u8d77\u6765\uff0c\u8fdb\u884c\u6d4b\u8bd5\u7528\u4f8b\u8fd0\u884c\u3002</p>"},{"location":"server/testing/#\u6d4b\u8bd5user","title":"\u6d4b\u8bd5User","text":"<p>UserTests.swift Swift<pre><code>@testable import App\nimport XCTest\nimport Vapor\nimport FluentPostgreSQL\n\nfinal class UserTests: XCTestCase {\n    func testUsersCanBeRetrievedFromAPI() throws {\n        // \u5b9a\u4e49\u6d4b\u8bd5\u6570\u636e\n        let expectedName = \"Alice\"\n        let expectedUsername = \"alice\"\n\n        // \u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u5bf9\u8c61\n        var config = Config.default()\n        // \u521b\u5efa\u9ed8\u8ba4\u670d\u52a1\u5bf9\u8c61\n        var services = Services.default()\n        // \u6d4b\u8bd5\u73af\u5883\n        var env = Environment.testing\n\n        // \u4f7f\u7528 config\u548cenv\u6765\u914d\u7f6e\u670d\u52a1\n        try App.configure(&amp;config, &amp;env, &amp;services)\n\n        // \u4f7f\u7528config\u3001env\u548cservices\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u5e94\u7528\u5bf9\u8c61\n        let app = try Application(config: config, environment: env, services: services)\n        // \u4f5c\u4e00\u4e9b\u5e94\u7528\u521d\u59cb\u5316\u4e4b\u540e\u8981\u505a\u7684\u5de5\u4f5c\n        try App.boot(app)\n\n        // \u521b\u5efa\u4e00\u4e2aapp\u5230PostgreSQL\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u8868\u793aapp\u4f7f\u7528PostgreSQL\u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f\n        let conn = try app.newConnection(to: .psql).wait()\n\n        // \u521b\u5efa\u4e24\u4e2a\u7528\u6237\u6570\u636e\uff0c\u5e76\u4fdd\u5b58\u8fdb\u6570\u636e\u5e93\u4e2d\n        let user = User(name: expectedName, username: expectedUsername)\n        let savedUser = try user.save(on: conn).wait()\n        _ = try User(name: \"Luke\", username: \"lukes\").save(on: conn).wait()\n\n        // \u521b\u5efa\u4e00\u4e2a\u548c\u53d1\u9001\u5230app\u7684HTTP\u8bf7\u6c42\n        let request = HTTPRequest(method: .GET, url: URL(string: \"/api/users\")!)\n        let wrappedRequest = Request(http: request, using: app)\n\n        // \u56e0\u4e3aapp\u672c\u8eab\u6ca1\u6709\u6b63\u5f0f\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u624b\u52a8\u8fdb\u884cj\u54cd\u5e94\n        let responder = try app.make(Responder.self)\n        let response = try responder.respond(to: wrappedRequest).wait()\n\n        // \u4ece\u54cd\u5e94\u6570\u636e\u4e2d\u89e3\u6790\u51fa\u7528\u6237\u6570\u636e\uff0c\u4e5f\u5373\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u51fa\u6765\u7684\u7528\u6237\u6570\u636e\n        let data = response.http.body.data\n        let users = try JSONDecoder().decode([User].self, from: data!)\n\n        // \u8fdb\u884c\u9a8c\u8bc1\n        XCTAssertEqual(users.count, 2)\n        XCTAssertEqual(users[0].name, savedUser.name)\n        XCTAssertEqual(users[0].username, savedUser.username)\n        XCTAssertEqual(users[0].id, savedUser.id)\n\n        // \u5173\u95ed\u5bf9\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u505c\u6b62\u4f7f\u7528\u6570\u636e\u5e93\n        conn.close()\n    }\n\n}\n</code></pre> \u4e3a\u4e86\u628a\u6570\u636e\u5e93\u5728\u751f\u4ea7\u73af\u5883\u548c\u6d4b\u8bd5\u73af\u5883\u533a\u5206\u5f00\uff0c\u6240\u4ee5App.configure\u51fd\u6570\u4e2d\u6839\u636e\u73af\u5883\uff0c\u8fdb\u884c\u4e86\u4e0d\u540c\u7684\u6570\u636e\u5e93\u914d\u7f6e\u64cd\u4f5c\uff1a</p> <p>configure.swift Swift<pre><code>...\nlet databaseName: String\nlet databasePort: Int\n\nif(env == .testing) {\n    databaseName = \"vapor-test\"\n    databasePort = 5433\n} else {\n    databaseName = Environment.get(\"DATABASE_NAME\") ?? \"vapor\"\n    databasePort = 5432\n}\n\nlet username = Environment.get(\"DATABASE_USERNAME\") ?? \"vapor\"\nlet password = Environment.get(\"DATABASE_PASSWORD\") ?? \"password\"\nlet hostname = Environment.get(\"DATABASE_HOSTNAME\") ?? \"localhost\"\n\n/// Register the configured SQLite database to the database config.\nlet databaseConfig = PostgreSQLDatabaseConfig(hostname: hostname,\n                                              port: databasePort,\n                                              username: username,\n                                              database: databaseName,\n                                              password: password)\nlet database = PostgreSQLDatabase(config: databaseConfig)\n\nvar databases = DatabasesConfig()\ndatabases.add(database: database, as: .psql)\nservices.register(databases)\n...\n// \u6dfb\u52a0Fluent\u547d\u4ee4\u5230CommandConfig\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6807\u8bc6\u7b26\u6267\u884c\"revert\"\u547d\u4ee4\u548c\"migrate\"\u547d\u4ee4\nvar commandConfig  = CommandConfig.default()\ncommandConfig.useFluentCommands()\nservices.register(commandConfig)\n</code></pre></p> <p>\u56e0\u4e3a\u6211\u4eec\u533a\u5206\u73af\u5883\uff0c\u914d\u7f6e\u4e86\u4e0d\u540c\u7684\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u5728docker\u4e2d\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u6d4b\u8bd5\u7684\u6570\u636e\u5e93\uff1a</p> Bash<pre><code>docker run \\\n--name postgres-test \\\n-e POSTGRES_DB=vapor-test \\\n-e POSTGRES_USER=vapor \\\n-e POSTGRES_PASSWORD=password \\\n-p 5433:5432 \\\n-d postgres\n</code></pre> <p>\u7b2c\u4e00\u6b21\u8fd0\u884c\u6d4b\u8bd5\u53ef\u4ee5\u901a\u8fc7\uff0c\u7b2c\u4e8c\u6b21\u8fd0\u884c\u5c31\u5931\u8d25\uff0c\u8fd9\u662f\u56e0\u4e3a\uff0c\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\u5f80\u6d4b\u8bd5\u6570\u636e\u5e93\u5b58\u5165\u4e24\u4e2a\u6570\u636e\uff0c\u7b2c\u4e8c\u6b21\u8fd0\u884c\u65f6\u53c8\u5f80\u6d4b\u8bd5\u6570\u636e\u5e93\u4e2d\u5b58\u5165\u4e24\u4e2a\u6570\u636e\uff0c\u672c\u8eab\u6d4b\u8bd5\u6570\u636e\u5e93\u73b0\u5728\u67094\u6761\u7528\u6237\u6570\u636e\uff0c\u4e0d\u6ee1\u8db3\u7b2c\u4e00\u6761\u65ad\u8a00<code>XCTAssertEqual(users.count, 2)</code>, \u6240\u4ee5\u7b2c\u4e8c\u6b21\u6d4b\u8bd5\u5931\u8d25\u4e86\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u8fd0\u884c\u6d4b\u8bd5\u65f6\u90fd\u9700\u8981\u91cd\u7f6e\u6570\u636e\u5e93\u3002</p> <p>\u91cd\u7f6e\u6570\u636e\u5e93\u4ee3\u7801\u5982\u4e0b, \u628a\u5b83\u653e\u5728<code>testUsersCanBeRetrievedFromAPI</code>\u6700\u524d\u9762\uff1a Swift<pre><code>// \u91cd\u7f6e\u6570\u636e\u5e93\nvar revertConfig = Config.default()\nvar revertEnv = Environment.testing\nlet revertEnvironmentArgs = [\"vapor\", \"revert\", \"--all\", \"-y\"]\nrevertEnv.arguments = revertEnvironmentArgs\nvar revertServices = Services.default()\n\ntry App.configure(&amp;revertConfig, &amp;revertEnv, &amp;revertServices)\nlet revertApp = try Application(config: revertConfig, environment: revertEn services: revertServices)\ntry App.boot(revertApp)\ntry revertApp.asyncRun().wait()\n\n\nlet migrateEnvironmentArgs = [\"vapor\", \"migrate\", \"-y\"]\nvar migrateConfig = Config.default()\nvar migrateServices = Services.default()\nvar migrateEnv = Environment.testing\nmigrateEnv.arguments = migrateEnvironmentArgs\ntry App.configure(&amp;migrateConfig, &amp;migrateEnv, &amp;migrateServices)\nlet migrateApp = try Application(config: migrateConfig, environmentmigrateEnv, services: migrateServices)\ntry App.boot(migrateApp)\ntry migrateApp.asyncRun().wait()\n</code></pre></p> <p>\u6709\u4e86\u91cd\u7f6e\u6570\u636e\u5e93\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u6b21\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u53d1\u73b0\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e86\u3002</p>"},{"location":"server/token-authentication/","title":"token\u8ba4\u8bc1","text":"<p>\u57fa\u672c\u8ba4\u8bc1\u5b9e\u73b0\u540e\uff0c\u53ea\u6709\u88ab\u8ba4\u8bc1\u901a\u8fc7\u7684\u7528\u6237\u624d\u80fd\u521b\u5efa\u7f29\u7565\u8bed\u3002\u4f46\u662f\u5176\u5b83\u7684\u8bf7\u6c42\u5e76\u6ca1\u6709\u4f7f\u7528\u8ba4\u8bc1\u4fdd\u62a4\u8d77\u6765\uff0c\u5982\u679c\u5176\u5b83\u8bf7\u6c42\u6bcf\u6b21\u90fd\u8981\u8f93\u5165\u8ba4\u8bc1\u4fe1\u606f\u5934\uff0c\u663e\u7136\u662f\u5f88\u9ebb\u70e6\u7684\u4e00\u4ef6\u4e8b\uff0c\u5982\u679c\u6211\u4eec\u628a\u7528\u6237\u7684\u8ba4\u8bc1\u4fe1\u606f\u5b58\u8d77\u6765\uff0c\u53ea\u5728\u8bf7\u6c42\u65f6\u7528\u6237\u767b\u5f55\u4e00\u6b21\uff0c\u4e4b\u540e\u7684\u8bf7\u6c42\u4f7f\u7528\u5b58\u8d77\u6765\u7684\u8ba4\u8bc1\u4fe1\u606f\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u8ba4\u8bc1\u4fe1\u606f\u4e0d\u80fd\u5b58\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u660e\u6587\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u7528\u6237\u4f7f\u7528\u6211\u4eecAPI\u7684\u65f6\u5019\u8fdb\u884c\u767b\u5f55\u8ba4\u8bc1\uff0c\u8ba4\u8bc1\u901a\u8fc7\u540e\uff0c\u53ef\u4ee5\u53d1\u7ed9\u7528\u6237\u4e00\u4e2a\u5df2\u6210\u529f\u767b\u5f55\u7684\u51ed\u8bc1(token)\uff0c\u8ba9\u7528\u6237\u81ea\u5df1\u5b58\u5728\u672c\u5730\uff0c\u4e4b\u540e\u7684\u8bf7\u6c42\u90fd\u5e26\u4e0a\u8fd9\u4e2a\u5df2\u6210\u529f\u767b\u5f55\u7684\u51ed\u8bc1\u8fdb\u884c\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>Token.swift Swift<pre><code>//\n//  Token.swift\n//  App\n//\n//  Created by joker on 2018/11/10.\n//\n\nimport Foundation\nimport Vapor\nimport FluentPostgreSQL\nimport Authentication\n\nfinal class Token: Codable {\n    var id: UUID?\n    var token: String\n    var userID: User.ID\n\n    init(token: String, userID: User.ID) {\n        self.token = token\n        self.userID = userID\n    }\n}\n\nextension Token: PostgreSQLUUIDModel  {}\nextension Token: Migration {\n    static func prepare(on conn: PostgreSQLConnection) -&gt; Future&lt;Void&gt; {\n        return Database.create(self, on: conn) { builder in\n            try addProperties(to: builder)\n            builder.reference(from: \\.userID, to: \\User.id)\n        }\n    }\n}\nextension Token: Content {}\n\n\nextension Token {\n    static func generate(for user: User) throws -&gt; Token {\n        let random = try CryptoRandom().generateData(count: 16)\n        return try Token(token: random.base64EncodedString(), userID: user.requireID())\n    }\n}\n</code></pre></p> <p>configure.swift Swift<pre><code>...\nmigrations.add(model: Token.self, database: .psql)\n...\n</code></pre></p> <p>UserController.swift Swift<pre><code>...\nstruct UsersController: RouteCollection {\n    func boot(router: Router) throws {\n        ...    \n        let basicAuthMiddleware = User.basicAuthMiddleware(using: BCryptDigest())\n        let basicAuthGroup = usersGroup.grouped(basicAuthMiddleware)\n        basicAuthGroup.post(\"login\", use: login)\n\n    }\n    func login(_ req: Request) throws -&gt; Future&lt;Token&gt; {\n        let user = try req.requireAuthenticated(User.self)\n        let token = try Token.generate(for: user)\n        return token.save(on: req)\n    }\n}\n</code></pre></p> <p></p> <p>Token.swift Swift<pre><code>...\nextension Token: Authentication.Token {\n\n    typealias UserType = User\n\n    static let userIDKey: UserIDKey = \\Token.userID\n}\n\nextension Token: BearerAuthenticatable {\n    static let tokenKey: TokenKey = \\Token.token\n}\n</code></pre> User.swift Swift<pre><code>extension User: TokenAuthenticatable {\n    typealias TokenType = Token\n}\n</code></pre></p> <p>AcronymController.swift Swift<pre><code>...\nstruct AcronymCreateData: Content {\n    let short: String\n    let long: String\n}\nstruct AcronymsController: RouteCollection {\n    func boot(router: Router) throws {\n        let routeGroup = router.grouped(\"api\", \"acronyms\")\n\n        let tokenAuthMiddleware = User.tokenAuthMiddleware()\n        let guardAuthMiddleware = User.guardAuthMiddleware()\n        let protectd = routeGroup.grouped(tokenAuthMiddleware, guardAuthMiddleware)\n        protectd.post(AcronymCreateData.self, use: createHandler)\n        ...\n    }\n\n    func createHandler(_ req: Request, data: AcronymCreateData) throws -&gt; Future&lt;Acronym&gt; {\n        let user = try req.requireAuthenticated(User.self)\n        let acronym = try Acronym(short: data.short, long: data.long, userID: user.requireID())\n        return acronym.save(on: req)\n    }\n    ...\n}\n</code></pre></p> <p></p> <p>\u9664createHanler\u6dfb\u52a0\u4e86\u7528\u6237\u8ba4\u8bc1\u4ee5\u5916\u7684\uff0c\u5176\u5b83\u5904\u7406\u4e5f\u9700\u8981\u4fee\u6539,\u786e\u4fdd\u53ea\u6709\u767b\u5f55\u7528\u6237\u624d\u80fd\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u3002\u9664GET\u8bf7\u6c42\u5916\u90fd\u9700\u8981\u4fee\u6539\u3002\u5bf9GET\u8bf7\u6c42\u4e0d\u5904\u7406\u662f\u4e3a\u4e86\u8ba9\u975e\u767b\u5f55\u7528\u6237\u6709\u8bfb\u6743\u9650\u3002</p> <p>AcronymsController Swift<pre><code>...\n    protectd.put(Acronym.parameter, use: updateHandler)\n    protectd.delete(Acronym.parameter, use: deleteHandler)\n    protectd.post(Acronym.parameter,\"categories\", Category.parameter, use: addCategoriesHandler)\n    protectd.delete(Acronym.parameter, \"categories\", Category.parameter, use: removeCategoriesHandler)\n...\n\n    func updateHandler(_ req: Request) throws -&gt; Future&lt;Acronym&gt; {\n        return try flatMap(to: Acronym.self, req.parameters.next(Acronym.self), req.content.decode(AcronymCreateData.self)) { (acronym, updateData) -&gt; Future&lt;Acronym&gt; in\n            acronym.short = updateData.short\n            acronym.long = updateData.long\n\n            let user = try req.requireAuthenticated(User.self)\n            acronym.userID = try user.requireID()\n\n            return acronym.save(on: req)\n        }\n    }\n</code></pre></p> <p>CategoriesController.swift Swift<pre><code>struct CategoriesController: RouteCollection {\n    func boot(router: Router) throws {\n        ...\n        let tokenAuthMiddleware = User.tokenAuthMiddleware()\n        let guardAuthMiddleware = User.guardAuthMiddleware()\n        let tokenAuthGroup = categoriesRoute.grouped(tokenAuthMiddleware, guardAuthMiddleware)\n        tokenAuthGroup.post(Category.self, use: createHandler)\n    }\n    ...\n</code></pre></p> <p>UserController.swift Swift<pre><code>    ...\n    let tokenAuthMiddleware = User.tokenAuthMiddleware()\n    let guardAuthMiddleware = User.guardAuthMiddleware()\n    let tokenAuthGroup = usersGroup.grouped(tokenAuthMiddleware, guardAuthMiddleware)\n    tokenAuthGroup.post(User.self, use: createHandler)\n    ...\n</code></pre></p> <p>\u73b0\u5728\u6240\u4ee5\u53ef\u80fd\u7834\u574f\u6570\u636e\u7684API\u90fd\u589e\u52a0\u4e86\u8ba4\u8bc1\u4e2d\u95f4\u5c42\u4fdd\u62a4\u8d77\u6765\u4e86\uff0c\u53ea\u6709\u8ba4\u8bc1\u901a\u8fc7\u7684\u7528\u6237\u624d\u80fd\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002</p>"},{"location":"server/update-testcases-for-authentication/","title":"\u66f4\u65b0\u6d4b\u8bd5\u7528\u4f8b","text":"<p>UsesTests Swift<pre><code>func testUserCanBeSavedWithAPI() throws {\n\nlet user = User(name: usersName, username: usersUsername, password: \"password\")\n...\n}\n\nfunc testUsersCanBeRetrievedFromAPI() throws {\n    ...\n    // \u53d1\u8bf7\u6c42\u5e76\u83b7\u5f97\u54cd\u5e94\n    let users = try app.getResponse(to: usersURI, decodeTo: [User.Public].self)\n    ...\n}\n</code></pre></p> <p>Models+testable Swift<pre><code>...\nimport Crypto\nextension User {\n    static func create(\n        name: String = \"Luke\",\n        username: String? = nil,\n        on connection: PostgreSQLConnection) throws -&gt; User {\n        var createUsername: String\n        if let suppliedUsername = username {\n            createUsername = suppliedUsername\n        } else {\n            createUsername = UUID().uuidString\n        }\n        let password = try BCrypt.hash(\"password\")\n\n        let user = User(name: name, username: createUsername, password: password)\n        return try user.save(on: connection).wait()\n    }\n}\n...\n</code></pre></p> <p>\u4fee\u6539\u540e\u91cd\u7f6edocker\u6d4b\u8bd5\u6570\u636e\u5e93\uff1a Bash<pre><code>$ docker stop postgres-test\n$ docker rm postgres-test\n$ docker run --name postgres-test -e POSTGRES_DB=vapor-test \\\n  -e POSTGRES_USER=vapor -e POSTGRES_PASSWORD=password \\\n  -p 5433:5432 -d postgres\n</code></pre></p> <p>\u73b0\u5728\u8fd0\u884c\u6d4b\u8bd5\u4f1a\u4ea7\u751f\u5d29\u6e83\uff0c\u56e0\u4e3a\u5bf9\u90a3\u4e9b\u9700\u8981\u8ba4\u8bc1\u7684API\u7684\u8c03\u7528\u4f1a\u5931\u8d25:</p> <p></p> <p>Application+testable.swift Swift<pre><code>...\nimport Authentication\nextension Application {\n    ...\n    func sendRequest&lt;T&gt;(\n        to path: String,\n        method: HTTPMethod,\n        headers: HTTPHeaders = .init(),\n        body: T? = nil,\n        loggedInRequest: Bool = false,\n        loggedInUser: User? = nil\n        ) throws -&gt; Response where T: Content {\n\n        var headers = headers\n        if loggedInRequest || loggedInUser != nil {\n            let username: String\n            if let user = loggedInUser {\n                username = user.username\n            } else {\n                username = \"admin\"\n            }\n            let credentials = BasicAuthorization(username: username, password: \"password\")\n\n            var tokenHeaders = HTTPHeaders()\n            tokenHeaders.basicAuthorization = credentials\n\n            let tokenResponse = try self.sendRequest(to: \"/api/users/login\", method: .POST, headers:  tokenHeaders)\n\n            let token = try tokenResponse.content.syncDecode(Token.self)\n            headers.add(name: .authorization, value: \"Bearer \\(token.token)\")\n        }\n\n        // \u521b\u5efa\u4e00\u4e2a\u548c\u53d1\u9001\u5230app\u7684HTTP\u8bf7\u6c42\n        let request = HTTPRequest(method: method,\n                                  url: URL(string: path)!,\n                                  headers: headers)\n        let wrappedRequest = Request(http: request, using: self)\n\n        if let body = body {\n            try wrappedRequest.content.encode(body)\n        }\n\n        // \u56e0\u4e3aapp\u672c\u8eab\u6ca1\u6709\u6b63\u5f0f\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u624b\u52a8\u8fdb\u884cj\u54cd\u5e94\n        let responder = try self.make(Responder.self)\n        return try responder.respond(to: wrappedRequest).wait()\n    }\n\n    func sendRequest(\n        to path: String,\n        method: HTTPMethod,\n        headers: HTTPHeaders = .init(),\n        loggedInRequest: Bool = false,\n        loggedInUser: User? = nil\n    ) throws -&gt; Response {\n        let emptyContent: EmptyContent? = nil\n        return try sendRequest(to: path,\n                               method: method,\n                               headers: headers,\n                               body: emptyContent,\n                               loggedInRequest:loggedInRequest,\n                               loggedInUser: loggedInUser)\n    }\n\n    func sendRequest&lt;T&gt;(\n        to path: String,\n        method: HTTPMethod,\n        headers: HTTPHeaders,\n        data: T,\n        loggedInRequest: Bool = false,\n        loggedInUser: User? = nil\n        ) throws where T: Content {\n\n        _ =  try sendRequest(to: path,\n                               method: method,\n                               headers: headers,\n                               body: data,\n                               loggedInRequest: loggedInRequest,\n                               loggedInUser: loggedInUser)\n    }\n\n\n    func getResponse&lt;C, T&gt;(\n        to path: String,\n        method: HTTPMethod = .GET,\n        headers: HTTPHeaders = .init(),\n        data: C? = nil,\n        decodeTo type: T.Type,\n        loggedInRequest: Bool = false,\n        loggedInUser: User? = nil\n        ) throws -&gt; T where C: Content, T: Decodable {\n\n        let response = try self.sendRequest(to: path,\n                                            method: method,\n                                            headers: headers,\n                                            body: data,\n                                            loggedInRequest: loggedInRequest,\n                                            loggedInUser: loggedInUser)\n        // \u4ece\u54cd\u5e94\u6570\u636e\u4e2d\u89e3\u6790\u51fa\u7528\u6237\u6570\u636e\uff0c\u4e5f\u5373\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u51fa\u6765\u7684\u7528\u6237\u6570\u636e\n        return try response.content.decode(type).wait()\n    }\n\n    func getResponse&lt;T&gt; (\n        to path: String,\n        method: HTTPMethod = .GET,\n        headers: HTTPHeaders = .init(),\n        decodeTo type: T.Type,\n        loggedInRequest: Bool = false,\n        loggedInUser: User? = nil\n    ) throws -&gt; T where T: Decodable {\n        let emptyContent: EmptyContent? = nil\n        return try self.getResponse(to: path,\n                                    method: method,\n                                    headers: headers,\n                                    data: emptyContent,\n                                    decodeTo: type,\n                                    loggedInRequest: loggedInRequest,\n                                    loggedInUser: loggedInUser)\n    }\n}\n</code></pre></p> <p>AcronymTests.swift Swift<pre><code>func testAcronymCanBeSavedWithAPI() throws {\n    ...\n    let receivedAcronym = try app.getResponse(to: acronymsURI, method: .POST, headers: [\"Content-Type\": \"application/json\"], data: acronym, decodeTo: Acronym.self, loggedInRequest: true)\n    ...\n}\n\nfunc testUpdatingAnAcronym() throws {\n    ...\n    try app.sendRequest(to: \"\\(acronymsURI)\\(acronym.id!)\", method: .PUT, headers: [\"Content-Type\": \"application/json\"], data: updatedAcronym, loggedInUser: newUser)\n    ...\n}\n\nfunc testDeletingAnAcronym() throws {\n    ...\n    _ = try app.sendRequest(to: \"\\(acronymsURI)\\(acronym.id!)\", method: .DELETE, loggedInRequest: true)\n    ...\n}\n\nfunc testGettingAnAcronymsUser() throws {\n    ...\n    let acronymsUser = try app.getResponse(to: \"\\(acronymsURI)\\(acronym.id!)/user\", decodeTo: User.Public.self)\n    ...\n}\n\nfunc testAcronymsCategories() throws {\n    ...\n    let categories = try app.getResponse(to: \"\\(acronymsURI)\\(acronym.id!)/categories\", decodeTo: [App.Category].self, loggedInRequest: true)\n\n    ...\n\n    _ = try app.sendRequest(to: \"\\(acronymsURI)\\(acronym.id!)/categories/\\(category.id!)\", method: .DELETE)\n    let newCategories = try app.getResponse(to: \"\\(acronymsURI)\\(acronym.id!)/categories\", decodeTo: [App.Category].self, loggedInRequest: true)\n\n    ...\n}\n\nfunc testAcronymsCategories() throws {\n    ...\n    let request1URL = \"\\(acronymsURI)\\(acronym.id!)/categories/\\(category.id!)\"\n    _ = try app.sendRequest(to: request1URL,method: .POST,loggedInRequest: true)\n\n    let request2URL = \"\\(acronymsURI)\\(acronym.id!)/categories/\\(category2.id!)\"\n    _ = try app.sendRequest(to: request2URL,method: .POST,loggedInRequest: true)\n\n    let categories = try app.getResponse(to: \"\\(acronymsURI)\\(acronym.id!)/categories\", decodeTo: [App.Category].self)\n\n    XCTAssertEqual(categories.count, 2)\n    XCTAssertEqual(categories[0].id, category.id)\n    XCTAssertEqual(categories[0].name, category.name)\n    XCTAssertEqual(categories[1].id, category2.id)\n    XCTAssertEqual(categories[1].name, category2.name)\n\n    let request3URL = \"\\(acronymsURI)\\(acronym.id!)/categories/\\(category.id!)\"\n    _ = try app.sendRequest(to: request3URL,method: .DELETE,loggedInRequest: true)\n    ...\n}\n</code></pre></p> <p>CategoryTests Swift<pre><code>func testCategoryCanBeSavedWithAPI() throws {\n    ...\n    let receivedCategory = try app.getResponse(to: categoriesURI, method: .POST, headers: [\"Content-Type\": \"application/json\"], data: category, decodeTo: Category.self, loggedInRequest:true)\n    ...\n}\n\nfunc testGettingACategoriesAcronymsFromTheAPI() throws {\n    ...\n    let acronym1URL = \"/api/acronyms/\\(acronym.id!)/categories/\\(category.id!)\"\n    _ = try app.sendRequest(to: acronym1URL, method: .POST,loggedInRequest:true)\n\n    let acronym2URL = \"/api/acronyms/\\(acronym2.id!)/categories/\\(category.id!)\"\n    _ = try app.sendRequest(to: acronym2URL, method: .POST, loggedInRequest: true)\n\n    let acronyms = try app.getResponse(to: \"\\(categoriesURI)\\(category.id!)/acronyms\", decodeTo: [Acronym].self, loggedInRequest: true\n    ...\n}\n</code></pre></p> <p>UsesTests Swift<pre><code>func testUsersCanBeRetrievedFromAPI() throws {\n    ...\n    // \u53d1\u8bf7\u6c42\u5e76\u83b7\u5f97\u54cd\u5e94\n    let users = try app.getResponse(to: usersURI, decodeTo: [User.Public].self)\n    ...\n    // \u8003\u8651\u5230\u6709\u4e00\u4e2a\u7ba1\u7406\u5458\u5e10\u6237\n    XCTAssertEqual(users.count, 3)\n    XCTAssertEqual(users[1].name, usersName)\n    XCTAssertEqual(users[1].username, usersUsername)\n    XCTAssertEqual(users[1].id, user.id)\n}\n\nfunc testUserCanBeSavedWithAPI() throws {\n    let user = User(name: usersName, username: usersUsername, password: \"password\")\n    let receivedUser = try app.getResponse(to: usersURI,\n                                            method: .POST,\n                                            headers: [\"Content-Type\":\"application/json\"],\n                                            data: user,\n                                            decodeTo: User.Public.self,\n                                            loggedInRequest: true)\n    ...\n    let users = try app.getResponse(to: usersURI,\n                                decodeTo: [User.Public].self)\n    ...\n    // \u8003\u8651\u5230\u6709\u4e00\u4e2a\u7ba1\u7406\u5458\u5e10\u6237\n    XCTAssertEqual(users.count, 2)\n    XCTAssertEqual(users[1].name, usersName)\n    XCTAssertEqual(users[1].username, usersUsername)\n    XCTAssertEqual(users[1].id, receivedUser.id)\n}\n\nfunc testGettingASingleUserFromTheAPI() throws {\n    ...\n    let receivedUser = try app.getResponse(to: \"\\(usersURI)\\(user.id!)\", decodeTo: User.Public.self)\n    ...\n}\n</code></pre></p> <p>\u4fee\u6539\u5b8c\u5728\u540e\u4e00\u5b9a\u8981\u8dd1\u5b8c\u5355\u5143\u6d4b\u8bd5: </p> <p></p>"},{"location":"server/vapor-can-do/","title":"Vapor\u5de5\u5177\u7bb1\u7684\u80fd\u529b","text":"<p>\u5982\u679c\u4f60\u4e0a\u4e00\u8282\u4e2d\u4f7f\u7528\u4e86<code>vapor --help</code>\u547d\u4ee4\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e9b\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u5c31\u6709\u544a\u8bc9\u4f60Vapor\u5de5\u5177\u7bb1\u80fd\u505a\u54ea\u4e9b\u4e8b\u60c5\u3002</p> <p>Vapor\u5de5\u5177\u7bb1\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1Vapor\u5e94\u7528\u3002\u5b83\u53ef\u4ee5\u4ece\u6307\u5b9a\u6a21\u677f\u521b\u5efa\u5e94\u7528\u3001\u53ef\u4ee5\u8c03\u7528Swift\u5de5\u5177\u94fe\u6765\u6784\u5efa\u548c\u8fd0\u884c\u9879\u76ee\u3001 \u53ef\u4ee5\u751f\u6210\u9879\u76ee\u7684\u5bf9\u5e94Xcode\u9879\u76ee\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u628a\u5e94\u7528\u90e8\u7f72\u5230\u4e91\u4e0a\u73af\u5883\u3002</p> Bash<pre><code>$ vapor --help\nUsage: vapor &lt;command&gt;\n\nVapor Toolbox (Server-side Swift web framework)\n\nCommands:\n        build Builds an app in the console.\n        clean Cleans temporary files.\n       heroku Commands for working with Heroku.\n          new Generates a new app.\n          run Runs an app from the console.\n              Equivalent to `swift run Run`.\n              The --enable-test-discovery flag is automatically set if needed.\n    supervisor Commands for working with supervisord.\n        xcode Opens an app in Xcode.\n\nUse `vapor &lt;command&gt; [--help,-h]` for more information on a command.\n</code></pre> <ul> <li><code>vapor build</code>\u7528\u6765\u6784\u5efa\u5e94\u7528\uff0c\u5728\u6784\u5efa\u4e4b\u524d\uff0cvapor\u9700\u8981\u6309\u5de5\u7a0b\u4f9d\u8d56\u5173\u7cfb\u62c9\u53d6\u6307\u5b9a\u4f9d\u8d56\u3002</li> <li><code>vapor clean</code>\u662f\u7528\u6765\u6e05\u7406\u6784\u5efa\u8fc7\u7a0b\u4e2d\u751f\u6210\u7684\u4e00\u4e9b\u4e34\u65f6\u6587\u4ef6\u6216\u4e2d\u95f4\u4ea7\u7269\uff0c\u8fd9\u4e9b\u4e1c\u897f\u6709\u65f6\u4f1a\u5f15\u8d77\u4e00\u4e9b\u5947\u602a\u7684\u6784\u5efa\u9519\u8bef\uff0c\u6240\u4ee5\u5728\u53d1\u751f\u83ab\u540d\u7684\u6784\u5efa\u9519\u8bef\u65f6\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\u6e05\u7406\u4e00\u4e0b\u4e34\u65f6\u6587\u4ef6\uff0c \u91cd\u65b0\u6784\u5efa\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\u3002</li> <li><code>vapor heroku</code>\u662f\u628a\u5e94\u7528\u90e8\u7f72\u5230heroku\u4e91\u5e73\u53f0\u4e0a\uff0c\u8fd9\u4e2a\u5e73\u53f0\u4e5f\u662f\u5f88\u6709\u540d\u6c14\u7684\u3002</li> <li><code>Vapor new</code>\u547d\u4ee4\u53ef\u4ee5\u4ece\u6a21\u677f\u521b\u5efa\u5de5\u7a0b\uff0c\u8fd9\u79cd\u6a21\u677f\u53ef\u4ee5\u662f\u81ea\u5b9a\u4e49\u7684\uff0c \u4e5f\u53ef\u4ee5\u662fgithub\u4e0a\u5176\u5b83\u4eba\u7684\u5b9a\u4e49\u7684\u3002</li> <li><code>vapor run</code>\u8fd0\u884c\u6784\u5efa\u6210\u529f\u7684\u5e94\u7528\uff0c\u7b49\u4ef7\u4e8e\u547d\u4ee4\uff1a<code>swift run Run</code>\u3002</li> <li><code>vapor supervisor</code> supervisor\u662f\u4e00\u4e2aPython\u5199\u7684\u7c7bUnix\u7cfb\u7edf\u4e0b\u7684\u8fdb\u7a0b\u7ba1\u7406\u5de5\u5177\uff0cVapor\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u521b\u5efa\u5bf9\u5e94supervisor\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5728Vapor\u9879\u76ee\u90e8\u7f72\u5230\u670d\u52a1\u5668\u4e0a\u540e\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u751f\u547d\u5468\u671f\u7ba1\u7406</li> <li><code>vapor xcode</code>\u5728MacOS\u5e73\u53f0\u4e0a\u4f7f\u7528Xcode\u6253\u5f00\u5de5\u7a0b\u6587\u4ef6\uff0c\u65b9\u4fbf\u4f7f\u7528Xcode\u8fdb\u884c\u5f00\u53d1\u3002\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528<code>open Package.swift</code>\u547d\u4ee4\uff0c\u56e0\u4e3a\u65b0\u7248\u672c\u7684Xcode\u5df2\u7ecf\u9ed8\u8ba4\u652f\u6301\u4e86Swift Package Manager\u9879\u76ee\uff0c\u6240\u4ee5\u7cfb\u7edf\u53ef\u4ee5\u8bc6\u522b\u51fa\u6765\uff0c\u5e76\u8c03\u7528Xcode\u6253\u5f00\u5bf9\u5e94\u7684SPM\u9879\u76ee\u3002</li> </ul> <p>\u8fd9\u4e9b\u547d\u4ee4\u4f1a\u5728\u4e4b\u540e\u7684\u5b9e\u8df5\u4e2d\u7528\u5230\uff0c\u6162\u6162\u719f\u6089\u5e76\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u4e0b\u9762\u4f7f\u7528<code>vapor new</code>\u6765\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\u5e76\u8fd0\u884c\uff0c\u4f5c\u4e3a\u793a\u4f8b\u3002</p> <p>1. \u521b\u5efa\u9879\u76ee\u793a\u4f8b</p> <p>Bash<pre><code>$ mkdir ~/vapor\n$ cd ~/vapor\n$ vapor new HelloVapor\n</code></pre> \u521b\u5efa\u65f6\u4f1a\u63d0\u793a\u6211\u4eec\u662f\u5426\u9700\u8981\u4f7f\u7528<code>Fluent</code>\u548c<code>Leaf</code>\uff0c\u8f93\u5165<code>n</code>\uff0c\u76ee\u524d\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u3002</p> <p><code>Fluent</code>\u662f\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684ORM\u6846\u67b6\uff0c<code>Leaf</code>\u662fweb\u5f00\u53d1\u65f6\u4f7f\u7528\u7684\u6a21\u677f\u8bed\u8a00\u6846\u67b6\u3002</p> <p>2. \u8fd0\u884c\u9879\u76ee\u793a\u4f8b</p> Bash<pre><code>$ cd HelloVapor\n$ vapor run\nUpdating https://github.com/vapor/vapor.git\nFetching https://github.com/vapor/multipart-kit.git\nFetching https://github.com/apple/swift-nio.git\n......\n[1462/1462] Linking Run\n[ NOTICE ] Server starting on http://127.0.0.1:8080\n</code></pre> <p>Warning</p> <p>\u7b2c\u4e00\u6b21\u8fd0\u884c\u4f1a\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u4e3a\u5b83\u8981\u4eceGitHub\u4e0a\u62c9\u53d6\u4e00\u4e9b\u4f9d\u8d56\u7684\u4ee3\u7801\u4ed3\u5e93\u5230\u672c\u5730\u540e\u518d\u8fdb\u884c\u7f16\u8bd1\u3002GitHub\u5728\u4e2d\u56fd\u6709\u53ef\u80fd\u4f1a\u88abDNS\u6c61\u67d3\uff0c\u8bbf\u95ee\u4e0d\u592a\u7a33\u5b9a\u3002\u56fd\u5185\u7684\u670b\u53cb\u9700\u8981\u4f7f\u7528\u4e00\u4e9bGitHub\u8bbf\u95ee\u52a0\u901f\u65b9\u6848\uff0c\u5982\u679c\u6709\u5408\u6cd5\u4ee3\u7406\u53ef\u4ee5\u8bbf\u95ee\u56fd\u9645\u4e92\u8054\u7f51\u7684\u65b9\u5f0f\u662f\u6700\u597d\u7684\u3002</p> <p>\u76ee\u524d\u670d\u52a1\u5df2\u7ecf\u8fd0\u884c\u5728 http://127.0.0.1:8080\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u884c\u8bbf\u95ee\u3002</p> <p></p> <p>\u7aef\u53e3\u5360\u7528\u67e5\u8be2</p> <p>\u6709\u65f6\u5728\u8fd0\u884c\u5e94\u7528\u65f6\u4f1a\u53d1\u73b0\u60f3\u8981\u76d1\u542c\u7684\u7aef\u53e3\u5df2\u7ecf\u88ab\u5176\u5b83\u7684\u5e94\u7528\u7a0b\u5e8f\u7ed1\u5b9a\u4e86\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u67e5\u770b\u4e00\u4e0b\u5230\u5e95\u662f\u8c01\u5728\u4f7f\u7528\u3002 \u5728MacOS\u4e0a\uff0c\u7ec8\u7aef\u952e\u5165\u547d\u4ee4<code>lsof -i tcp:8080</code>\u53ef\u4ee5\u67e5\u770b\u6307\u5b9a\u7aef\u53e3\u5f53\u524d\u88ab\u54ea\u4e9b\u5e94\u7528\u4f7f\u7528\u3002\u7136\u540e\u4f7f\u7528<code>pkill &lt;APP_NAME&gt;</code>\u6765\u5173\u95ed\u8fd9\u4e9b\u5360\u7528\u7aef\u53e3\u7684\u5e94\u7528\u3002 \u5982\u679c\u5360\u7528\u7aef\u53e3\u7684\u5e94\u7528\u5f88\u91cd\u8981\uff0c\u90a3\u4e48\u4f60\u5c31\u8981\u8003\u8651\u6362\u4e00\u4e2a\u7aef\u53e3\u6765\u76d1\u542c\u8fd0\u884c\u4f60\u7684Vapor\u9879\u76ee\u4e86\u3002</p> <p>\u67e5\u770bVapor API\u9879\u76ee\u7684\u6240\u6709\u8def\u7531\u4fe1\u606f</p> <p>\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u547d\u4ee4\uff0c\u67e5\u770b\u8fd9\u4e2aapi\u9879\u76ee\u63d0\u4f9b\u7684\u6240\u6709\u53ef\u7528\u8def\u7531\u4fe1\u606f\u4e86\uff1a </p> Bash<pre><code>$  vapor run routes\n+-----+--------+\n| GET | /      |\n+-----+--------+\n| GET | /hello |\n+-----+--------+\n</code></pre> <p>\u9879\u76ee\u6a21\u677f\u9ed8\u8ba4\u63d0\u4f9b\u4e24\u4e2aroute\uff1a<code>/</code>\u548c<code>/hello</code>, \u7528\u6d4f\u89c8\u5668\u8bbf\u95ee\u4e00\u4e0b\u8bd5\u8bd5\uff1a</p> <ul> <li> <p>http://localhost:8080/</p> </li> <li> <p>http://localhost:8080/hello</p> </li> </ul> <p></p> <p>\u5207\u6362\u670d\u52a1\u8fd0\u884c\u7684\u7aef\u53e3\u548c\u4e3b\u673a\u5730\u5740</p> <p>\u4f7f\u7528<code>vapor run</code>\u547d\u4ee4\u8fd0\u884c\u9879\u76ee\uff0c\u9ed8\u8ba4\u662f\u5728\u76d1\u542c<code>127.0.0.1:8080</code>\uff0c\u6240\u4ee5\u4f60\u53ea\u80fd\u4ece\u672c\u673a\u8bbf\u95ee\u3002\u5982\u679c\u8981\u6307\u5b9a\u7aef\u53e3\u548c\u5141\u8bb8\u4efb\u610fIP\u5730\u5740\u8bbf\u95eeAPI\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c: Bash<pre><code>vapor run serve --hostname 0.0.0.0 --port 80\n</code></pre> \u8fd0\u884c\u8d77\u6765\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5185\u7f51\u4e2d\u7684\u4efb\u4f55\u8bbe\u5907\u4e0a\u8bbf\u95ee\u4e86\u5230\u521a\u521a\u5f00\u53d1\u7684API\u4e86\uff0c\u4f8b\u5982\u53ef\u4ee5\u4f7f\u7528\u624b\u673a\u6d4f\u89c8\u5668\u8bbf\u95ee\u7535\u8111\u7684\u5185\u7f51IP\uff0c\u9a8c\u8bc1API\u670d\u52a1\u6b63\u5e38\u5de5\u4f5c\u3002</p>"}]}